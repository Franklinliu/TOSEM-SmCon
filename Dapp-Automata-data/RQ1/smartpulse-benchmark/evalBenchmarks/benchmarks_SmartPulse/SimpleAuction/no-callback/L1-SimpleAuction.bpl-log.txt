This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:36:15,754 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:36:15,755 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:36:15,766 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:36:15,766 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:36:15,767 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:36:15,769 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:36:15,770 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:36:15,772 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:36:15,774 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:36:15,775 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:36:15,775 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:36:15,777 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:36:15,778 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:36:15,780 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:36:15,781 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:36:15,782 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:36:15,783 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:36:15,784 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:36:15,786 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:36:15,787 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:36:15,788 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:36:15,792 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:36:15,793 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:36:15,793 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:36:15,794 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:36:15,794 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:36:15,795 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:36:15,795 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:36:15,796 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:36:15,796 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:36:15,797 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:36:15,798 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:36:15,799 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:36:15,817 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:36:15,819 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:36:15,819 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:36:15,819 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:36:15,820 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:36:15,820 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:36:15,820 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:36:15,821 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:36:15,821 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:36:15,831 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:36:15,831 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:36:15,832 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:36:15,832 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:36:15,832 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:36:15,832 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:36:15,832 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:36:15,832 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:36:15,832 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:36:15,833 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:36:15,833 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:36:15,833 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:36:15,834 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:36:15,834 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:36:15,834 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:36:15,834 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:36:15,834 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:36:15,855 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:36:15,865 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:36:15,867 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:36:15,868 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:36:15,868 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:36:15,869 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/no-callback/L1-SimpleAuction.bpl
[2020-05-31 02:36:15,869 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/no-callback/L1-SimpleAuction.bpl'
[2020-05-31 02:36:15,908 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:36:15,909 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:36:15,910 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:36:15,910 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:36:15,910 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:36:15,922 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,923 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,939 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,939 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,951 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,956 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,959 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,964 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:36:15,964 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:36:15,964 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:36:15,966 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:36:15,969 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/1) ...
[2020-05-31 02:36:15,978 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:36:15,982 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:36:15,988 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:36:15,991 INFO  L599   opiaSpecLangObserver]: Parsed ( ( user==( old(highestBidder_SimpleAuction[this]) ) && val==( old(highestBid_SimpleAuction[this]) ) ) && user!=0 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[highestBidder_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]]],BinaryExpression[COMPEQ,IdentifierExpression[val,GLOBAL],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[highestBid_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]]]],BinaryExpression[COMPNEQ,IdentifierExpression[user,GLOBAL],IntegerLiteral[0]]]
[2020-05-31 02:36:15,992 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount>=val ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPGEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[val,GLOBAL]]]
[2020-05-31 02:36:15,993 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:36:15,993 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_bid_SimpleAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:36:15,993 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:36:15,993 INFO  L979   opiaSpecLangObserver]: Successfully lexed: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:36:15,994 INFO  L981   opiaSpecLangObserver]: Successfully parsed: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:36:15,995 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_SimpleAuction>]]
[2020-05-31 02:36:15,995 INFO  L968   opiaSpecLangObserver]: Compiling: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:36:15,995 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( <>AP(success_withdraw_SimpleAuction0) ) )
Executed UtopiaSpecLang
[2020-05-31 02:36:15,999 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:15 PropertyContainer
[2020-05-31 02:36:16,000 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:36:16,000 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:36:16,000 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:36:16,000 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:36:16,001 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/2) ...
[2020-05-31 02:36:16,001 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:36:16,001 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:36:16,007 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:15" (2/2) ...
[2020-05-31 02:36:16,008 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:36:16,008 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:36:16,008 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:36:16,008 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:36:16,009 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/2) ...
[2020-05-31 02:36:16,051 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:36:16,051 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:36:16,051 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:36:16,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:36:16,051 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction
[2020-05-31 02:36:16,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction
[2020-05-31 02:36:16,052 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction
[2020-05-31 02:36:16,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction
[2020-05-31 02:36:16,052 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:36:16,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:36:16,052 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction
[2020-05-31 02:36:16,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SimpleAuction
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__success
[2020-05-31 02:36:16,053 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__fail
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__success
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:36:16,054 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:36:16,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:36:16,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:36:16,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:36:16,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__fail
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:36:16,055 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:36:16,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:36:16,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:36:16,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:36:16,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SimpleAuction
[2020-05-31 02:36:16,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:36:16,056 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:36:16,056 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:36:16,176 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:16,192 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:16,256 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:16,323 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:16,335 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:36:16,335 INFO  L286             CfgBuilder]: Removed 1 assue(true) statements.
[2020-05-31 02:36:16,336 INFO  L202        PluginConnector]: Adding new model L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:16 BoogieIcfgContainer
[2020-05-31 02:36:16,337 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:15" (2/2) ...
[2020-05-31 02:36:16,337 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:36:16,337 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1a90d3e4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:16, skipping insertion in model container
[2020-05-31 02:36:16,337 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:36:16,337 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:36:16,337 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:36:16,338 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:36:16,339 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/3) ...
[2020-05-31 02:36:16,339 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@4dba0352 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:16, skipping insertion in model container
[2020-05-31 02:36:16,339 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:15" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( [] ( <>a ) ) && ! ( ( [] ( b -> ( <>c ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:36:16,370 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:16 NWAContainer
[2020-05-31 02:36:16,371 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:36:16,371 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:36:16,371 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:36:16,372 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:36:16,372 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:16" (3/4) ...
[2020-05-31 02:36:16,373 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3d37f49e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:16, skipping insertion in model container
[2020-05-31 02:36:16,373 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:16" (4/4) ...
[2020-05-31 02:36:16,376 INFO  L104   BuchiProductObserver]: Initial property automaton 3 locations, 6 edges
[2020-05-31 02:36:16,377 INFO  L110   BuchiProductObserver]: Initial RCFG 561 locations, 648 edges
[2020-05-31 02:36:16,378 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:36:16,386 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:36:17,300 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:36:17,303 INFO  L110   BuchiProductObserver]: BuchiProgram size 1855 locations, 3955 edges
[2020-05-31 02:36:17,304 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:17 BoogieIcfgContainer
[2020-05-31 02:36:17,304 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:36:17,304 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:36:17,304 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:36:17,306 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:36:17,307 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:17" (1/1) ...
[2020-05-31 02:36:17,354 INFO  L313           BlockEncoder]: Initial Icfg 1855 locations, 3955 edges
[2020-05-31 02:36:17,355 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:36:17,356 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:36:17,356 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:36:17,356 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:36:17,365 INFO  L70    emoveInfeasibleEdges]: Removed 39 edges and 8 locations because of local infeasibility
[2020-05-31 02:36:17,371 INFO  L70        RemoveSinkStates]: Removed 5 edges and 2 locations by removing sink states
[2020-05-31 02:36:17,379 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:36:17,382 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:36:17,385 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:36:17,386 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:36:17,390 INFO  L313           BlockEncoder]: Encoded RCFG 1836 locations, 3896 edges
[2020-05-31 02:36:17,390 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:36:17 BasicIcfg
[2020-05-31 02:36:17,391 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:36:17,391 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:36:17,391 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:36:17,393 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:36:17,394 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:17,394 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:15" (1/6) ...
[2020-05-31 02:36:17,395 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56cef805 and model type L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:36:17, skipping insertion in model container
[2020-05-31 02:36:17,395 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:17,395 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:15" (2/6) ...
[2020-05-31 02:36:17,395 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56cef805 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:36:17, skipping insertion in model container
[2020-05-31 02:36:17,395 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:17,395 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:16" (3/6) ...
[2020-05-31 02:36:17,395 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56cef805 and model type L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:36:17, skipping insertion in model container
[2020-05-31 02:36:17,395 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:17,395 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:16" (4/6) ...
[2020-05-31 02:36:17,396 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56cef805 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:36:17, skipping insertion in model container
[2020-05-31 02:36:17,396 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:17,396 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:17" (5/6) ...
[2020-05-31 02:36:17,396 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@56cef805 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:36:17, skipping insertion in model container
[2020-05-31 02:36:17,396 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:17,396 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:36:17" (6/6) ...
[2020-05-31 02:36:17,397 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-SimpleAuction.bpl_BEv2
[2020-05-31 02:36:17,430 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:36:17,430 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:36:17,430 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:36:17,430 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:36:17,430 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:36:17,430 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:36:17,430 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:36:17,431 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:36:17,431 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:36:17,450 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1836 states.
[2020-05-31 02:36:17,494 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:17,494 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:17,495 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:17,506 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:17,506 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:17,506 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:36:17,506 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1836 states.
[2020-05-31 02:36:17,520 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:17,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:17,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:17,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:17,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND FALSE  !(gas >= 0)
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND FALSE  !(gas >= 0)
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND FALSE  !(Balance[from] >= amount)
[L1078]              success := false;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == user && amount >= val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:17,541 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:17,541 INFO  L82        PathProgramCache]: Analyzing trace with hash -1513471198, now seen corresponding path program 1 times
[2020-05-31 02:36:17,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:17,568 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:17,623 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:17,625 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:17,625 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:36:17,629 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:17,737 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:36:17,738 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:36:17,739 INFO  L87              Difference]: Start difference. First operand 1836 states. Second operand 3 states.
[2020-05-31 02:36:17,872 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:17,873 INFO  L93              Difference]: Finished difference Result 1607 states and 2755 transitions.
[2020-05-31 02:36:17,873 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:36:17,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1607 states and 2755 transitions.
[2020-05-31 02:36:17,888 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:17,904 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1607 states to 1607 states and 2755 transitions.
[2020-05-31 02:36:17,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:36:17,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 6
[2020-05-31 02:36:17,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1607 states and 2755 transitions.
[2020-05-31 02:36:17,914 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:17,914 INFO  L728         BuchiCegarLoop]: Abstraction has 1607 states and 2755 transitions.
[2020-05-31 02:36:17,933 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1607 states and 2755 transitions.
[2020-05-31 02:36:17,976 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1607 to 1607.
[2020-05-31 02:36:17,976 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1607 states.
[2020-05-31 02:36:17,985 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1607 states to 1607 states and 2755 transitions.
[2020-05-31 02:36:17,986 INFO  L751         BuchiCegarLoop]: Abstraction has 1607 states and 2755 transitions.
[2020-05-31 02:36:17,986 INFO  L631         BuchiCegarLoop]: Abstraction has 1607 states and 2755 transitions.
[2020-05-31 02:36:17,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:36:17,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1607 states and 2755 transitions.
[2020-05-31 02:36:17,990 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:17,990 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:17,990 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:17,992 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:17,992 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:17,999 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:17,999 INFO  L82        PathProgramCache]: Analyzing trace with hash 1887924333, now seen corresponding path program 1 times
[2020-05-31 02:36:18,000 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:18,014 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:18,033 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:18,034 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:18,034 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:18,035 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:18,035 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:18,035 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:18,035 INFO  L87              Difference]: Start difference. First operand 1607 states and 2755 transitions. cyclomatic complexity: 1150 Second operand 4 states.
[2020-05-31 02:36:18,410 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:18,410 INFO  L93              Difference]: Finished difference Result 2021 states and 3572 transitions.
[2020-05-31 02:36:18,411 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:18,411 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2021 states and 3572 transitions.
[2020-05-31 02:36:18,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:36:18,433 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2021 states to 1982 states and 3496 transitions.
[2020-05-31 02:36:18,433 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-05-31 02:36:18,434 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 12
[2020-05-31 02:36:18,434 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1982 states and 3496 transitions.
[2020-05-31 02:36:18,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:18,440 INFO  L728         BuchiCegarLoop]: Abstraction has 1982 states and 3496 transitions.
[2020-05-31 02:36:18,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1982 states and 3496 transitions.
[2020-05-31 02:36:18,473 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1982 to 1672.
[2020-05-31 02:36:18,473 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1672 states.
[2020-05-31 02:36:18,480 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1672 states to 1672 states and 2876 transitions.
[2020-05-31 02:36:18,480 INFO  L751         BuchiCegarLoop]: Abstraction has 1672 states and 2876 transitions.
[2020-05-31 02:36:18,480 INFO  L631         BuchiCegarLoop]: Abstraction has 1672 states and 2876 transitions.
[2020-05-31 02:36:18,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:36:18,481 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1672 states and 2876 transitions.
[2020-05-31 02:36:18,488 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:36:18,488 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:18,489 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:18,490 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:18,491 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:18,494 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:18,494 INFO  L82        PathProgramCache]: Analyzing trace with hash -1966099020, now seen corresponding path program 1 times
[2020-05-31 02:36:18,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:18,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:18,558 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:18,559 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:18,559 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:18,559 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:18,560 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:36:18,560 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:36:18,560 INFO  L87              Difference]: Start difference. First operand 1672 states and 2876 transitions. cyclomatic complexity: 1206 Second operand 5 states.
[2020-05-31 02:36:18,776 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:18,776 INFO  L93              Difference]: Finished difference Result 1146 states and 1244 transitions.
[2020-05-31 02:36:18,776 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:36:18,776 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1146 states and 1244 transitions.
[2020-05-31 02:36:18,782 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:18,785 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1146 states to 1146 states and 1244 transitions.
[2020-05-31 02:36:18,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:36:18,786 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:36:18,786 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1146 states and 1244 transitions.
[2020-05-31 02:36:18,788 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:18,788 INFO  L728         BuchiCegarLoop]: Abstraction has 1146 states and 1244 transitions.
[2020-05-31 02:36:18,789 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1146 states and 1244 transitions.
[2020-05-31 02:36:18,798 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1146 to 1146.
[2020-05-31 02:36:18,798 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1146 states.
[2020-05-31 02:36:18,800 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1146 states to 1146 states and 1244 transitions.
[2020-05-31 02:36:18,800 INFO  L751         BuchiCegarLoop]: Abstraction has 1146 states and 1244 transitions.
[2020-05-31 02:36:18,800 INFO  L631         BuchiCegarLoop]: Abstraction has 1146 states and 1244 transitions.
[2020-05-31 02:36:18,800 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:36:18,800 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1146 states and 1244 transitions.
[2020-05-31 02:36:18,802 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:18,803 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:18,803 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:18,804 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:18,804 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:18,806 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:18,806 INFO  L82        PathProgramCache]: Analyzing trace with hash -1966099079, now seen corresponding path program 1 times
[2020-05-31 02:36:18,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:18,819 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:18,890 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:18,890 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:18,890 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:36:18,891 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:18,891 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-31 02:36:18,891 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-05-31 02:36:18,891 INFO  L87              Difference]: Start difference. First operand 1146 states and 1244 transitions. cyclomatic complexity: 100 Second operand 9 states.
[2020-05-31 02:36:19,529 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:19,529 INFO  L93              Difference]: Finished difference Result 1193 states and 1295 transitions.
[2020-05-31 02:36:19,529 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:36:19,529 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1193 states and 1295 transitions.
[2020-05-31 02:36:19,533 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:19,539 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1193 states to 1193 states and 1295 transitions.
[2020-05-31 02:36:19,539 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:36:19,539 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:36:19,539 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1193 states and 1295 transitions.
[2020-05-31 02:36:19,541 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:19,541 INFO  L728         BuchiCegarLoop]: Abstraction has 1193 states and 1295 transitions.
[2020-05-31 02:36:19,542 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1193 states and 1295 transitions.
[2020-05-31 02:36:19,553 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1193 to 1145.
[2020-05-31 02:36:19,553 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1145 states.
[2020-05-31 02:36:19,555 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1145 states to 1145 states and 1233 transitions.
[2020-05-31 02:36:19,555 INFO  L751         BuchiCegarLoop]: Abstraction has 1145 states and 1233 transitions.
[2020-05-31 02:36:19,555 INFO  L631         BuchiCegarLoop]: Abstraction has 1145 states and 1233 transitions.
[2020-05-31 02:36:19,555 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:36:19,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1145 states and 1233 transitions.
[2020-05-31 02:36:19,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:19,558 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:19,558 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:19,559 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:19,560 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:19,561 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:19,561 INFO  L82        PathProgramCache]: Analyzing trace with hash -84306485, now seen corresponding path program 1 times
[2020-05-31 02:36:19,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:19,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:19,614 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:19,615 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:19,615 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:36:19,615 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:19,615 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:36:19,615 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:36:19,615 INFO  L87              Difference]: Start difference. First operand 1145 states and 1233 transitions. cyclomatic complexity: 90 Second operand 11 states.
[2020-05-31 02:36:20,144 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:20,144 INFO  L93              Difference]: Finished difference Result 1167 states and 1261 transitions.
[2020-05-31 02:36:20,144 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 02:36:20,144 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1167 states and 1261 transitions.
[2020-05-31 02:36:20,148 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:20,151 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1167 states to 1167 states and 1261 transitions.
[2020-05-31 02:36:20,151 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:36:20,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:36:20,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1167 states and 1261 transitions.
[2020-05-31 02:36:20,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:20,152 INFO  L728         BuchiCegarLoop]: Abstraction has 1167 states and 1261 transitions.
[2020-05-31 02:36:20,153 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1167 states and 1261 transitions.
[2020-05-31 02:36:20,161 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1167 to 1160.
[2020-05-31 02:36:20,161 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1160 states.
[2020-05-31 02:36:20,163 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1160 states to 1160 states and 1250 transitions.
[2020-05-31 02:36:20,163 INFO  L751         BuchiCegarLoop]: Abstraction has 1160 states and 1250 transitions.
[2020-05-31 02:36:20,163 INFO  L631         BuchiCegarLoop]: Abstraction has 1160 states and 1250 transitions.
[2020-05-31 02:36:20,163 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:36:20,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1160 states and 1250 transitions.
[2020-05-31 02:36:20,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:20,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:20,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:20,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:20,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND TRUE   __exception
[L112]                   __tmp__Balance := Balance;
[L113]                   __tmp__DType := DType;
[L114]                   __tmp__Alloc := Alloc;
[L115]                   __tmp__balance_ADDR := balance_ADDR;
[L116]                   __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]                   __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]                   __tmp__Length := Length;
[L119]                   __tmp__now := now;
[L120]                   __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]                   __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]                   __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]                   __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]                   __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]                   __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]                   __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]                   __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]       CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]                   assume msgsender_MSG != null;
[L462]                   __tmp__Balance[this] := 0;
[L463]                   __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]                   __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]                   __tmp__highestBidder_SimpleAuction[this] := null;
[L466]                   __tmp__highestBid_SimpleAuction[this] := 0;
[L467]       CALL        call __var_1 := FreshRefGenerator__fail();
[L438]                   havoc newRef;
[L439]                   assume __tmp__Alloc[newRef] == false;
[L440]                   __tmp__Alloc[newRef] := true;
[L441]                   assume newRef != null;
[L467]       RET         call __var_1 := FreshRefGenerator__fail();
[L468]       COND FALSE  !(revert)
[L473]                   __tmp__pendingReturns_SimpleAuction[this] := __var_1;
[L474]                   __tmp__M_Ref_int_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L475]                   __tmp__sum_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := 0;
[L476]                   __tmp__ended_SimpleAuction[this] := false;
[L477]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L478]                   __tmp___beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L479]                   __tmp__beneficiary_SimpleAuction[this] := null;
[L480]                   __tmp__beneficiary_SimpleAuction[this] := __tmp___beneficiary_SimpleAuction[this];
[L481]                   assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L482]                   assume __tmp__now >= 0;
[L483]                   __tmp__auctionStart_SimpleAuction[this] := __tmp__now;
[L484]                   assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L485]                   __tmp__biddingTime_SimpleAuction[this] := 2587587;
[L529]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]       COND FALSE  !(revert)
[L128]       RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]                   assume revert || gas < 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:20,170 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:20,170 INFO  L82        PathProgramCache]: Analyzing trace with hash 903099079, now seen corresponding path program 1 times
[2020-05-31 02:36:20,171 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:20,179 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:20,198 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:20,198 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:20,198 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:20,199 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:20,199 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:20,199 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:20,199 INFO  L87              Difference]: Start difference. First operand 1160 states and 1250 transitions. cyclomatic complexity: 93 Second operand 4 states.
[2020-05-31 02:36:20,336 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:20,336 INFO  L93              Difference]: Finished difference Result 1374 states and 1536 transitions.
[2020-05-31 02:36:20,336 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:20,337 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1374 states and 1536 transitions.
[2020-05-31 02:36:20,344 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:20,351 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1374 states to 1313 states and 1475 transitions.
[2020-05-31 02:36:20,351 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:36:20,351 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:36:20,351 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1313 states and 1475 transitions.
[2020-05-31 02:36:20,353 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:20,353 INFO  L728         BuchiCegarLoop]: Abstraction has 1313 states and 1475 transitions.
[2020-05-31 02:36:20,354 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1313 states and 1475 transitions.
[2020-05-31 02:36:20,371 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1313 to 1099.
[2020-05-31 02:36:20,371 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1099 states.
[2020-05-31 02:36:20,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1099 states to 1099 states and 1188 transitions.
[2020-05-31 02:36:20,374 INFO  L751         BuchiCegarLoop]: Abstraction has 1099 states and 1188 transitions.
[2020-05-31 02:36:20,374 INFO  L631         BuchiCegarLoop]: Abstraction has 1099 states and 1188 transitions.
[2020-05-31 02:36:20,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:36:20,375 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1099 states and 1188 transitions.
[2020-05-31 02:36:20,379 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:20,379 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:20,379 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:20,381 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:20,382 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:20,386 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:20,386 INFO  L82        PathProgramCache]: Analyzing trace with hash 1808473676, now seen corresponding path program 1 times
[2020-05-31 02:36:20,387 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:20,412 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:20,436 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:20,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:20,499 INFO  L82        PathProgramCache]: Analyzing trace with hash 116516068, now seen corresponding path program 1 times
[2020-05-31 02:36:20,500 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:20,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:20,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:20,516 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:20,516 INFO  L82        PathProgramCache]: Analyzing trace with hash -902857489, now seen corresponding path program 1 times
[2020-05-31 02:36:20,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:20,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:20,661 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 39 proven. 20 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:20,661 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:20,661 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-05-31 02:36:20,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-31 02:36:20,662 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=496, Unknown=0, NotChecked=0, Total=552
[2020-05-31 02:36:20,662 INFO  L87              Difference]: Start difference. First operand 1099 states and 1188 transitions. cyclomatic complexity: 92 Second operand 24 states.
[2020-05-31 02:36:22,307 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:22,307 INFO  L93              Difference]: Finished difference Result 1257 states and 1381 transitions.
[2020-05-31 02:36:22,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-05-31 02:36:22,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1257 states and 1381 transitions.
[2020-05-31 02:36:22,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:22,315 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1257 states to 1257 states and 1377 transitions.
[2020-05-31 02:36:22,315 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:22,315 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:22,316 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1257 states and 1377 transitions.
[2020-05-31 02:36:22,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:22,317 INFO  L728         BuchiCegarLoop]: Abstraction has 1257 states and 1377 transitions.
[2020-05-31 02:36:22,318 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1257 states and 1377 transitions.
[2020-05-31 02:36:22,327 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1257 to 1225.
[2020-05-31 02:36:22,327 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1225 states.
[2020-05-31 02:36:22,328 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1225 states to 1225 states and 1341 transitions.
[2020-05-31 02:36:22,329 INFO  L751         BuchiCegarLoop]: Abstraction has 1225 states and 1341 transitions.
[2020-05-31 02:36:22,329 INFO  L631         BuchiCegarLoop]: Abstraction has 1225 states and 1341 transitions.
[2020-05-31 02:36:22,329 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:36:22,329 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1225 states and 1341 transitions.
[2020-05-31 02:36:22,332 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:22,333 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:22,333 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:22,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:22,336 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:22,341 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:22,342 INFO  L82        PathProgramCache]: Analyzing trace with hash 166934554, now seen corresponding path program 1 times
[2020-05-31 02:36:22,342 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:22,361 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:22,384 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:22,410 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:22,410 INFO  L82        PathProgramCache]: Analyzing trace with hash -1641838971, now seen corresponding path program 1 times
[2020-05-31 02:36:22,410 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:22,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:22,433 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-31 02:36:22,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:22,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:22,433 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:36:22,433 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:22,433 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:22,433 INFO  L87              Difference]: Start difference. First operand 1225 states and 1341 transitions. cyclomatic complexity: 119 Second operand 4 states.
[2020-05-31 02:36:22,440 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:22,440 INFO  L93              Difference]: Finished difference Result 1251 states and 1370 transitions.
[2020-05-31 02:36:22,440 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:22,440 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1251 states and 1370 transitions.
[2020-05-31 02:36:22,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:22,446 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1251 states to 1251 states and 1370 transitions.
[2020-05-31 02:36:22,446 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:22,446 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:22,446 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1251 states and 1370 transitions.
[2020-05-31 02:36:22,447 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:22,447 INFO  L728         BuchiCegarLoop]: Abstraction has 1251 states and 1370 transitions.
[2020-05-31 02:36:22,448 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1251 states and 1370 transitions.
[2020-05-31 02:36:22,457 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1251 to 1247.
[2020-05-31 02:36:22,458 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1247 states.
[2020-05-31 02:36:22,459 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1247 states to 1247 states and 1366 transitions.
[2020-05-31 02:36:22,459 INFO  L751         BuchiCegarLoop]: Abstraction has 1247 states and 1366 transitions.
[2020-05-31 02:36:22,459 INFO  L631         BuchiCegarLoop]: Abstraction has 1247 states and 1366 transitions.
[2020-05-31 02:36:22,459 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:36:22,459 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1247 states and 1366 transitions.
[2020-05-31 02:36:22,461 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:22,461 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:22,461 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:22,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:22,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:22,466 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:22,466 INFO  L82        PathProgramCache]: Analyzing trace with hash 166934554, now seen corresponding path program 2 times
[2020-05-31 02:36:22,467 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:22,482 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:22,500 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:22,524 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:22,524 INFO  L82        PathProgramCache]: Analyzing trace with hash 591583591, now seen corresponding path program 1 times
[2020-05-31 02:36:22,525 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:22,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:22,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-05-31 02:36:22,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:22,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:36:22,564 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:36:22,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:36:22,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:36:22,564 INFO  L87              Difference]: Start difference. First operand 1247 states and 1366 transitions. cyclomatic complexity: 122 Second operand 11 states.
[2020-05-31 02:36:22,831 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:22,831 INFO  L93              Difference]: Finished difference Result 1433 states and 1578 transitions.
[2020-05-31 02:36:22,831 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:36:22,832 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1433 states and 1578 transitions.
[2020-05-31 02:36:22,836 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:36:22,842 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1433 states to 1359 states and 1494 transitions.
[2020-05-31 02:36:22,842 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:22,843 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:22,843 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1359 states and 1494 transitions.
[2020-05-31 02:36:22,844 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:22,845 INFO  L728         BuchiCegarLoop]: Abstraction has 1359 states and 1494 transitions.
[2020-05-31 02:36:22,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1359 states and 1494 transitions.
[2020-05-31 02:36:22,861 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1359 to 1247.
[2020-05-31 02:36:22,861 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1247 states.
[2020-05-31 02:36:22,862 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1247 states to 1247 states and 1350 transitions.
[2020-05-31 02:36:22,862 INFO  L751         BuchiCegarLoop]: Abstraction has 1247 states and 1350 transitions.
[2020-05-31 02:36:22,863 INFO  L631         BuchiCegarLoop]: Abstraction has 1247 states and 1350 transitions.
[2020-05-31 02:36:22,863 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:36:22,863 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1247 states and 1350 transitions.
[2020-05-31 02:36:22,864 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:22,864 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:22,864 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:22,866 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:22,866 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:22,869 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:22,870 INFO  L82        PathProgramCache]: Analyzing trace with hash 166934554, now seen corresponding path program 3 times
[2020-05-31 02:36:22,870 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:22,886 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:22,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:22,930 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:22,930 INFO  L82        PathProgramCache]: Analyzing trace with hash -658201404, now seen corresponding path program 1 times
[2020-05-31 02:36:22,931 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:22,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:23,026 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 18 proven. 2 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:23,026 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:23,026 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-31 02:36:23,026 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:36:23,026 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-31 02:36:23,026 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=334, Unknown=0, NotChecked=0, Total=380
[2020-05-31 02:36:23,027 INFO  L87              Difference]: Start difference. First operand 1247 states and 1350 transitions. cyclomatic complexity: 106 Second operand 20 states.
[2020-05-31 02:36:24,240 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:24,240 INFO  L93              Difference]: Finished difference Result 1474 states and 1615 transitions.
[2020-05-31 02:36:24,241 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:36:24,241 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1474 states and 1615 transitions.
[2020-05-31 02:36:24,243 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:24,246 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1474 states to 1468 states and 1609 transitions.
[2020-05-31 02:36:24,246 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:24,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:24,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1468 states and 1609 transitions.
[2020-05-31 02:36:24,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:24,247 INFO  L728         BuchiCegarLoop]: Abstraction has 1468 states and 1609 transitions.
[2020-05-31 02:36:24,248 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1468 states and 1609 transitions.
[2020-05-31 02:36:24,258 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1468 to 1413.
[2020-05-31 02:36:24,258 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1413 states.
[2020-05-31 02:36:24,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1413 states to 1413 states and 1545 transitions.
[2020-05-31 02:36:24,260 INFO  L751         BuchiCegarLoop]: Abstraction has 1413 states and 1545 transitions.
[2020-05-31 02:36:24,260 INFO  L631         BuchiCegarLoop]: Abstraction has 1413 states and 1545 transitions.
[2020-05-31 02:36:24,260 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:36:24,260 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1413 states and 1545 transitions.
[2020-05-31 02:36:24,263 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:24,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:24,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:24,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:24,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:24,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:24,267 INFO  L82        PathProgramCache]: Analyzing trace with hash 166934554, now seen corresponding path program 4 times
[2020-05-31 02:36:24,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:24,282 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:24,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:24,321 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:24,321 INFO  L82        PathProgramCache]: Analyzing trace with hash 116516068, now seen corresponding path program 2 times
[2020-05-31 02:36:24,322 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:24,325 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:24,329 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:24,333 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:24,333 INFO  L82        PathProgramCache]: Analyzing trace with hash -1199083459, now seen corresponding path program 1 times
[2020-05-31 02:36:24,334 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:24,350 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:24,588 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 39 proven. 46 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:24,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:24,589 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-31 02:36:24,589 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-31 02:36:24,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=99, Invalid=957, Unknown=0, NotChecked=0, Total=1056
[2020-05-31 02:36:24,590 INFO  L87              Difference]: Start difference. First operand 1413 states and 1545 transitions. cyclomatic complexity: 135 Second operand 33 states.
[2020-05-31 02:36:26,036 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:26,036 INFO  L93              Difference]: Finished difference Result 1486 states and 1649 transitions.
[2020-05-31 02:36:26,036 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-05-31 02:36:26,036 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1486 states and 1649 transitions.
[2020-05-31 02:36:26,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:36:26,041 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1486 states to 1486 states and 1649 transitions.
[2020-05-31 02:36:26,042 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:26,042 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:26,042 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1486 states and 1649 transitions.
[2020-05-31 02:36:26,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:26,043 INFO  L728         BuchiCegarLoop]: Abstraction has 1486 states and 1649 transitions.
[2020-05-31 02:36:26,043 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1486 states and 1649 transitions.
[2020-05-31 02:36:26,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1486 to 1444.
[2020-05-31 02:36:26,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1444 states.
[2020-05-31 02:36:26,054 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1444 states to 1444 states and 1592 transitions.
[2020-05-31 02:36:26,054 INFO  L751         BuchiCegarLoop]: Abstraction has 1444 states and 1592 transitions.
[2020-05-31 02:36:26,054 INFO  L631         BuchiCegarLoop]: Abstraction has 1444 states and 1592 transitions.
[2020-05-31 02:36:26,054 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:36:26,054 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1444 states and 1592 transitions.
[2020-05-31 02:36:26,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:26,056 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:26,056 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:26,057 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:26,057 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:26,061 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:26,061 INFO  L82        PathProgramCache]: Analyzing trace with hash 1886362490, now seen corresponding path program 1 times
[2020-05-31 02:36:26,061 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:26,074 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:26,206 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 22 proven. 16 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-05-31 02:36:26,207 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:26,207 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-31 02:36:26,207 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:26,207 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-05-31 02:36:26,207 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=397, Unknown=0, NotChecked=0, Total=462
[2020-05-31 02:36:26,207 INFO  L87              Difference]: Start difference. First operand 1444 states and 1592 transitions. cyclomatic complexity: 151 Second operand 22 states.
[2020-05-31 02:36:27,038 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:27,038 INFO  L93              Difference]: Finished difference Result 1485 states and 1659 transitions.
[2020-05-31 02:36:27,038 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-31 02:36:27,039 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1485 states and 1659 transitions.
[2020-05-31 02:36:27,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:27,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1485 states to 1485 states and 1659 transitions.
[2020-05-31 02:36:27,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:27,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:27,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1485 states and 1659 transitions.
[2020-05-31 02:36:27,045 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:27,045 INFO  L728         BuchiCegarLoop]: Abstraction has 1485 states and 1659 transitions.
[2020-05-31 02:36:27,046 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1485 states and 1659 transitions.
[2020-05-31 02:36:27,055 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1485 to 1464.
[2020-05-31 02:36:27,055 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1464 states.
[2020-05-31 02:36:27,056 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1464 states to 1464 states and 1635 transitions.
[2020-05-31 02:36:27,056 INFO  L751         BuchiCegarLoop]: Abstraction has 1464 states and 1635 transitions.
[2020-05-31 02:36:27,056 INFO  L631         BuchiCegarLoop]: Abstraction has 1464 states and 1635 transitions.
[2020-05-31 02:36:27,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:36:27,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1464 states and 1635 transitions.
[2020-05-31 02:36:27,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:27,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:27,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:27,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:27,060 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:27,064 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:27,064 INFO  L82        PathProgramCache]: Analyzing trace with hash -1030963604, now seen corresponding path program 1 times
[2020-05-31 02:36:27,065 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:27,080 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:27,997 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 38 proven. 47 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:27,997 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:27,997 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-05-31 02:36:27,997 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:27,997 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-05-31 02:36:27,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=149, Invalid=2301, Unknown=0, NotChecked=0, Total=2450
[2020-05-31 02:36:27,998 INFO  L87              Difference]: Start difference. First operand 1464 states and 1635 transitions. cyclomatic complexity: 178 Second operand 50 states.
[2020-05-31 02:36:32,948 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:32,948 INFO  L93              Difference]: Finished difference Result 1936 states and 2299 transitions.
[2020-05-31 02:36:32,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-05-31 02:36:32,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1936 states and 2299 transitions.
[2020-05-31 02:36:32,952 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:32,956 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1936 states to 1933 states and 2288 transitions.
[2020-05-31 02:36:32,956 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:36:32,956 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:36:32,956 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1933 states and 2288 transitions.
[2020-05-31 02:36:32,957 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:32,957 INFO  L728         BuchiCegarLoop]: Abstraction has 1933 states and 2288 transitions.
[2020-05-31 02:36:32,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1933 states and 2288 transitions.
[2020-05-31 02:36:32,974 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1933 to 1803.
[2020-05-31 02:36:32,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1803 states.
[2020-05-31 02:36:32,976 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1803 states to 1803 states and 2107 transitions.
[2020-05-31 02:36:32,977 INFO  L751         BuchiCegarLoop]: Abstraction has 1803 states and 2107 transitions.
[2020-05-31 02:36:32,977 INFO  L631         BuchiCegarLoop]: Abstraction has 1803 states and 2107 transitions.
[2020-05-31 02:36:32,977 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 02:36:32,977 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1803 states and 2107 transitions.
[2020-05-31 02:36:32,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:32,978 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:32,978 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:32,980 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:32,980 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND TRUE   DType[to] == SimpleAuction
[L923]                   assume amount == 0;
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:32,984 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:32,984 INFO  L82        PathProgramCache]: Analyzing trace with hash -1613418540, now seen corresponding path program 1 times
[2020-05-31 02:36:32,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:32,995 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:33,035 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-31 02:36:33,035 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:33,035 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:36:33,036 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:33,036 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:36:33,036 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:36:33,036 INFO  L87              Difference]: Start difference. First operand 1803 states and 2107 transitions. cyclomatic complexity: 319 Second operand 5 states.
[2020-05-31 02:36:33,047 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:33,047 INFO  L93              Difference]: Finished difference Result 1803 states and 2104 transitions.
[2020-05-31 02:36:33,047 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:36:33,047 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1803 states and 2104 transitions.
[2020-05-31 02:36:33,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:33,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1803 states to 1803 states and 2104 transitions.
[2020-05-31 02:36:33,053 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:33,053 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:33,053 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1803 states and 2104 transitions.
[2020-05-31 02:36:33,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:33,054 INFO  L728         BuchiCegarLoop]: Abstraction has 1803 states and 2104 transitions.
[2020-05-31 02:36:33,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1803 states and 2104 transitions.
[2020-05-31 02:36:33,066 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1803 to 1800.
[2020-05-31 02:36:33,066 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1800 states.
[2020-05-31 02:36:33,067 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1800 states to 1800 states and 2101 transitions.
[2020-05-31 02:36:33,068 INFO  L751         BuchiCegarLoop]: Abstraction has 1800 states and 2101 transitions.
[2020-05-31 02:36:33,068 INFO  L631         BuchiCegarLoop]: Abstraction has 1800 states and 2101 transitions.
[2020-05-31 02:36:33,068 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 02:36:33,068 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1800 states and 2101 transitions.
[2020-05-31 02:36:33,069 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:33,069 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:33,069 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:33,071 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:33,071 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:33,075 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:33,075 INFO  L82        PathProgramCache]: Analyzing trace with hash 531072331, now seen corresponding path program 2 times
[2020-05-31 02:36:33,075 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:33,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:33,149 INFO  L134       CoverageAnalysis]: Checked inductivity of 212 backedges. 41 proven. 100 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-05-31 02:36:33,149 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:33,149 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-31 02:36:33,149 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:33,150 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:36:33,150 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:36:33,150 INFO  L87              Difference]: Start difference. First operand 1800 states and 2101 transitions. cyclomatic complexity: 316 Second operand 12 states.
[2020-05-31 02:36:33,520 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:33,520 INFO  L93              Difference]: Finished difference Result 1793 states and 2075 transitions.
[2020-05-31 02:36:33,520 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:36:33,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1793 states and 2075 transitions.
[2020-05-31 02:36:33,523 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:33,526 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1793 states to 1760 states and 2041 transitions.
[2020-05-31 02:36:33,526 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:33,526 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:33,526 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1760 states and 2041 transitions.
[2020-05-31 02:36:33,527 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:33,527 INFO  L728         BuchiCegarLoop]: Abstraction has 1760 states and 2041 transitions.
[2020-05-31 02:36:33,528 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1760 states and 2041 transitions.
[2020-05-31 02:36:33,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1760 to 1758.
[2020-05-31 02:36:33,538 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1758 states.
[2020-05-31 02:36:33,539 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1758 states to 1758 states and 2037 transitions.
[2020-05-31 02:36:33,539 INFO  L751         BuchiCegarLoop]: Abstraction has 1758 states and 2037 transitions.
[2020-05-31 02:36:33,539 INFO  L631         BuchiCegarLoop]: Abstraction has 1758 states and 2037 transitions.
[2020-05-31 02:36:33,539 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 02:36:33,539 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1758 states and 2037 transitions.
[2020-05-31 02:36:33,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:33,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:33,540 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:33,542 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:33,542 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND FALSE  !(choice == 3)
[L1128]      COND FALSE  !(choice == 2)
[L1137]      COND TRUE   choice == 1
[L1139]                  gas := gas - 21000;
[L1140]      COND TRUE   gas >= 0
[L1142]                  assume msgvalue_MSG == 0;
[L1143]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND FALSE  !(gas > 2300)
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L1143]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:33,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:33,547 INFO  L82        PathProgramCache]: Analyzing trace with hash -805384122, now seen corresponding path program 1 times
[2020-05-31 02:36:33,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:33,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:33,631 INFO  L134       CoverageAnalysis]: Checked inductivity of 128 backedges. 12 proven. 7 refuted. 0 times theorem prover too weak. 109 trivial. 0 not checked.
[2020-05-31 02:36:33,631 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:33,631 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-31 02:36:33,632 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:33,632 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:36:33,632 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:36:33,632 INFO  L87              Difference]: Start difference. First operand 1758 states and 2037 transitions. cyclomatic complexity: 294 Second operand 10 states.
[2020-05-31 02:36:33,757 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:33,757 INFO  L93              Difference]: Finished difference Result 2015 states and 2484 transitions.
[2020-05-31 02:36:33,757 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:36:33,757 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2015 states and 2484 transitions.
[2020-05-31 02:36:33,761 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:36:33,766 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2015 states to 1967 states and 2425 transitions.
[2020-05-31 02:36:33,766 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:33,766 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:33,766 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1967 states and 2425 transitions.
[2020-05-31 02:36:33,768 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:33,768 INFO  L728         BuchiCegarLoop]: Abstraction has 1967 states and 2425 transitions.
[2020-05-31 02:36:33,769 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1967 states and 2425 transitions.
[2020-05-31 02:36:33,785 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1967 to 1758.
[2020-05-31 02:36:33,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1758 states.
[2020-05-31 02:36:33,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1758 states to 1758 states and 2033 transitions.
[2020-05-31 02:36:33,786 INFO  L751         BuchiCegarLoop]: Abstraction has 1758 states and 2033 transitions.
[2020-05-31 02:36:33,786 INFO  L631         BuchiCegarLoop]: Abstraction has 1758 states and 2033 transitions.
[2020-05-31 02:36:33,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 02:36:33,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1758 states and 2033 transitions.
[2020-05-31 02:36:33,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:33,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:33,788 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:33,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:33,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:33,792 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:33,792 INFO  L82        PathProgramCache]: Analyzing trace with hash -398804183, now seen corresponding path program 1 times
[2020-05-31 02:36:33,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:33,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:33,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:33,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:33,853 INFO  L82        PathProgramCache]: Analyzing trace with hash 1596805686, now seen corresponding path program 1 times
[2020-05-31 02:36:33,854 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:33,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:33,999 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 40 proven. 70 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:33,999 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:33,999 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-31 02:36:33,999 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:36:33,999 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-31 02:36:34,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=724, Unknown=0, NotChecked=0, Total=812
[2020-05-31 02:36:34,000 INFO  L87              Difference]: Start difference. First operand 1758 states and 2033 transitions. cyclomatic complexity: 290 Second operand 29 states.
[2020-05-31 02:36:35,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:35,270 INFO  L93              Difference]: Finished difference Result 1980 states and 2301 transitions.
[2020-05-31 02:36:35,270 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-05-31 02:36:35,270 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1980 states and 2301 transitions.
[2020-05-31 02:36:35,273 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:35,277 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1980 states to 1971 states and 2291 transitions.
[2020-05-31 02:36:35,277 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:35,277 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:35,277 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1971 states and 2291 transitions.
[2020-05-31 02:36:35,278 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:35,278 INFO  L728         BuchiCegarLoop]: Abstraction has 1971 states and 2291 transitions.
[2020-05-31 02:36:35,279 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1971 states and 2291 transitions.
[2020-05-31 02:36:35,290 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1971 to 1933.
[2020-05-31 02:36:35,290 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1933 states.
[2020-05-31 02:36:35,292 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1933 states to 1933 states and 2237 transitions.
[2020-05-31 02:36:35,292 INFO  L751         BuchiCegarLoop]: Abstraction has 1933 states and 2237 transitions.
[2020-05-31 02:36:35,292 INFO  L631         BuchiCegarLoop]: Abstraction has 1933 states and 2237 transitions.
[2020-05-31 02:36:35,292 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 02:36:35,292 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1933 states and 2237 transitions.
[2020-05-31 02:36:35,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:35,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:35,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:35,294 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:35,294 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:35,296 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:35,297 INFO  L82        PathProgramCache]: Analyzing trace with hash -398804183, now seen corresponding path program 2 times
[2020-05-31 02:36:35,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:35,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:35,325 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:35,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:35,349 INFO  L82        PathProgramCache]: Analyzing trace with hash 116516068, now seen corresponding path program 3 times
[2020-05-31 02:36:35,350 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:35,352 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:35,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:35,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:35,357 INFO  L82        PathProgramCache]: Analyzing trace with hash 1327477260, now seen corresponding path program 1 times
[2020-05-31 02:36:35,358 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:35,371 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:35,742 INFO  L134       CoverageAnalysis]: Checked inductivity of 165 backedges. 43 proven. 52 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-05-31 02:36:35,742 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:35,743 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-05-31 02:36:35,743 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-05-31 02:36:35,743 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=156, Invalid=1404, Unknown=0, NotChecked=0, Total=1560
[2020-05-31 02:36:35,743 INFO  L87              Difference]: Start difference. First operand 1933 states and 2237 transitions. cyclomatic complexity: 319 Second operand 40 states.
[2020-05-31 02:36:38,175 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:38,175 INFO  L93              Difference]: Finished difference Result 2198 states and 2599 transitions.
[2020-05-31 02:36:38,175 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-05-31 02:36:38,175 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2198 states and 2599 transitions.
[2020-05-31 02:36:38,179 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:38,184 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2198 states to 2183 states and 2581 transitions.
[2020-05-31 02:36:38,184 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:38,184 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:38,184 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2183 states and 2581 transitions.
[2020-05-31 02:36:38,186 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:38,186 INFO  L728         BuchiCegarLoop]: Abstraction has 2183 states and 2581 transitions.
[2020-05-31 02:36:38,187 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2183 states and 2581 transitions.
[2020-05-31 02:36:38,200 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2183 to 2124.
[2020-05-31 02:36:38,200 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2124 states.
[2020-05-31 02:36:38,202 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2124 states to 2124 states and 2495 transitions.
[2020-05-31 02:36:38,202 INFO  L751         BuchiCegarLoop]: Abstraction has 2124 states and 2495 transitions.
[2020-05-31 02:36:38,202 INFO  L631         BuchiCegarLoop]: Abstraction has 2124 states and 2495 transitions.
[2020-05-31 02:36:38,202 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 02:36:38,202 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2124 states and 2495 transitions.
[2020-05-31 02:36:38,204 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:38,204 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:38,204 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:38,205 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:38,205 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:38,208 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:38,208 INFO  L82        PathProgramCache]: Analyzing trace with hash 768245800, now seen corresponding path program 1 times
[2020-05-31 02:36:38,208 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:38,219 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:38,339 INFO  L134       CoverageAnalysis]: Checked inductivity of 102 backedges. 3 proven. 74 refuted. 0 times theorem prover too weak. 25 trivial. 0 not checked.
[2020-05-31 02:36:38,339 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:38,339 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-31 02:36:38,339 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:38,339 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 02:36:38,339 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-05-31 02:36:38,340 INFO  L87              Difference]: Start difference. First operand 2124 states and 2495 transitions. cyclomatic complexity: 393 Second operand 13 states.
[2020-05-31 02:36:38,631 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:38,631 INFO  L93              Difference]: Finished difference Result 2090 states and 2447 transitions.
[2020-05-31 02:36:38,631 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:36:38,631 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2090 states and 2447 transitions.
[2020-05-31 02:36:38,634 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:38,638 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2090 states to 2074 states and 2425 transitions.
[2020-05-31 02:36:38,638 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:36:38,638 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:36:38,639 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2074 states and 2425 transitions.
[2020-05-31 02:36:38,640 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:38,640 INFO  L728         BuchiCegarLoop]: Abstraction has 2074 states and 2425 transitions.
[2020-05-31 02:36:38,640 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2074 states and 2425 transitions.
[2020-05-31 02:36:38,650 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2074 to 2064.
[2020-05-31 02:36:38,650 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2064 states.
[2020-05-31 02:36:38,652 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2064 states to 2064 states and 2412 transitions.
[2020-05-31 02:36:38,652 INFO  L751         BuchiCegarLoop]: Abstraction has 2064 states and 2412 transitions.
[2020-05-31 02:36:38,652 INFO  L631         BuchiCegarLoop]: Abstraction has 2064 states and 2412 transitions.
[2020-05-31 02:36:38,652 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 02:36:38,652 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2064 states and 2412 transitions.
[2020-05-31 02:36:38,654 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:38,654 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:38,654 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:38,654 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:38,654 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:38,656 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:38,657 INFO  L82        PathProgramCache]: Analyzing trace with hash 1879561182, now seen corresponding path program 3 times
[2020-05-31 02:36:38,657 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:38,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:39,932 INFO  L134       CoverageAnalysis]: Checked inductivity of 187 backedges. 38 proven. 143 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:39,932 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:39,932 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [59] total 59
[2020-05-31 02:36:39,933 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:39,933 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 60 interpolants.
[2020-05-31 02:36:39,933 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=203, Invalid=3337, Unknown=0, NotChecked=0, Total=3540
[2020-05-31 02:36:39,933 INFO  L87              Difference]: Start difference. First operand 2064 states and 2412 transitions. cyclomatic complexity: 369 Second operand 60 states.
[2020-05-31 02:36:46,927 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:46,927 INFO  L93              Difference]: Finished difference Result 2184 states and 2622 transitions.
[2020-05-31 02:36:46,927 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-05-31 02:36:46,927 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2184 states and 2622 transitions.
[2020-05-31 02:36:46,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:46,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2184 states to 2184 states and 2622 transitions.
[2020-05-31 02:36:46,935 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:36:46,935 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:36:46,935 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2184 states and 2622 transitions.
[2020-05-31 02:36:46,936 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:46,936 INFO  L728         BuchiCegarLoop]: Abstraction has 2184 states and 2622 transitions.
[2020-05-31 02:36:46,937 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2184 states and 2622 transitions.
[2020-05-31 02:36:46,948 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2184 to 2072.
[2020-05-31 02:36:46,948 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2072 states.
[2020-05-31 02:36:46,950 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2072 states to 2072 states and 2444 transitions.
[2020-05-31 02:36:46,950 INFO  L751         BuchiCegarLoop]: Abstraction has 2072 states and 2444 transitions.
[2020-05-31 02:36:46,950 INFO  L631         BuchiCegarLoop]: Abstraction has 2072 states and 2444 transitions.
[2020-05-31 02:36:46,950 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 02:36:46,950 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2072 states and 2444 transitions.
[2020-05-31 02:36:46,952 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:46,952 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:46,952 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:46,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:46,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:46,955 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:46,955 INFO  L82        PathProgramCache]: Analyzing trace with hash 68920823, now seen corresponding path program 3 times
[2020-05-31 02:36:46,956 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:46,975 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:46,995 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:47,022 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:47,023 INFO  L82        PathProgramCache]: Analyzing trace with hash 826596739, now seen corresponding path program 1 times
[2020-05-31 02:36:47,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:47,027 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:47,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:47,035 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:47,035 INFO  L82        PathProgramCache]: Analyzing trace with hash 1343197901, now seen corresponding path program 1 times
[2020-05-31 02:36:47,036 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:47,055 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:47,600 INFO  L134       CoverageAnalysis]: Checked inductivity of 305 backedges. 99 proven. 161 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-05-31 02:36:47,600 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:47,600 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [54] total 54
[2020-05-31 02:36:47,601 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 55 interpolants.
[2020-05-31 02:36:47,602 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=185, Invalid=2785, Unknown=0, NotChecked=0, Total=2970
[2020-05-31 02:36:47,602 INFO  L87              Difference]: Start difference. First operand 2072 states and 2444 transitions. cyclomatic complexity: 397 Second operand 55 states.
[2020-05-31 02:36:50,670 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:50,670 INFO  L93              Difference]: Finished difference Result 2187 states and 2623 transitions.
[2020-05-31 02:36:50,670 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-05-31 02:36:50,670 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2187 states and 2623 transitions.
[2020-05-31 02:36:50,674 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 10
[2020-05-31 02:36:50,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2187 states to 2187 states and 2611 transitions.
[2020-05-31 02:36:50,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:36:50,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:36:50,679 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2187 states and 2611 transitions.
[2020-05-31 02:36:50,680 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:50,680 INFO  L728         BuchiCegarLoop]: Abstraction has 2187 states and 2611 transitions.
[2020-05-31 02:36:50,681 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2187 states and 2611 transitions.
[2020-05-31 02:36:50,693 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2187 to 2146.
[2020-05-31 02:36:50,693 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2146 states.
[2020-05-31 02:36:50,696 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2146 states to 2146 states and 2510 transitions.
[2020-05-31 02:36:50,696 INFO  L751         BuchiCegarLoop]: Abstraction has 2146 states and 2510 transitions.
[2020-05-31 02:36:50,696 INFO  L631         BuchiCegarLoop]: Abstraction has 2146 states and 2510 transitions.
[2020-05-31 02:36:50,696 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 02:36:50,696 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2146 states and 2510 transitions.
[2020-05-31 02:36:50,698 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:36:50,698 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:50,698 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:50,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:50,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:50,701 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:50,701 INFO  L82        PathProgramCache]: Analyzing trace with hash 2090497735, now seen corresponding path program 2 times
[2020-05-31 02:36:50,701 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:50,715 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:51,316 INFO  L134       CoverageAnalysis]: Checked inductivity of 192 backedges. 86 proven. 91 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-05-31 02:36:51,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:51,317 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-05-31 02:36:51,317 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:51,317 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-05-31 02:36:51,318 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=249, Invalid=2403, Unknown=0, NotChecked=0, Total=2652
[2020-05-31 02:36:51,318 INFO  L87              Difference]: Start difference. First operand 2146 states and 2510 transitions. cyclomatic complexity: 385 Second operand 52 states.
[2020-05-31 02:36:55,519 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:55,519 INFO  L93              Difference]: Finished difference Result 2220 states and 2659 transitions.
[2020-05-31 02:36:55,519 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-05-31 02:36:55,519 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2220 states and 2659 transitions.
[2020-05-31 02:36:55,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:36:55,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2220 states to 2220 states and 2659 transitions.
[2020-05-31 02:36:55,529 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:36:55,529 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:36:55,529 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2220 states and 2659 transitions.
[2020-05-31 02:36:55,531 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:55,531 INFO  L728         BuchiCegarLoop]: Abstraction has 2220 states and 2659 transitions.
[2020-05-31 02:36:55,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2220 states and 2659 transitions.
[2020-05-31 02:36:55,545 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2220 to 2180.
[2020-05-31 02:36:55,545 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2180 states.
[2020-05-31 02:36:55,547 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2180 states to 2180 states and 2572 transitions.
[2020-05-31 02:36:55,547 INFO  L751         BuchiCegarLoop]: Abstraction has 2180 states and 2572 transitions.
[2020-05-31 02:36:55,547 INFO  L631         BuchiCegarLoop]: Abstraction has 2180 states and 2572 transitions.
[2020-05-31 02:36:55,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 02:36:55,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2180 states and 2572 transitions.
[2020-05-31 02:36:55,549 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:36:55,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:55,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:55,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:55,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND FALSE  !(choice == 3)
[L1128]      COND FALSE  !(choice == 2)
[L1137]      COND TRUE   choice == 1
[L1139]                  gas := gas - 21000;
[L1140]      COND TRUE   gas >= 0
[L1142]                  assume msgvalue_MSG == 0;
[L1143]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND TRUE   gas > 2300
[L884]                   gas := 2300;
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L1143]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:55,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:55,553 INFO  L82        PathProgramCache]: Analyzing trace with hash 1736311828, now seen corresponding path program 1 times
[2020-05-31 02:36:55,554 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:55,570 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:55,702 INFO  L134       CoverageAnalysis]: Checked inductivity of 249 backedges. 72 proven. 51 refuted. 0 times theorem prover too weak. 126 trivial. 0 not checked.
[2020-05-31 02:36:55,702 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:55,702 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-05-31 02:36:55,702 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:55,703 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 02:36:55,703 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-05-31 02:36:55,703 INFO  L87              Difference]: Start difference. First operand 2180 states and 2572 transitions. cyclomatic complexity: 416 Second operand 18 states.
[2020-05-31 02:36:56,432 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:56,432 INFO  L93              Difference]: Finished difference Result 2451 states and 3032 transitions.
[2020-05-31 02:36:56,432 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:36:56,433 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2451 states and 3032 transitions.
[2020-05-31 02:36:56,437 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-31 02:36:56,441 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2451 states to 2156 states and 2561 transitions.
[2020-05-31 02:36:56,441 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:36:56,441 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:36:56,441 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2156 states and 2561 transitions.
[2020-05-31 02:36:56,442 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:56,442 INFO  L728         BuchiCegarLoop]: Abstraction has 2156 states and 2561 transitions.
[2020-05-31 02:36:56,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2156 states and 2561 transitions.
[2020-05-31 02:36:56,453 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2156 to 2070.
[2020-05-31 02:36:56,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2070 states.
[2020-05-31 02:36:56,456 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2070 states to 2070 states and 2464 transitions.
[2020-05-31 02:36:56,456 INFO  L751         BuchiCegarLoop]: Abstraction has 2070 states and 2464 transitions.
[2020-05-31 02:36:56,456 INFO  L631         BuchiCegarLoop]: Abstraction has 2070 states and 2464 transitions.
[2020-05-31 02:36:56,456 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 02:36:56,456 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2070 states and 2464 transitions.
[2020-05-31 02:36:56,458 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-31 02:36:56,458 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:56,458 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:56,458 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:56,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:56,460 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:56,461 INFO  L82        PathProgramCache]: Analyzing trace with hash -868796114, now seen corresponding path program 1 times
[2020-05-31 02:36:56,461 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:56,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:56,491 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:56,511 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:56,512 INFO  L82        PathProgramCache]: Analyzing trace with hash 116516068, now seen corresponding path program 4 times
[2020-05-31 02:36:56,512 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:56,514 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:56,517 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:36:56,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:56,519 INFO  L82        PathProgramCache]: Analyzing trace with hash 783768145, now seen corresponding path program 1 times
[2020-05-31 02:36:56,519 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:56,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:56,694 INFO  L134       CoverageAnalysis]: Checked inductivity of 246 backedges. 99 proven. 87 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-05-31 02:36:56,694 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:56,694 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-31 02:36:56,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-31 02:36:56,695 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=976, Unknown=0, NotChecked=0, Total=1056
[2020-05-31 02:36:56,695 INFO  L87              Difference]: Start difference. First operand 2070 states and 2464 transitions. cyclomatic complexity: 422 Second operand 33 states.
[2020-05-31 02:36:57,898 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:57,899 INFO  L93              Difference]: Finished difference Result 2107 states and 2556 transitions.
[2020-05-31 02:36:57,899 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-05-31 02:36:57,899 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2107 states and 2556 transitions.
[2020-05-31 02:36:57,903 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-31 02:36:57,907 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2107 states to 2107 states and 2556 transitions.
[2020-05-31 02:36:57,907 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:36:57,908 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:36:57,908 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2107 states and 2556 transitions.
[2020-05-31 02:36:57,909 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:57,909 INFO  L728         BuchiCegarLoop]: Abstraction has 2107 states and 2556 transitions.
[2020-05-31 02:36:57,910 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2107 states and 2556 transitions.
[2020-05-31 02:36:57,920 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2107 to 2070.
[2020-05-31 02:36:57,920 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2070 states.
[2020-05-31 02:36:57,922 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2070 states to 2070 states and 2464 transitions.
[2020-05-31 02:36:57,922 INFO  L751         BuchiCegarLoop]: Abstraction has 2070 states and 2464 transitions.
[2020-05-31 02:36:57,922 INFO  L631         BuchiCegarLoop]: Abstraction has 2070 states and 2464 transitions.
[2020-05-31 02:36:57,922 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-31 02:36:57,922 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2070 states and 2464 transitions.
[2020-05-31 02:36:57,924 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-31 02:36:57,924 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:57,924 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:57,925 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:57,925 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND TRUE   __exception
[L1044]                  __tmp__Balance := Balance;
[L1045]                  __tmp__DType := DType;
[L1046]                  __tmp__Alloc := Alloc;
[L1047]                  __tmp__balance_ADDR := balance_ADDR;
[L1048]                  __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L1049]                  __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L1050]                  __tmp__Length := Length;
[L1051]                  __tmp__now := now;
[L1052]                  __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L1053]                  __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L1054]                  __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L1055]                  __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L1056]                  __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L1057]                  __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L1058]                  __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L1059]                  __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L1060]      COND FALSE  !(__tmp__Balance[from] >= amount)
[L1065]                  success := false;
[L1066]                  assume revert || gas < 0;
[L1067]                  revert := false;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:57,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:57,928 INFO  L82        PathProgramCache]: Analyzing trace with hash -1633005938, now seen corresponding path program 1 times
[2020-05-31 02:36:57,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:57,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:57,999 INFO  L134       CoverageAnalysis]: Checked inductivity of 187 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 181 trivial. 0 not checked.
[2020-05-31 02:36:58,000 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:58,000 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-31 02:36:58,000 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:58,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 02:36:58,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=27, Unknown=0, NotChecked=0, Total=42
[2020-05-31 02:36:58,000 INFO  L87              Difference]: Start difference. First operand 2070 states and 2464 transitions. cyclomatic complexity: 418 Second operand 7 states.
[2020-05-31 02:36:58,116 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:58,116 INFO  L93              Difference]: Finished difference Result 2918 states and 4443 transitions.
[2020-05-31 02:36:58,116 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 02:36:58,117 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2918 states and 4443 transitions.
[2020-05-31 02:36:58,124 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 64
[2020-05-31 02:36:58,134 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2918 states to 2830 states and 4347 transitions.
[2020-05-31 02:36:58,134 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:36:58,134 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:36:58,134 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2830 states and 4347 transitions.
[2020-05-31 02:36:58,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:58,137 INFO  L728         BuchiCegarLoop]: Abstraction has 2830 states and 4347 transitions.
[2020-05-31 02:36:58,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2830 states and 4347 transitions.
[2020-05-31 02:36:58,160 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2830 to 1863.
[2020-05-31 02:36:58,160 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1863 states.
[2020-05-31 02:36:58,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1863 states to 1863 states and 2206 transitions.
[2020-05-31 02:36:58,162 INFO  L751         BuchiCegarLoop]: Abstraction has 1863 states and 2206 transitions.
[2020-05-31 02:36:58,162 INFO  L631         BuchiCegarLoop]: Abstraction has 1863 states and 2206 transitions.
[2020-05-31 02:36:58,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-31 02:36:58,162 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1863 states and 2206 transitions.
[2020-05-31 02:36:58,163 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 16
[2020-05-31 02:36:58,164 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:58,164 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:58,164 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:58,165 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:58,168 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:58,168 INFO  L82        PathProgramCache]: Analyzing trace with hash -851917084, now seen corresponding path program 1 times
[2020-05-31 02:36:58,168 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:58,185 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:58,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 207 backedges. 66 proven. 76 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-05-31 02:36:58,459 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:58,459 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-31 02:36:58,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:58,460 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-31 02:36:58,460 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1003, Unknown=0, NotChecked=0, Total=1122
[2020-05-31 02:36:58,460 INFO  L87              Difference]: Start difference. First operand 1863 states and 2206 transitions. cyclomatic complexity: 367 Second operand 34 states.
[2020-05-31 02:36:59,843 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:59,843 INFO  L93              Difference]: Finished difference Result 1901 states and 2337 transitions.
[2020-05-31 02:36:59,843 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-05-31 02:36:59,843 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1901 states and 2337 transitions.
[2020-05-31 02:36:59,847 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 26
[2020-05-31 02:36:59,852 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1901 states to 1876 states and 2267 transitions.
[2020-05-31 02:36:59,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:36:59,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:36:59,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1876 states and 2267 transitions.
[2020-05-31 02:36:59,853 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:59,853 INFO  L728         BuchiCegarLoop]: Abstraction has 1876 states and 2267 transitions.
[2020-05-31 02:36:59,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1876 states and 2267 transitions.
[2020-05-31 02:36:59,862 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1876 to 1868.
[2020-05-31 02:36:59,862 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1868 states.
[2020-05-31 02:36:59,864 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1868 states to 1868 states and 2245 transitions.
[2020-05-31 02:36:59,864 INFO  L751         BuchiCegarLoop]: Abstraction has 1868 states and 2245 transitions.
[2020-05-31 02:36:59,864 INFO  L631         BuchiCegarLoop]: Abstraction has 1868 states and 2245 transitions.
[2020-05-31 02:36:59,864 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-31 02:36:59,864 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1868 states and 2245 transitions.
[2020-05-31 02:36:59,866 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-05-31 02:36:59,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:59,866 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:59,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:59,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:59,871 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:59,871 INFO  L82        PathProgramCache]: Analyzing trace with hash 1013775312, now seen corresponding path program 4 times
[2020-05-31 02:36:59,872 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:59,896 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:00,904 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-05-31 02:37:01,224 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 55
[2020-05-31 02:37:04,719 WARN  L188               SmtUtils]: Spent 2.44 s on a formula simplification. DAG size of input: 921 DAG size of output: 117
[2020-05-31 02:37:05,474 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 70
[2020-05-31 02:37:06,005 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 67
[2020-05-31 02:37:06,480 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 65
[2020-05-31 02:37:07,113 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 70
[2020-05-31 02:37:07,506 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 72
[2020-05-31 02:37:08,435 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 66
[2020-05-31 02:37:09,356 INFO  L134       CoverageAnalysis]: Checked inductivity of 353 backedges. 48 proven. 202 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-05-31 02:37:09,356 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:09,356 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [64] total 64
[2020-05-31 02:37:09,356 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:09,356 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 65 interpolants.
[2020-05-31 02:37:09,357 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=204, Invalid=3956, Unknown=0, NotChecked=0, Total=4160
[2020-05-31 02:37:09,357 INFO  L87              Difference]: Start difference. First operand 1868 states and 2245 transitions. cyclomatic complexity: 402 Second operand 65 states.
[2020-05-31 02:37:18,090 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:18,090 INFO  L93              Difference]: Finished difference Result 1970 states and 2411 transitions.
[2020-05-31 02:37:18,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-05-31 02:37:18,091 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1970 states and 2411 transitions.
[2020-05-31 02:37:18,095 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-05-31 02:37:18,100 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1970 states to 1970 states and 2409 transitions.
[2020-05-31 02:37:18,100 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:37:18,100 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:37:18,100 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1970 states and 2409 transitions.
[2020-05-31 02:37:18,101 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:18,101 INFO  L728         BuchiCegarLoop]: Abstraction has 1970 states and 2409 transitions.
[2020-05-31 02:37:18,102 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1970 states and 2409 transitions.
[2020-05-31 02:37:18,111 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1970 to 1959.
[2020-05-31 02:37:18,111 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1959 states.
[2020-05-31 02:37:18,114 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1959 states to 1959 states and 2369 transitions.
[2020-05-31 02:37:18,114 INFO  L751         BuchiCegarLoop]: Abstraction has 1959 states and 2369 transitions.
[2020-05-31 02:37:18,114 INFO  L631         BuchiCegarLoop]: Abstraction has 1959 states and 2369 transitions.
[2020-05-31 02:37:18,114 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-31 02:37:18,114 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1959 states and 2369 transitions.
[2020-05-31 02:37:18,116 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-05-31 02:37:18,116 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:18,116 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:18,117 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:18,117 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:18,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:18,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 922285231, now seen corresponding path program 1 times
[2020-05-31 02:37:18,121 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:18,148 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:19,127 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 96 DAG size of output: 72
[2020-05-31 02:37:20,965 INFO  L134       CoverageAnalysis]: Checked inductivity of 305 backedges. 45 proven. 222 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-05-31 02:37:20,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:20,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [74] total 74
[2020-05-31 02:37:20,966 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:20,966 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 75 interpolants.
[2020-05-31 02:37:20,967 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=262, Invalid=5288, Unknown=0, NotChecked=0, Total=5550
[2020-05-31 02:37:20,967 INFO  L87              Difference]: Start difference. First operand 1959 states and 2369 transitions. cyclomatic complexity: 438 Second operand 75 states.
[2020-05-31 02:37:31,488 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:31,488 INFO  L93              Difference]: Finished difference Result 2037 states and 2601 transitions.
[2020-05-31 02:37:31,489 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-05-31 02:37:31,489 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2037 states and 2601 transitions.
[2020-05-31 02:37:31,492 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 32
[2020-05-31 02:37:31,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2037 states to 2037 states and 2601 transitions.
[2020-05-31 02:37:31,496 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:37:31,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:37:31,497 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2037 states and 2601 transitions.
[2020-05-31 02:37:31,498 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:31,498 INFO  L728         BuchiCegarLoop]: Abstraction has 2037 states and 2601 transitions.
[2020-05-31 02:37:31,498 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2037 states and 2601 transitions.
[2020-05-31 02:37:31,506 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2037 to 2013.
[2020-05-31 02:37:31,506 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2013 states.
[2020-05-31 02:37:31,508 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2013 states to 2013 states and 2544 transitions.
[2020-05-31 02:37:31,508 INFO  L751         BuchiCegarLoop]: Abstraction has 2013 states and 2544 transitions.
[2020-05-31 02:37:31,509 INFO  L631         BuchiCegarLoop]: Abstraction has 2013 states and 2544 transitions.
[2020-05-31 02:37:31,509 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-31 02:37:31,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2013 states and 2544 transitions.
[2020-05-31 02:37:31,510 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 32
[2020-05-31 02:37:31,510 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:31,510 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:31,511 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:31,511 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND FALSE  !(Balance[from] >= amount)
[L1078]                  success := false;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:31,514 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:31,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 855121549, now seen corresponding path program 1 times
[2020-05-31 02:37:31,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:31,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:31,594 INFO  L134       CoverageAnalysis]: Checked inductivity of 313 backedges. 12 proven. 31 refuted. 0 times theorem prover too weak. 270 trivial. 0 not checked.
[2020-05-31 02:37:31,594 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:31,595 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 02:37:31,595 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:31,595 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:31,595 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:31,595 INFO  L87              Difference]: Start difference. First operand 2013 states and 2544 transitions. cyclomatic complexity: 568 Second operand 4 states.
[2020-05-31 02:37:31,601 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:31,601 INFO  L93              Difference]: Finished difference Result 1948 states and 2397 transitions.
[2020-05-31 02:37:31,601 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:31,602 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1948 states and 2397 transitions.
[2020-05-31 02:37:31,605 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 32
[2020-05-31 02:37:31,609 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1948 states to 1948 states and 2397 transitions.
[2020-05-31 02:37:31,609 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:37:31,609 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:37:31,609 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1948 states and 2397 transitions.
[2020-05-31 02:37:31,610 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:31,610 INFO  L728         BuchiCegarLoop]: Abstraction has 1948 states and 2397 transitions.
[2020-05-31 02:37:31,610 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1948 states and 2397 transitions.
[2020-05-31 02:37:31,617 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1948 to 1948.
[2020-05-31 02:37:31,617 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1948 states.
[2020-05-31 02:37:31,620 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1948 states to 1948 states and 2397 transitions.
[2020-05-31 02:37:31,620 INFO  L751         BuchiCegarLoop]: Abstraction has 1948 states and 2397 transitions.
[2020-05-31 02:37:31,620 INFO  L631         BuchiCegarLoop]: Abstraction has 1948 states and 2397 transitions.
[2020-05-31 02:37:31,620 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-31 02:37:31,620 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1948 states and 2397 transitions.
[2020-05-31 02:37:31,621 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 32
[2020-05-31 02:37:31,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:31,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:31,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:31,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:31,624 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:31,624 INFO  L82        PathProgramCache]: Analyzing trace with hash 68920823, now seen corresponding path program 4 times
[2020-05-31 02:37:31,624 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:31,643 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:31,663 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:31,687 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:31,687 INFO  L82        PathProgramCache]: Analyzing trace with hash 116516068, now seen corresponding path program 5 times
[2020-05-31 02:37:31,688 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:31,690 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:31,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:31,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:31,695 INFO  L82        PathProgramCache]: Analyzing trace with hash 449427034, now seen corresponding path program 2 times
[2020-05-31 02:37:31,695 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:31,711 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:32,130 INFO  L134       CoverageAnalysis]: Checked inductivity of 281 backedges. 39 proven. 163 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-05-31 02:37:32,130 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:32,130 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-05-31 02:37:32,130 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-05-31 02:37:32,131 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=129, Invalid=1763, Unknown=0, NotChecked=0, Total=1892
[2020-05-31 02:37:32,131 INFO  L87              Difference]: Start difference. First operand 1948 states and 2397 transitions. cyclomatic complexity: 482 Second operand 44 states.
[2020-05-31 02:37:34,236 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:34,237 INFO  L93              Difference]: Finished difference Result 1978 states and 2479 transitions.
[2020-05-31 02:37:34,237 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-05-31 02:37:34,237 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1978 states and 2479 transitions.
[2020-05-31 02:37:34,241 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 28
[2020-05-31 02:37:34,246 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1978 states to 1974 states and 2459 transitions.
[2020-05-31 02:37:34,246 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:37:34,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:37:34,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1974 states and 2459 transitions.
[2020-05-31 02:37:34,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:34,247 INFO  L728         BuchiCegarLoop]: Abstraction has 1974 states and 2459 transitions.
[2020-05-31 02:37:34,248 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1974 states and 2459 transitions.
[2020-05-31 02:37:34,258 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1974 to 1950.
[2020-05-31 02:37:34,258 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1950 states.
[2020-05-31 02:37:34,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1950 states to 1950 states and 2394 transitions.
[2020-05-31 02:37:34,260 INFO  L751         BuchiCegarLoop]: Abstraction has 1950 states and 2394 transitions.
[2020-05-31 02:37:34,260 INFO  L631         BuchiCegarLoop]: Abstraction has 1950 states and 2394 transitions.
[2020-05-31 02:37:34,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-31 02:37:34,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1950 states and 2394 transitions.
[2020-05-31 02:37:34,262 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 22
[2020-05-31 02:37:34,262 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:34,262 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:34,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:34,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1156]                  assume null == 0;
[L1157]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1157]      RET         call this := FreshRefGenerator__success();
[L1158]                  assume now >= 0;
[L1159]                  assume DType[this] == SimpleAuction;
[L1160]                  gas := gas - 53000;
[L1161]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1161]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]                  assume !revert && gas >= 0;
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND TRUE   choice == 4
[L1112]                  gas := gas - 21000;
[L1113]      COND TRUE   gas >= 0
[L1115]                  assume msgvalue_MSG >= 0;
[L1116]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1116]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);
[L1165]      CALL        call CorralChoice_SimpleAuction(this);
[L1096]                  havoc msgsender_MSG;
[L1097]                  havoc msgvalue_MSG;
[L1098]                  havoc choice;
[L1099]                  havoc __ret_0_withdraw;
[L1100]                  havoc __ret_0_auctionEndTime;
[L1101]                  havoc tmpNow;
[L1102]                  havoc gas;
[L1103]                  assume gas > 4000000 && gas <= 8000000;
[L1104]                  tmpNow := now;
[L1105]                  havoc now;
[L1106]                  assume now > tmpNow;
[L1107]                  assume msgsender_MSG != null;
[L1108]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1109]                  Alloc[msgsender_MSG] := true;
[L1110]      COND FALSE  !(choice == 4)
[L1119]      COND TRUE   choice == 3
[L1121]                  gas := gas - 21000;
[L1122]      COND TRUE   gas >= 0
[L1124]                  assume msgvalue_MSG == 0;
[L1125]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1041]                  havoc __exception;
[L1042]      COND FALSE  !(__exception)
[L1071]      COND TRUE   Balance[from] >= amount
[L1073]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]                   assume Balance[from] >= amount;
[L949]                   Balance[from] := Balance[from] - amount;
[L950]                   Balance[to] := Balance[to] + amount;
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1073]      RET         call FallbackDispatch__success(from, to, amount);
[L1074]                  success := true;
[L1081]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1125]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:34,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:34,268 INFO  L82        PathProgramCache]: Analyzing trace with hash 1141737906, now seen corresponding path program 2 times
[2020-05-31 02:37:34,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:34,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:34,737 INFO  L134       CoverageAnalysis]: Checked inductivity of 323 backedges. 93 proven. 165 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-05-31 02:37:34,737 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:34,737 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [44] total 44
[2020-05-31 02:37:34,737 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:34,738 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 45 interpolants.
[2020-05-31 02:37:34,738 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=150, Invalid=1830, Unknown=0, NotChecked=0, Total=1980
[2020-05-31 02:37:34,738 INFO  L87              Difference]: Start difference. First operand 1950 states and 2394 transitions. cyclomatic complexity: 476 Second operand 45 states.
[2020-05-31 02:37:37,082 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:37,082 INFO  L93              Difference]: Finished difference Result 1952 states and 2365 transitions.
[2020-05-31 02:37:37,082 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-05-31 02:37:37,082 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1952 states and 2365 transitions.
[2020-05-31 02:37:37,086 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:37:37,086 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1952 states to 0 states and 0 transitions.
[2020-05-31 02:37:37,086 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:37:37,086 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:37:37,086 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:37:37,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:37,086 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:37:37,086 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:37:37,086 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:37:37,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-31 02:37:37,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:37:37,087 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:37:37,087 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:37:37,090 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:37:37 BasicIcfg
[2020-05-31 02:37:37,090 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:37:37,090 INFO  L168              Benchmark]: Toolchain (without parser) took 81179.95 ms. Allocated memory was 514.9 MB in the beginning and 3.0 GB in the end (delta: 2.5 GB). Free memory was 461.5 MB in the beginning and 2.0 GB in the end (delta: -1.6 GB). Peak memory consumption was 962.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,091 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,091 INFO  L168              Benchmark]: Boogie Preprocessor took 54.55 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,091 INFO  L168              Benchmark]: UtopiaSpecLang took 35.23 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,092 INFO  L168              Benchmark]: Boogie Printer took 7.93 ms. Allocated memory is still 514.9 MB. Free memory is still 453.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,092 INFO  L168              Benchmark]: RCFGBuilder took 329.17 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 419.6 MB in the end (delta: 33.8 MB). Peak memory consumption was 33.8 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,092 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.35 ms. Allocated memory is still 514.9 MB. Free memory was 419.6 MB in the beginning and 415.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,092 INFO  L168              Benchmark]: BÃ¼chi Program Product took 933.15 ms. Allocated memory was 514.9 MB in the beginning and 633.9 MB in the end (delta: 119.0 MB). Free memory was 415.1 MB in the beginning and 511.1 MB in the end (delta: -96.0 MB). Peak memory consumption was 118.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,093 INFO  L168              Benchmark]: BlockEncodingV2 took 86.50 ms. Allocated memory is still 633.9 MB. Free memory was 511.1 MB in the beginning and 483.1 MB in the end (delta: 28.0 MB). Peak memory consumption was 28.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,093 INFO  L168              Benchmark]: BuchiAutomizer took 79697.35 ms. Allocated memory was 633.9 MB in the beginning and 3.0 GB in the end (delta: 2.4 GB). Free memory was 483.1 MB in the beginning and 2.0 GB in the end (delta: -1.5 GB). Peak memory consumption was 864.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:37,096 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1855 locations, 3955 edges
  - StatisticsResult: Encoded RCFG
    1836 locations, 3896 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 54.55 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 35.23 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 7.93 ms. Allocated memory is still 514.9 MB. Free memory is still 453.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 329.17 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 419.6 MB in the end (delta: 33.8 MB). Peak memory consumption was 33.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.35 ms. Allocated memory is still 514.9 MB. Free memory was 419.6 MB in the beginning and 415.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 933.15 ms. Allocated memory was 514.9 MB in the beginning and 633.9 MB in the end (delta: 119.0 MB). Free memory was 415.1 MB in the beginning and 511.1 MB in the end (delta: -96.0 MB). Peak memory consumption was 118.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 86.50 ms. Allocated memory is still 633.9 MB. Free memory was 511.1 MB in the beginning and 483.1 MB in the end (delta: 28.0 MB). Peak memory consumption was 28.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 79697.35 ms. Allocated memory was 633.9 MB in the beginning and 3.0 GB in the end (delta: 2.4 GB). Free memory was 483.1 MB in the beginning and 2.0 GB in the end (delta: -1.5 GB). Peak memory consumption was 864.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    3 locations, 6 edges
  - StatisticsResult: Initial RCFG
    561 locations, 648 edges
  - StatisticsResult: BuchiProgram size
    1855 locations, 3955 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 31 terminating modules (31 trivial, 0 deterministic, 0 nondeterministic). 31 modules have a trivial ranking function, the largest among these consists of 75 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 79.6s and 32 iterations.  TraceHistogramMax:5. Analysis of lassos took 20.1s. Construction of modules took 42.9s. BÃ¼chi inclusion checks took 15.4s. Highest rank in rank-based complementation 0. Minimization of det autom 31. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 30 MinimizatonAttempts, 2646 StatesRemovedByMinimization, 27 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 2180 states and ocurred in iteration 22.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 36544 SDtfs, 68580 SDslu, 148307 SDs, 0 SdLazy, 442659 SolverSat, 9447 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 42.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI4 SFLT0 conc6 concLT0 SILN0 SILU21 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( []( <>(success_withdraw_SimpleAuction0) ) )&& ! ( ( []( (success_bid_SimpleAuction0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
