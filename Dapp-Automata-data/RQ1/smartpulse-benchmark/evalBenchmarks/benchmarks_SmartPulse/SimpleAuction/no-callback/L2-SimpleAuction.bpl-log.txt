This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:37:38,770 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:37:38,771 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:37:38,781 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:37:38,782 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:37:38,783 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:37:38,784 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:37:38,786 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:37:38,788 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:37:38,789 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:37:38,790 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:37:38,790 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:37:38,791 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:37:38,793 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:37:38,794 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:37:38,795 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:37:38,796 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:37:38,797 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:37:38,798 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:37:38,799 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:37:38,801 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:37:38,827 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:37:38,830 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:37:38,830 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:37:38,830 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:37:38,831 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:37:38,831 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:37:38,832 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:37:38,832 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:37:38,833 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:37:38,833 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:37:38,834 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:37:38,835 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:37:38,835 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:37:38,836 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:37:38,837 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:37:38,837 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:37:38,838 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:37:38,838 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:37:38,838 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:37:38,839 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:37:38,840 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:37:38,840 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:37:38,850 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:37:38,850 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:37:38,851 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:37:38,851 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:37:38,851 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:37:38,851 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:37:38,851 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:37:38,851 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:37:38,852 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:37:38,852 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:37:38,852 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:37:38,853 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:37:38,853 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:37:38,871 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:37:38,881 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:37:38,883 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:37:38,884 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:37:38,884 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:37:38,885 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/no-callback/L2-SimpleAuction.bpl
[2020-05-31 02:37:38,885 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/no-callback/L2-SimpleAuction.bpl'
[2020-05-31 02:37:38,923 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:37:38,924 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:37:38,924 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:37:38,924 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:37:38,924 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:37:38,937 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,938 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,953 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,953 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,965 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,969 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,972 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,977 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:37:38,977 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:37:38,977 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:37:38,979 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:37:38,982 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/1) ...
[2020-05-31 02:37:38,991 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:37:38,995 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:37:39,000 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:37:39,003 INFO  L599   opiaSpecLangObserver]: Parsed ( user==highestBidder_SimpleAuction[this] && val==msg.value ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],ArrayAccessExpression[IdentifierExpression[highestBidder_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]],BinaryExpression[COMPEQ,IdentifierExpression[val,GLOBAL],IdentifierExpression[msgvalue_MSG,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]
[2020-05-31 02:37:39,005 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==val ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[val,GLOBAL]]]
[2020-05-31 02:37:39,005 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:37:39,005 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( ( AP(success_bid_SimpleAuction0) && ( X( []( !AP(success_bid_SimpleAuction1) ) ) ) ) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:37:39,006 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:37:39,006 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:37:39,006 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:37:39,007 INFO  L599   opiaSpecLangObserver]: Parsed ben==beneficiary_SimpleAuction[this] to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiary_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,auctionEnd_SimpleAuction>]]]]
[2020-05-31 02:37:39,008 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:37:39,008 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_auctionEnd_SimpleAuction0) )
Executed UtopiaSpecLang
[2020-05-31 02:37:39,011 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:39 PropertyContainer
[2020-05-31 02:37:39,011 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:37:39,011 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:37:39,011 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:37:39,011 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:37:39,012 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/2) ...
[2020-05-31 02:37:39,012 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:37:39,012 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:37:39,019 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:39" (2/2) ...
[2020-05-31 02:37:39,019 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:37:39,020 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:37:39,020 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:37:39,020 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:37:39,021 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/2) ...
[2020-05-31 02:37:39,062 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:37:39,062 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:37:39,062 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:37:39,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:37:39,062 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction
[2020-05-31 02:37:39,062 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction
[2020-05-31 02:37:39,063 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction
[2020-05-31 02:37:39,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction
[2020-05-31 02:37:39,063 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:37:39,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:37:39,064 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction
[2020-05-31 02:37:39,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction
[2020-05-31 02:37:39,064 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:37:39,064 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:37:39,064 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:37:39,064 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SimpleAuction
[2020-05-31 02:37:39,064 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__success
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__success
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:37:39,065 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:37:39,066 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__fail
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__success
[2020-05-31 02:37:39,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__success
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SimpleAuction
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:37:39,067 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:37:39,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:37:39,186 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:39,201 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:39,282 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:39,327 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:39,339 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:37:39,339 INFO  L286             CfgBuilder]: Removed 1 assue(true) statements.
[2020-05-31 02:37:39,340 INFO  L202        PluginConnector]: Adding new model L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:39 BoogieIcfgContainer
[2020-05-31 02:37:39,340 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:39" (2/2) ...
[2020-05-31 02:37:39,340 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:37:39,340 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4c3e77e9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:39, skipping insertion in model container
[2020-05-31 02:37:39,341 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:37:39,341 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:37:39,341 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:37:39,342 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:37:39,342 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/3) ...
[2020-05-31 02:37:39,342 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@57c59e3d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:39, skipping insertion in model container
[2020-05-31 02:37:39,342 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:39" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( [] ( ( b && ( X ( [] ( !c ) ) ) ) -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:37:39,374 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:39 NWAContainer
[2020-05-31 02:37:39,374 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:37:39,374 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:37:39,375 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:37:39,375 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:37:39,376 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:39" (3/4) ...
[2020-05-31 02:37:39,376 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@17b32410 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:39, skipping insertion in model container
[2020-05-31 02:37:39,376 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:39" (4/4) ...
[2020-05-31 02:37:39,380 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-31 02:37:39,381 INFO  L110   BuchiProductObserver]: Initial RCFG 568 locations, 655 edges
[2020-05-31 02:37:39,381 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:37:39,389 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:37:40,596 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:37:40,600 INFO  L110   BuchiProductObserver]: BuchiProgram size 2498 locations, 6035 edges
[2020-05-31 02:37:40,600 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:40 BoogieIcfgContainer
[2020-05-31 02:37:40,600 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:37:40,600 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:37:40,601 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:37:40,602 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:37:40,603 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:40" (1/1) ...
[2020-05-31 02:37:40,680 INFO  L313           BlockEncoder]: Initial Icfg 2498 locations, 6035 edges
[2020-05-31 02:37:40,681 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:37:40,682 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:37:40,682 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:37:40,683 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:37:40,692 INFO  L70    emoveInfeasibleEdges]: Removed 58 edges and 10 locations because of local infeasibility
[2020-05-31 02:37:40,699 INFO  L70        RemoveSinkStates]: Removed 258 edges and 82 locations by removing sink states
[2020-05-31 02:37:40,734 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:37:40,736 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:37:40,739 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:37:40,739 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:37:40,743 INFO  L313           BlockEncoder]: Encoded RCFG 2394 locations, 5697 edges
[2020-05-31 02:37:40,744 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:37:40 BasicIcfg
[2020-05-31 02:37:40,744 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:37:40,744 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:37:40,744 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:37:40,746 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:37:40,747 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:40,747 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:38" (1/6) ...
[2020-05-31 02:37:40,748 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ee71a18 and model type L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:37:40, skipping insertion in model container
[2020-05-31 02:37:40,748 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:40,748 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:39" (2/6) ...
[2020-05-31 02:37:40,749 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ee71a18 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:37:40, skipping insertion in model container
[2020-05-31 02:37:40,749 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:40,749 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:39" (3/6) ...
[2020-05-31 02:37:40,749 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ee71a18 and model type L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:37:40, skipping insertion in model container
[2020-05-31 02:37:40,749 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:40,749 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:39" (4/6) ...
[2020-05-31 02:37:40,749 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ee71a18 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:37:40, skipping insertion in model container
[2020-05-31 02:37:40,749 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:40,750 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:40" (5/6) ...
[2020-05-31 02:37:40,750 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ee71a18 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:37:40, skipping insertion in model container
[2020-05-31 02:37:40,750 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:40,750 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:37:40" (6/6) ...
[2020-05-31 02:37:40,751 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-SimpleAuction.bpl_BEv2
[2020-05-31 02:37:40,781 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:37:40,781 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:37:40,781 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:37:40,782 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:37:40,782 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:37:40,782 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:37:40,782 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:37:40,782 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:37:40,782 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:37:40,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2394 states.
[2020-05-31 02:37:40,861 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:40,861 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:40,861 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:40,870 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:40,870 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:40,870 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:37:40,870 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2394 states.
[2020-05-31 02:37:40,890 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:40,891 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:40,891 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:40,893 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:40,893 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND FALSE  !(gas >= 0)
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:40,914 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:40,915 INFO  L82        PathProgramCache]: Analyzing trace with hash -1676237019, now seen corresponding path program 1 times
[2020-05-31 02:37:40,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:40,943 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:40,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:40,993 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:40,993 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:37:40,997 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:41,145 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:37:41,146 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:37:41,147 INFO  L87              Difference]: Start difference. First operand 2394 states. Second operand 3 states.
[2020-05-31 02:37:41,407 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:41,408 INFO  L93              Difference]: Finished difference Result 2162 states and 3398 transitions.
[2020-05-31 02:37:41,408 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:37:41,409 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2162 states and 3398 transitions.
[2020-05-31 02:37:41,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:41,443 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2162 states to 2162 states and 3398 transitions.
[2020-05-31 02:37:41,444 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-31 02:37:41,446 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 460
[2020-05-31 02:37:41,447 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2162 states and 3398 transitions.
[2020-05-31 02:37:41,456 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:41,457 INFO  L728         BuchiCegarLoop]: Abstraction has 2162 states and 3398 transitions.
[2020-05-31 02:37:41,472 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2162 states and 3398 transitions.
[2020-05-31 02:37:41,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2162 to 2162.
[2020-05-31 02:37:41,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2162 states.
[2020-05-31 02:37:41,518 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2162 states to 2162 states and 3398 transitions.
[2020-05-31 02:37:41,519 INFO  L751         BuchiCegarLoop]: Abstraction has 2162 states and 3398 transitions.
[2020-05-31 02:37:41,519 INFO  L631         BuchiCegarLoop]: Abstraction has 2162 states and 3398 transitions.
[2020-05-31 02:37:41,519 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:37:41,519 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2162 states and 3398 transitions.
[2020-05-31 02:37:41,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:41,525 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:41,525 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:41,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:41,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND TRUE   !(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L866]               revert := true;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND TRUE   !(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L866]               revert := true;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:41,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:41,531 INFO  L82        PathProgramCache]: Analyzing trace with hash -20353804, now seen corresponding path program 1 times
[2020-05-31 02:37:41,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:41,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:41,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:41,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:41,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:41,565 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:41,565 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:41,565 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:41,565 INFO  L87              Difference]: Start difference. First operand 2162 states and 3398 transitions. cyclomatic complexity: 1240 Second operand 4 states.
[2020-05-31 02:37:41,819 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:41,820 INFO  L93              Difference]: Finished difference Result 2034 states and 2236 transitions.
[2020-05-31 02:37:41,820 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:41,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2034 states and 2236 transitions.
[2020-05-31 02:37:41,831 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:41,845 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2034 states to 2034 states and 2236 transitions.
[2020-05-31 02:37:41,845 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 454
[2020-05-31 02:37:41,846 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 454
[2020-05-31 02:37:41,846 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2034 states and 2236 transitions.
[2020-05-31 02:37:41,850 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:41,850 INFO  L728         BuchiCegarLoop]: Abstraction has 2034 states and 2236 transitions.
[2020-05-31 02:37:41,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2034 states and 2236 transitions.
[2020-05-31 02:37:41,871 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2034 to 2034.
[2020-05-31 02:37:41,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2034 states.
[2020-05-31 02:37:41,875 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2034 states to 2034 states and 2236 transitions.
[2020-05-31 02:37:41,876 INFO  L751         BuchiCegarLoop]: Abstraction has 2034 states and 2236 transitions.
[2020-05-31 02:37:41,876 INFO  L631         BuchiCegarLoop]: Abstraction has 2034 states and 2236 transitions.
[2020-05-31 02:37:41,876 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:37:41,876 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2034 states and 2236 transitions.
[2020-05-31 02:37:41,883 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:41,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:41,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:41,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:41,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND TRUE   !(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L866]               revert := true;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND TRUE   !(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L866]               revert := true;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:41,890 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:41,890 INFO  L82        PathProgramCache]: Analyzing trace with hash -960518235, now seen corresponding path program 1 times
[2020-05-31 02:37:41,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:41,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:41,941 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:41,942 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:41,942 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:41,942 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:41,943 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:41,943 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:41,943 INFO  L87              Difference]: Start difference. First operand 2034 states and 2236 transitions. cyclomatic complexity: 206 Second operand 4 states.
[2020-05-31 02:37:42,338 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:42,338 INFO  L93              Difference]: Finished difference Result 2576 states and 2921 transitions.
[2020-05-31 02:37:42,338 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:42,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2576 states and 2921 transitions.
[2020-05-31 02:37:42,345 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:37:42,354 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2576 states to 2536 states and 2871 transitions.
[2020-05-31 02:37:42,354 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 579
[2020-05-31 02:37:42,355 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 579
[2020-05-31 02:37:42,355 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2536 states and 2871 transitions.
[2020-05-31 02:37:42,358 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:42,358 INFO  L728         BuchiCegarLoop]: Abstraction has 2536 states and 2871 transitions.
[2020-05-31 02:37:42,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2536 states and 2871 transitions.
[2020-05-31 02:37:42,385 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2536 to 2135.
[2020-05-31 02:37:42,385 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2135 states.
[2020-05-31 02:37:42,387 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2135 states to 2135 states and 2338 transitions.
[2020-05-31 02:37:42,387 INFO  L751         BuchiCegarLoop]: Abstraction has 2135 states and 2338 transitions.
[2020-05-31 02:37:42,387 INFO  L631         BuchiCegarLoop]: Abstraction has 2135 states and 2338 transitions.
[2020-05-31 02:37:42,388 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:37:42,388 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2135 states and 2338 transitions.
[2020-05-31 02:37:42,392 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:42,392 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:42,392 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:42,394 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:42,394 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND FALSE  !(Balance[from] >= amount)
[L1078]              success := false;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND FALSE  !(Balance[from] >= amount)
[L1078]              success := false;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:42,397 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:42,397 INFO  L82        PathProgramCache]: Analyzing trace with hash -942937800, now seen corresponding path program 1 times
[2020-05-31 02:37:42,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:42,416 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:42,454 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:42,454 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:42,454 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:42,455 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:42,455 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:42,455 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:42,455 INFO  L87              Difference]: Start difference. First operand 2135 states and 2338 transitions. cyclomatic complexity: 207 Second operand 4 states.
[2020-05-31 02:37:42,493 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:42,493 INFO  L93              Difference]: Finished difference Result 2175 states and 2380 transitions.
[2020-05-31 02:37:42,493 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:42,493 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2175 states and 2380 transitions.
[2020-05-31 02:37:42,502 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:42,512 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2175 states to 2167 states and 2372 transitions.
[2020-05-31 02:37:42,512 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 495
[2020-05-31 02:37:42,513 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 495
[2020-05-31 02:37:42,513 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2167 states and 2372 transitions.
[2020-05-31 02:37:42,515 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:42,516 INFO  L728         BuchiCegarLoop]: Abstraction has 2167 states and 2372 transitions.
[2020-05-31 02:37:42,519 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2167 states and 2372 transitions.
[2020-05-31 02:37:42,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2167 to 2167.
[2020-05-31 02:37:42,543 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2167 states.
[2020-05-31 02:37:42,546 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2167 states to 2167 states and 2372 transitions.
[2020-05-31 02:37:42,546 INFO  L751         BuchiCegarLoop]: Abstraction has 2167 states and 2372 transitions.
[2020-05-31 02:37:42,546 INFO  L631         BuchiCegarLoop]: Abstraction has 2167 states and 2372 transitions.
[2020-05-31 02:37:42,546 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:37:42,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2167 states and 2372 transitions.
[2020-05-31 02:37:42,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:42,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:42,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:42,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:42,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:42,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:42,556 INFO  L82        PathProgramCache]: Analyzing trace with hash 1862606001, now seen corresponding path program 1 times
[2020-05-31 02:37:42,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:42,572 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:42,666 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:42,666 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:42,666 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-31 02:37:42,667 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:42,667 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 02:37:42,667 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-05-31 02:37:42,667 INFO  L87              Difference]: Start difference. First operand 2167 states and 2372 transitions. cyclomatic complexity: 209 Second operand 14 states.
[2020-05-31 02:37:44,076 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:44,076 INFO  L93              Difference]: Finished difference Result 2472 states and 2756 transitions.
[2020-05-31 02:37:44,076 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:37:44,077 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2472 states and 2756 transitions.
[2020-05-31 02:37:44,086 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:44,100 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2472 states to 2442 states and 2723 transitions.
[2020-05-31 02:37:44,100 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 508
[2020-05-31 02:37:44,101 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 508
[2020-05-31 02:37:44,101 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2442 states and 2723 transitions.
[2020-05-31 02:37:44,104 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:44,104 INFO  L728         BuchiCegarLoop]: Abstraction has 2442 states and 2723 transitions.
[2020-05-31 02:37:44,106 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2442 states and 2723 transitions.
[2020-05-31 02:37:44,135 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2442 to 2376.
[2020-05-31 02:37:44,135 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2376 states.
[2020-05-31 02:37:44,139 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2376 states to 2376 states and 2626 transitions.
[2020-05-31 02:37:44,139 INFO  L751         BuchiCegarLoop]: Abstraction has 2376 states and 2626 transitions.
[2020-05-31 02:37:44,139 INFO  L631         BuchiCegarLoop]: Abstraction has 2376 states and 2626 transitions.
[2020-05-31 02:37:44,139 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:37:44,139 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2376 states and 2626 transitions.
[2020-05-31 02:37:44,142 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:44,143 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:44,143 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:44,144 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:44,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]               assume Balance[from] >= amount;
[L949]               Balance[from] := Balance[from] - amount;
[L950]               Balance[to] := Balance[to] + amount;
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]               assume Balance[from] >= amount;
[L949]               Balance[from] := Balance[from] - amount;
[L950]               Balance[to] := Balance[to] + amount;
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:44,147 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:44,147 INFO  L82        PathProgramCache]: Analyzing trace with hash 37440897, now seen corresponding path program 1 times
[2020-05-31 02:37:44,148 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:44,168 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:44,264 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:44,265 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:44,265 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:37:44,265 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:44,265 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:37:44,265 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:37:44,266 INFO  L87              Difference]: Start difference. First operand 2376 states and 2626 transitions. cyclomatic complexity: 256 Second operand 10 states.
[2020-05-31 02:37:44,813 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:44,813 INFO  L93              Difference]: Finished difference Result 2709 states and 2975 transitions.
[2020-05-31 02:37:44,813 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:37:44,813 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2709 states and 2975 transitions.
[2020-05-31 02:37:44,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:37:44,829 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2709 states to 2623 states and 2881 transitions.
[2020-05-31 02:37:44,830 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 554
[2020-05-31 02:37:44,830 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 554
[2020-05-31 02:37:44,830 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2623 states and 2881 transitions.
[2020-05-31 02:37:44,832 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:44,832 INFO  L728         BuchiCegarLoop]: Abstraction has 2623 states and 2881 transitions.
[2020-05-31 02:37:44,835 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2623 states and 2881 transitions.
[2020-05-31 02:37:44,856 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2623 to 2289.
[2020-05-31 02:37:44,856 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2289 states.
[2020-05-31 02:37:44,859 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2289 states to 2289 states and 2473 transitions.
[2020-05-31 02:37:44,859 INFO  L751         BuchiCegarLoop]: Abstraction has 2289 states and 2473 transitions.
[2020-05-31 02:37:44,859 INFO  L631         BuchiCegarLoop]: Abstraction has 2289 states and 2473 transitions.
[2020-05-31 02:37:44,859 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:37:44,859 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2289 states and 2473 transitions.
[2020-05-31 02:37:44,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:44,862 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:44,862 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:44,863 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:44,863 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L948]               assume Balance[from] >= amount;
[L949]               Balance[from] := Balance[from] - amount;
[L950]               Balance[to] := Balance[to] + amount;
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND FALSE  !(choice == 1)
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:44,866 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:44,866 INFO  L82        PathProgramCache]: Analyzing trace with hash -1646655699, now seen corresponding path program 1 times
[2020-05-31 02:37:44,867 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:44,880 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:44,948 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:44,949 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:44,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-31 02:37:44,949 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:44,949 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 02:37:44,949 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-05-31 02:37:44,949 INFO  L87              Difference]: Start difference. First operand 2289 states and 2473 transitions. cyclomatic complexity: 190 Second operand 13 states.
[2020-05-31 02:37:46,030 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:46,030 INFO  L93              Difference]: Finished difference Result 2560 states and 2813 transitions.
[2020-05-31 02:37:46,030 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 02:37:46,031 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2560 states and 2813 transitions.
[2020-05-31 02:37:46,037 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:46,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2560 states to 2083 states and 2298 transitions.
[2020-05-31 02:37:46,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 470
[2020-05-31 02:37:46,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 470
[2020-05-31 02:37:46,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2083 states and 2298 transitions.
[2020-05-31 02:37:46,046 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:46,046 INFO  L728         BuchiCegarLoop]: Abstraction has 2083 states and 2298 transitions.
[2020-05-31 02:37:46,048 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2083 states and 2298 transitions.
[2020-05-31 02:37:46,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2083 to 2008.
[2020-05-31 02:37:46,070 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2008 states.
[2020-05-31 02:37:46,073 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2008 states to 2008 states and 2199 transitions.
[2020-05-31 02:37:46,073 INFO  L751         BuchiCegarLoop]: Abstraction has 2008 states and 2199 transitions.
[2020-05-31 02:37:46,073 INFO  L631         BuchiCegarLoop]: Abstraction has 2008 states and 2199 transitions.
[2020-05-31 02:37:46,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:37:46,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2008 states and 2199 transitions.
[2020-05-31 02:37:46,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:46,078 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:46,078 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:46,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:46,080 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND FALSE  !(choice == 1)
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:46,083 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:46,083 INFO  L82        PathProgramCache]: Analyzing trace with hash -1774322811, now seen corresponding path program 1 times
[2020-05-31 02:37:46,084 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:46,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:46,221 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:46,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:46,221 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-31 02:37:46,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:46,222 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-05-31 02:37:46,222 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-05-31 02:37:46,222 INFO  L87              Difference]: Start difference. First operand 2008 states and 2199 transitions. cyclomatic complexity: 196 Second operand 17 states.
[2020-05-31 02:37:47,452 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:47,452 INFO  L93              Difference]: Finished difference Result 2103 states and 2324 transitions.
[2020-05-31 02:37:47,453 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:37:47,453 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2103 states and 2324 transitions.
[2020-05-31 02:37:47,456 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:47,459 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2103 states to 2071 states and 2281 transitions.
[2020-05-31 02:37:47,459 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 470
[2020-05-31 02:37:47,459 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 470
[2020-05-31 02:37:47,460 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2071 states and 2281 transitions.
[2020-05-31 02:37:47,461 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:47,461 INFO  L728         BuchiCegarLoop]: Abstraction has 2071 states and 2281 transitions.
[2020-05-31 02:37:47,462 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2071 states and 2281 transitions.
[2020-05-31 02:37:47,475 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2071 to 2056.
[2020-05-31 02:37:47,476 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2056 states.
[2020-05-31 02:37:47,477 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2056 states to 2056 states and 2261 transitions.
[2020-05-31 02:37:47,477 INFO  L751         BuchiCegarLoop]: Abstraction has 2056 states and 2261 transitions.
[2020-05-31 02:37:47,477 INFO  L631         BuchiCegarLoop]: Abstraction has 2056 states and 2261 transitions.
[2020-05-31 02:37:47,478 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:37:47,478 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2056 states and 2261 transitions.
[2020-05-31 02:37:47,480 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:47,480 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:47,480 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:47,481 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:47,481 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND FALSE  !(revert)
[L473]               __tmp__pendingReturns_SimpleAuction[this] := __var_1;
[L474]               __tmp__M_Ref_int_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L475]               __tmp__sum_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := 0;
[L476]               __tmp__ended_SimpleAuction[this] := false;
[L477]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L478]               __tmp___beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L479]               __tmp__beneficiary_SimpleAuction[this] := null;
[L480]               __tmp__beneficiary_SimpleAuction[this] := __tmp___beneficiary_SimpleAuction[this];
[L481]               assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L482]               assume __tmp__now >= 0;
[L483]               __tmp__auctionStart_SimpleAuction[this] := __tmp__now;
[L484]               assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L485]               __tmp__biddingTime_SimpleAuction[this] := 2587587;
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND FALSE  !(choice == 1)
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:47,484 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:47,484 INFO  L82        PathProgramCache]: Analyzing trace with hash -1326006761, now seen corresponding path program 1 times
[2020-05-31 02:37:47,485 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:47,491 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:47,514 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:47,514 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:47,514 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:47,514 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:47,515 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:47,515 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:47,515 INFO  L87              Difference]: Start difference. First operand 2056 states and 2261 transitions. cyclomatic complexity: 210 Second operand 4 states.
[2020-05-31 02:37:47,570 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:47,570 INFO  L93              Difference]: Finished difference Result 2743 states and 3255 transitions.
[2020-05-31 02:37:47,570 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:37:47,570 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2743 states and 3255 transitions.
[2020-05-31 02:37:47,575 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:37:47,582 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2743 states to 2682 states and 3194 transitions.
[2020-05-31 02:37:47,582 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 589
[2020-05-31 02:37:47,583 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 589
[2020-05-31 02:37:47,583 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2682 states and 3194 transitions.
[2020-05-31 02:37:47,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:47,585 INFO  L728         BuchiCegarLoop]: Abstraction has 2682 states and 3194 transitions.
[2020-05-31 02:37:47,587 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2682 states and 3194 transitions.
[2020-05-31 02:37:47,607 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2682 to 1995.
[2020-05-31 02:37:47,607 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1995 states.
[2020-05-31 02:37:47,609 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1995 states to 1995 states and 2199 transitions.
[2020-05-31 02:37:47,609 INFO  L751         BuchiCegarLoop]: Abstraction has 1995 states and 2199 transitions.
[2020-05-31 02:37:47,609 INFO  L631         BuchiCegarLoop]: Abstraction has 1995 states and 2199 transitions.
[2020-05-31 02:37:47,609 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:37:47,609 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1995 states and 2199 transitions.
[2020-05-31 02:37:47,611 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:47,611 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:47,611 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:47,612 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:47,612 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1156]              assume null == 0;
[L1157]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1157]  RET         call this := FreshRefGenerator__success();
[L1158]              assume now >= 0;
[L1159]              assume DType[this] == SimpleAuction;
[L1160]              gas := gas - 53000;
[L1161]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1161]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1162]              assume !revert && gas >= 0;
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND FALSE  !(choice == 1)
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND TRUE   choice == 1
[L1139]              gas := gas - 21000;
[L1140]  COND TRUE   gas >= 0
[L1142]              assume msgvalue_MSG == 0;
[L1143]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1041]              havoc __exception;
[L1042]  COND FALSE  !(__exception)
[L1071]  COND TRUE   Balance[from] >= amount
[L1073]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1073]  RET         call FallbackDispatch__success(from, to, amount);
[L1074]              success := true;
[L1081]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1143]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND TRUE   choice == 4
[L1112]              gas := gas - 21000;
[L1113]  COND TRUE   gas >= 0
[L1115]              assume msgvalue_MSG >= 0;
[L1116]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1116]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1165]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1165]  CALL        call CorralChoice_SimpleAuction(this);
[L1096]              havoc msgsender_MSG;
[L1097]              havoc msgvalue_MSG;
[L1098]              havoc choice;
[L1099]              havoc __ret_0_withdraw;
[L1100]              havoc __ret_0_auctionEndTime;
[L1101]              havoc tmpNow;
[L1102]              havoc gas;
[L1103]              assume gas > 4000000 && gas <= 8000000;
[L1104]              tmpNow := now;
[L1105]              havoc now;
[L1106]              assume now > tmpNow;
[L1107]              assume msgsender_MSG != null;
[L1108]              assume DType[msgsender_MSG] != SimpleAuction;
[L1109]              Alloc[msgsender_MSG] := true;
[L1110]  COND FALSE  !(choice == 4)
[L1119]  COND FALSE  !(choice == 3)
[L1128]  COND FALSE  !(choice == 2)
[L1137]  COND FALSE  !(choice == 1)
[L1165]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:47,615 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:47,615 INFO  L82        PathProgramCache]: Analyzing trace with hash 1002686818, now seen corresponding path program 1 times
[2020-05-31 02:37:47,615 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:47,628 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:47,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 26 trivial. 0 not checked.
[2020-05-31 02:37:47,691 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:47,691 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:37:47,691 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:47,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:37:47,692 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:37:47,692 INFO  L87              Difference]: Start difference. First operand 1995 states and 2199 transitions. cyclomatic complexity: 209 Second operand 12 states.
[2020-05-31 02:37:48,286 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:48,286 INFO  L93              Difference]: Finished difference Result 1585 states and 1758 transitions.
[2020-05-31 02:37:48,286 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:37:48,286 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1585 states and 1758 transitions.
[2020-05-31 02:37:48,288 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:37:48,288 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1585 states to 0 states and 0 transitions.
[2020-05-31 02:37:48,288 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:37:48,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:37:48,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:37:48,289 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:48,289 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:37:48,289 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:37:48,289 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:37:48,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:37:48,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:37:48,289 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:37:48,289 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:37:48,292 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:37:48 BasicIcfg
[2020-05-31 02:37:48,292 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:37:48,292 INFO  L168              Benchmark]: Toolchain (without parser) took 9368.68 ms. Allocated memory was 514.9 MB in the beginning and 1.1 GB in the end (delta: 618.1 MB). Free memory was 461.5 MB in the beginning and 645.2 MB in the end (delta: -183.7 MB). Peak memory consumption was 434.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,294 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,294 INFO  L168              Benchmark]: Boogie Preprocessor took 52.80 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,294 INFO  L168              Benchmark]: UtopiaSpecLang took 33.86 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,294 INFO  L168              Benchmark]: Boogie Printer took 8.00 ms. Allocated memory is still 514.9 MB. Free memory is still 453.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,295 INFO  L168              Benchmark]: RCFGBuilder took 321.05 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 419.6 MB in the end (delta: 33.9 MB). Peak memory consumption was 33.9 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,295 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.58 ms. Allocated memory is still 514.9 MB. Free memory was 419.6 MB in the beginning and 415.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,295 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1225.82 ms. Allocated memory was 514.9 MB in the beginning and 579.9 MB in the end (delta: 65.0 MB). Free memory was 415.1 MB in the beginning and 365.0 MB in the end (delta: 50.1 MB). Peak memory consumption was 115.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,296 INFO  L168              Benchmark]: BlockEncodingV2 took 143.41 ms. Allocated memory is still 579.9 MB. Free memory was 365.0 MB in the beginning and 504.8 MB in the end (delta: -139.8 MB). Peak memory consumption was 55.9 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,296 INFO  L168              Benchmark]: BuchiAutomizer took 7547.50 ms. Allocated memory was 579.9 MB in the beginning and 1.1 GB in the end (delta: 553.1 MB). Free memory was 504.8 MB in the beginning and 645.2 MB in the end (delta: -140.4 MB). Peak memory consumption was 412.7 MB. Max. memory is 15.3 GB.
[2020-05-31 02:37:48,300 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2498 locations, 6035 edges
  - StatisticsResult: Encoded RCFG
    2394 locations, 5697 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 52.80 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 33.86 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 8.00 ms. Allocated memory is still 514.9 MB. Free memory is still 453.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 321.05 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 419.6 MB in the end (delta: 33.9 MB). Peak memory consumption was 33.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.58 ms. Allocated memory is still 514.9 MB. Free memory was 419.6 MB in the beginning and 415.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1225.82 ms. Allocated memory was 514.9 MB in the beginning and 579.9 MB in the end (delta: 65.0 MB). Free memory was 415.1 MB in the beginning and 365.0 MB in the end (delta: 50.1 MB). Peak memory consumption was 115.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 143.41 ms. Allocated memory is still 579.9 MB. Free memory was 365.0 MB in the beginning and 504.8 MB in the end (delta: -139.8 MB). Peak memory consumption was 55.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7547.50 ms. Allocated memory was 579.9 MB in the beginning and 1.1 GB in the end (delta: 553.1 MB). Free memory was 504.8 MB in the beginning and 645.2 MB in the end (delta: -140.4 MB). Peak memory consumption was 412.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    568 locations, 655 edges
  - StatisticsResult: BuchiProgram size
    2498 locations, 6035 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.5s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.8s. Construction of modules took 4.0s. BÃ¼chi inclusion checks took 2.0s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 9 MinimizatonAttempts, 1578 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2376 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21473 SDtfs, 20577 SDslu, 28100 SDs, 0 SdLazy, 68721 SolverSat, 4094 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( <>(success_auctionEnd_SimpleAuction0) )&& ! ( ( []( ( (success_bid_SimpleAuction0) && ( X( []( !(success_bid_SimpleAuction1) ) ) ) ) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
