This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:36:00,490 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:36:00,491 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:36:00,502 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:36:00,502 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:36:00,504 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:36:00,505 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:36:00,506 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:36:00,508 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:36:00,509 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:36:00,525 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:36:00,525 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:36:00,526 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:36:00,528 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:36:00,529 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:36:00,530 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:36:00,531 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:36:00,532 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:36:00,533 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:36:00,535 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:36:00,536 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:36:00,537 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:36:00,539 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:36:00,539 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:36:00,539 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:36:00,540 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:36:00,540 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:36:00,542 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:36:00,542 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:36:00,542 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:36:00,542 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:36:00,543 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:36:00,544 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:36:00,545 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:36:00,546 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:36:00,548 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:36:00,548 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:36:00,549 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:36:00,549 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:36:00,549 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:36:00,550 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:36:00,551 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:36:00,551 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:36:00,561 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:36:00,561 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:36:00,562 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:36:00,562 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:36:00,562 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:36:00,562 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:36:00,562 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:36:00,562 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:36:00,562 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:36:00,562 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:36:00,563 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:36:00,563 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:36:00,564 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:36:00,564 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:36:00,564 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:36:00,564 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:36:00,564 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:36:00,583 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:36:00,594 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:36:00,596 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:36:00,597 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:36:00,597 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:36:00,598 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/single-callback/L2-SimpleAuction.bpl
[2020-05-31 02:36:00,598 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/single-callback/L2-SimpleAuction.bpl'
[2020-05-31 02:36:00,638 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:36:00,639 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:36:00,640 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:36:00,640 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:36:00,640 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:36:00,653 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,654 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,670 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,670 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,683 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,688 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,691 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,695 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:36:00,696 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:36:00,696 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:36:00,698 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:36:00,700 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/1) ...
[2020-05-31 02:36:00,709 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:36:00,714 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:36:00,719 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:36:00,722 INFO  L599   opiaSpecLangObserver]: Parsed ( user==highestBidder_SimpleAuction[this] && val==msg.value ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],ArrayAccessExpression[IdentifierExpression[highestBidder_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]],BinaryExpression[COMPEQ,IdentifierExpression[val,GLOBAL],IdentifierExpression[msgvalue_MSG,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]
[2020-05-31 02:36:00,723 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==val ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[val,GLOBAL]]]
[2020-05-31 02:36:00,724 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:36:00,724 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( ( AP(success_bid_SimpleAuction0) && ( X( []( !AP(success_bid_SimpleAuction1) ) ) ) ) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:36:00,724 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:36:00,725 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:36:00,725 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:36:00,726 INFO  L599   opiaSpecLangObserver]: Parsed ben==beneficiary_SimpleAuction[this] to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiary_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,auctionEnd_SimpleAuction>]]]]
[2020-05-31 02:36:00,727 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:36:00,727 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_auctionEnd_SimpleAuction0) )
Executed UtopiaSpecLang
[2020-05-31 02:36:00,731 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:00 PropertyContainer
[2020-05-31 02:36:00,732 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:36:00,732 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:36:00,732 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:36:00,732 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:36:00,733 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/2) ...
[2020-05-31 02:36:00,733 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:36:00,733 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:36:00,740 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:00" (2/2) ...
[2020-05-31 02:36:00,740 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:36:00,740 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:36:00,740 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:36:00,740 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:36:00,741 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/2) ...
[2020-05-31 02:36:00,783 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:36:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:36:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:36:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:36:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction
[2020-05-31 02:36:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction
[2020-05-31 02:36:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction
[2020-05-31 02:36:00,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction
[2020-05-31 02:36:00,784 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:36:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:36:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction
[2020-05-31 02:36:00,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction
[2020-05-31 02:36:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:36:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:36:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:36:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SimpleAuction
[2020-05-31 02:36:00,785 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__success
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__success
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:36:00,786 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:36:00,787 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:36:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:36:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:36:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:36:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:36:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:36:00,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:36:00,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SimpleAuction
[2020-05-31 02:36:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:36:00,789 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:36:00,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:36:00,910 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:00,925 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:01,025 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:01,075 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:36:01,087 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:36:01,087 INFO  L286             CfgBuilder]: Removed 1 assue(true) statements.
[2020-05-31 02:36:01,088 INFO  L202        PluginConnector]: Adding new model L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:01 BoogieIcfgContainer
[2020-05-31 02:36:01,089 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:00" (2/2) ...
[2020-05-31 02:36:01,089 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:36:01,089 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@57fe4aaa and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:01, skipping insertion in model container
[2020-05-31 02:36:01,089 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:36:01,090 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:36:01,090 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:36:01,091 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:36:01,091 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/3) ...
[2020-05-31 02:36:01,091 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@234a6f28 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:01, skipping insertion in model container
[2020-05-31 02:36:01,092 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:00" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( [] ( ( b && ( X ( [] ( !c ) ) ) ) -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:36:01,134 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:01 NWAContainer
[2020-05-31 02:36:01,134 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:36:01,134 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:36:01,134 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:36:01,135 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:36:01,135 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:01" (3/4) ...
[2020-05-31 02:36:01,136 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4c488d62 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:01, skipping insertion in model container
[2020-05-31 02:36:01,136 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:01" (4/4) ...
[2020-05-31 02:36:01,139 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-31 02:36:01,140 INFO  L110   BuchiProductObserver]: Initial RCFG 624 locations, 757 edges
[2020-05-31 02:36:01,140 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:36:01,148 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:36:02,531 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:36:02,536 INFO  L110   BuchiProductObserver]: BuchiProgram size 2786 locations, 7001 edges
[2020-05-31 02:36:02,536 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:02 BoogieIcfgContainer
[2020-05-31 02:36:02,536 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:36:02,537 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:36:02,537 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:36:02,539 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:36:02,539 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:02" (1/1) ...
[2020-05-31 02:36:02,599 INFO  L313           BlockEncoder]: Initial Icfg 2786 locations, 7001 edges
[2020-05-31 02:36:02,600 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:36:02,600 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:36:02,600 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:36:02,601 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:36:02,612 INFO  L70    emoveInfeasibleEdges]: Removed 58 edges and 10 locations because of local infeasibility
[2020-05-31 02:36:02,621 INFO  L70        RemoveSinkStates]: Removed 34 edges and 12 locations by removing sink states
[2020-05-31 02:36:02,635 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:36:02,639 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:36:02,643 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:36:02,644 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:36:02,649 INFO  L313           BlockEncoder]: Encoded RCFG 2752 locations, 6887 edges
[2020-05-31 02:36:02,649 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:36:02 BasicIcfg
[2020-05-31 02:36:02,649 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:36:02,649 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:36:02,650 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:36:02,652 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:36:02,652 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:02,652 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:36:00" (1/6) ...
[2020-05-31 02:36:02,653 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e372aa6 and model type L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:36:02, skipping insertion in model container
[2020-05-31 02:36:02,654 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:02,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:36:00" (2/6) ...
[2020-05-31 02:36:02,654 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e372aa6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:36:02, skipping insertion in model container
[2020-05-31 02:36:02,654 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:02,654 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:36:01" (3/6) ...
[2020-05-31 02:36:02,654 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e372aa6 and model type L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:36:02, skipping insertion in model container
[2020-05-31 02:36:02,655 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:02,655 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:36:01" (4/6) ...
[2020-05-31 02:36:02,655 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e372aa6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:36:02, skipping insertion in model container
[2020-05-31 02:36:02,655 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:02,655 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:36:02" (5/6) ...
[2020-05-31 02:36:02,656 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e372aa6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:36:02, skipping insertion in model container
[2020-05-31 02:36:02,656 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:36:02,656 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:36:02" (6/6) ...
[2020-05-31 02:36:02,657 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-SimpleAuction.bpl_BEv2
[2020-05-31 02:36:02,694 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:36:02,694 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:36:02,695 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:36:02,695 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:36:02,695 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:36:02,695 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:36:02,695 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:36:02,695 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:36:02,695 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:36:02,725 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2752 states.
[2020-05-31 02:36:02,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:02,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:02,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:02,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:02,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:02,797 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:36:02,797 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2752 states.
[2020-05-31 02:36:02,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:02,827 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:02,827 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:02,829 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:02,829 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND FALSE  !(gas >= 0)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:02,848 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:02,848 INFO  L82        PathProgramCache]: Analyzing trace with hash -701851023, now seen corresponding path program 1 times
[2020-05-31 02:36:02,853 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:02,877 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:02,934 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:02,936 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:02,937 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:02,941 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:03,115 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:03,116 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:03,118 INFO  L87              Difference]: Start difference. First operand 2752 states. Second operand 4 states.
[2020-05-31 02:36:03,753 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:03,754 INFO  L93              Difference]: Finished difference Result 2508 states and 4159 transitions.
[2020-05-31 02:36:03,754 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:03,755 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2508 states and 4159 transitions.
[2020-05-31 02:36:03,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:03,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2508 states to 2504 states and 4151 transitions.
[2020-05-31 02:36:03,802 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-31 02:36:03,804 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 144
[2020-05-31 02:36:03,804 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2504 states and 4151 transitions.
[2020-05-31 02:36:03,815 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:03,815 INFO  L728         BuchiCegarLoop]: Abstraction has 2504 states and 4151 transitions.
[2020-05-31 02:36:03,832 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2504 states and 4151 transitions.
[2020-05-31 02:36:03,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2504 to 2504.
[2020-05-31 02:36:03,884 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2504 states.
[2020-05-31 02:36:03,889 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2504 states to 2504 states and 4151 transitions.
[2020-05-31 02:36:03,890 INFO  L751         BuchiCegarLoop]: Abstraction has 2504 states and 4151 transitions.
[2020-05-31 02:36:03,890 INFO  L631         BuchiCegarLoop]: Abstraction has 2504 states and 4151 transitions.
[2020-05-31 02:36:03,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:36:03,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2504 states and 4151 transitions.
[2020-05-31 02:36:03,898 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:03,898 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:03,899 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:03,901 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:03,901 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL       call CorralChoice_SimpleAuction(this);
[L1242]                 havoc msgsender_MSG;
[L1243]                 havoc msgvalue_MSG;
[L1244]                 havoc choice;
[L1245]                 havoc __ret_0_withdraw;
[L1246]                 havoc __ret_0_auctionEndTime;
[L1247]                 havoc tmpNow;
[L1248]                 havoc gas;
[L1249]                 assume gas > 4000000 && gas <= 8000000;
[L1250]                 tmpNow := now;
[L1251]                 havoc now;
[L1252]                 assume now > tmpNow;
[L1253]                 assume msgsender_MSG != null;
[L1254]                 assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                 Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE  choice == 4
[L1258]                 gas := gas - 21000;
[L1259]      COND TRUE  gas >= 0
[L1261]                 assume msgvalue_MSG >= 0;
[L1262]      CALL       call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                  havoc __exception;
[L150]                  revert := false;
[L151]       COND TRUE  __exception
[L153]                  __tmp__Balance := Balance;
[L154]                  __tmp__DType := DType;
[L155]                  __tmp__Alloc := Alloc;
[L156]                  __tmp__balance_ADDR := balance_ADDR;
[L157]                  __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L158]                  __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L159]                  __tmp__Length := Length;
[L160]                  __tmp__now := now;
[L161]                  __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L162]                  __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L163]                  __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L164]                  __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L165]                  __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L166]                  __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L167]                  __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L168]                  __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L169]       CALL       call bid_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L556]                  assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L557]                  __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L558]                  __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L559]                  gas := gas - 437;
[L560]                  assume __tmp__now >= 0;
[L561]                  assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L562]                  assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L563-L564]             assume __tmp__auctionStart_SimpleAuction[this] + __tmp__biddingTime_SimpleAuction[this] >= 0;
[L565-L566]  COND TRUE  !(__tmp__now <= __tmp__auctionStart_SimpleAuction[this] + __tmp__biddingTime_SimpleAuction[this])
[L568]                  revert := true;
[L169]       RET        call bid_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L170]                  assume revert || gas < 0;
[L1262]      RET        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET        call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:03,905 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:03,905 INFO  L82        PathProgramCache]: Analyzing trace with hash -243280767, now seen corresponding path program 1 times
[2020-05-31 02:36:03,906 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:03,916 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:03,936 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:03,936 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:03,936 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:03,937 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:03,938 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:03,938 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:03,938 INFO  L87              Difference]: Start difference. First operand 2504 states and 4151 transitions. cyclomatic complexity: 1659 Second operand 4 states.
[2020-05-31 02:36:04,352 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:04,352 INFO  L93              Difference]: Finished difference Result 2388 states and 2746 transitions.
[2020-05-31 02:36:04,352 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:04,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2388 states and 2746 transitions.
[2020-05-31 02:36:04,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:04,371 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2388 states to 2388 states and 2746 transitions.
[2020-05-31 02:36:04,371 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 144
[2020-05-31 02:36:04,371 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 144
[2020-05-31 02:36:04,371 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2388 states and 2746 transitions.
[2020-05-31 02:36:04,375 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:04,375 INFO  L728         BuchiCegarLoop]: Abstraction has 2388 states and 2746 transitions.
[2020-05-31 02:36:04,378 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2388 states and 2746 transitions.
[2020-05-31 02:36:04,401 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2388 to 2388.
[2020-05-31 02:36:04,402 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2388 states.
[2020-05-31 02:36:04,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2388 states to 2388 states and 2746 transitions.
[2020-05-31 02:36:04,406 INFO  L751         BuchiCegarLoop]: Abstraction has 2388 states and 2746 transitions.
[2020-05-31 02:36:04,407 INFO  L631         BuchiCegarLoop]: Abstraction has 2388 states and 2746 transitions.
[2020-05-31 02:36:04,407 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:36:04,407 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2388 states and 2746 transitions.
[2020-05-31 02:36:04,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:04,413 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:04,414 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:04,415 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:04,415 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND TRUE   !(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L866]               revert := true;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL       call CorralChoice_SimpleAuction(this);
[L1242]                 havoc msgsender_MSG;
[L1243]                 havoc msgvalue_MSG;
[L1244]                 havoc choice;
[L1245]                 havoc __ret_0_withdraw;
[L1246]                 havoc __ret_0_auctionEndTime;
[L1247]                 havoc tmpNow;
[L1248]                 havoc gas;
[L1249]                 assume gas > 4000000 && gas <= 8000000;
[L1250]                 tmpNow := now;
[L1251]                 havoc now;
[L1252]                 assume now > tmpNow;
[L1253]                 assume msgsender_MSG != null;
[L1254]                 assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                 Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE  choice == 4
[L1258]                 gas := gas - 21000;
[L1259]      COND TRUE  gas >= 0
[L1261]                 assume msgvalue_MSG >= 0;
[L1262]      CALL       call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                  havoc __exception;
[L150]                  revert := false;
[L151]       COND TRUE  __exception
[L153]                  __tmp__Balance := Balance;
[L154]                  __tmp__DType := DType;
[L155]                  __tmp__Alloc := Alloc;
[L156]                  __tmp__balance_ADDR := balance_ADDR;
[L157]                  __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L158]                  __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L159]                  __tmp__Length := Length;
[L160]                  __tmp__now := now;
[L161]                  __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L162]                  __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L163]                  __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L164]                  __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L165]                  __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L166]                  __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L167]                  __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L168]                  __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L169]       CALL       call bid_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L556]                  assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L557]                  __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L558]                  __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L559]                  gas := gas - 437;
[L560]                  assume __tmp__now >= 0;
[L561]                  assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L562]                  assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L563-L564]             assume __tmp__auctionStart_SimpleAuction[this] + __tmp__biddingTime_SimpleAuction[this] >= 0;
[L565-L566]  COND TRUE  !(__tmp__now <= __tmp__auctionStart_SimpleAuction[this] + __tmp__biddingTime_SimpleAuction[this])
[L568]                  revert := true;
[L169]       RET        call bid_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L170]                  assume revert || gas < 0;
[L1262]      RET        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET        call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:04,418 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:04,418 INFO  L82        PathProgramCache]: Analyzing trace with hash 476574185, now seen corresponding path program 1 times
[2020-05-31 02:36:04,419 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:04,430 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:04,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:04,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:04,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:04,464 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:04,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:04,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:04,464 INFO  L87              Difference]: Start difference. First operand 2388 states and 2746 transitions. cyclomatic complexity: 370 Second operand 4 states.
[2020-05-31 02:36:04,880 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:04,880 INFO  L93              Difference]: Finished difference Result 3142 states and 3637 transitions.
[2020-05-31 02:36:04,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:04,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3142 states and 3637 transitions.
[2020-05-31 02:36:04,891 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:36:04,904 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3142 states to 3026 states and 3493 transitions.
[2020-05-31 02:36:04,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 174
[2020-05-31 02:36:04,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 174
[2020-05-31 02:36:04,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3026 states and 3493 transitions.
[2020-05-31 02:36:04,909 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:04,909 INFO  L728         BuchiCegarLoop]: Abstraction has 3026 states and 3493 transitions.
[2020-05-31 02:36:04,912 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3026 states and 3493 transitions.
[2020-05-31 02:36:04,937 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3026 to 2537.
[2020-05-31 02:36:04,937 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2537 states.
[2020-05-31 02:36:04,940 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2537 states to 2537 states and 2868 transitions.
[2020-05-31 02:36:04,940 INFO  L751         BuchiCegarLoop]: Abstraction has 2537 states and 2868 transitions.
[2020-05-31 02:36:04,940 INFO  L631         BuchiCegarLoop]: Abstraction has 2537 states and 2868 transitions.
[2020-05-31 02:36:04,940 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:36:04,940 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2537 states and 2868 transitions.
[2020-05-31 02:36:04,945 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:04,945 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:04,945 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:04,947 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:04,947 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND FALSE  !(Balance[from] >= amount)
[L1224]              success := false;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND FALSE  !(Balance[from] >= amount)
[L1224]              success := false;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:04,950 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:04,950 INFO  L82        PathProgramCache]: Analyzing trace with hash 441604943, now seen corresponding path program 1 times
[2020-05-31 02:36:04,950 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:04,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:05,009 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:05,009 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:05,009 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:05,009 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:05,010 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:05,010 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:05,010 INFO  L87              Difference]: Start difference. First operand 2537 states and 2868 transitions. cyclomatic complexity: 343 Second operand 4 states.
[2020-05-31 02:36:05,057 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:05,057 INFO  L93              Difference]: Finished difference Result 2577 states and 2910 transitions.
[2020-05-31 02:36:05,058 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:36:05,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2577 states and 2910 transitions.
[2020-05-31 02:36:05,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:05,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2577 states to 2569 states and 2902 transitions.
[2020-05-31 02:36:05,077 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 155
[2020-05-31 02:36:05,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 155
[2020-05-31 02:36:05,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2569 states and 2902 transitions.
[2020-05-31 02:36:05,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:05,082 INFO  L728         BuchiCegarLoop]: Abstraction has 2569 states and 2902 transitions.
[2020-05-31 02:36:05,086 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2569 states and 2902 transitions.
[2020-05-31 02:36:05,117 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2569 to 2569.
[2020-05-31 02:36:05,117 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2569 states.
[2020-05-31 02:36:05,124 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2569 states to 2569 states and 2902 transitions.
[2020-05-31 02:36:05,124 INFO  L751         BuchiCegarLoop]: Abstraction has 2569 states and 2902 transitions.
[2020-05-31 02:36:05,124 INFO  L631         BuchiCegarLoop]: Abstraction has 2569 states and 2902 transitions.
[2020-05-31 02:36:05,124 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:36:05,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2569 states and 2902 transitions.
[2020-05-31 02:36:05,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:36:05,131 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:05,131 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:05,134 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:05,134 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:05,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:05,139 INFO  L82        PathProgramCache]: Analyzing trace with hash 1066547654, now seen corresponding path program 1 times
[2020-05-31 02:36:05,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:05,168 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:05,295 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:05,296 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:05,296 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-31 02:36:05,296 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:05,296 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 02:36:05,296 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-05-31 02:36:05,297 INFO  L87              Difference]: Start difference. First operand 2569 states and 2902 transitions. cyclomatic complexity: 345 Second operand 14 states.
[2020-05-31 02:36:06,772 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:06,772 INFO  L93              Difference]: Finished difference Result 3318 states and 3861 transitions.
[2020-05-31 02:36:06,772 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:36:06,773 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3318 states and 3861 transitions.
[2020-05-31 02:36:06,779 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 02:36:06,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3318 states to 3318 states and 3861 transitions.
[2020-05-31 02:36:06,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 262
[2020-05-31 02:36:06,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 262
[2020-05-31 02:36:06,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3318 states and 3861 transitions.
[2020-05-31 02:36:06,796 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:06,796 INFO  L728         BuchiCegarLoop]: Abstraction has 3318 states and 3861 transitions.
[2020-05-31 02:36:06,798 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3318 states and 3861 transitions.
[2020-05-31 02:36:06,829 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3318 to 3226.
[2020-05-31 02:36:06,829 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3226 states.
[2020-05-31 02:36:06,833 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3226 states to 3226 states and 3709 transitions.
[2020-05-31 02:36:06,834 INFO  L751         BuchiCegarLoop]: Abstraction has 3226 states and 3709 transitions.
[2020-05-31 02:36:06,834 INFO  L631         BuchiCegarLoop]: Abstraction has 3226 states and 3709 transitions.
[2020-05-31 02:36:06,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:36:06,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3226 states and 3709 transitions.
[2020-05-31 02:36:06,838 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 02:36:06,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:06,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:06,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:06,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]              assume Balance[from] >= amount;
[L1029]              Balance[from] := Balance[from] - amount;
[L1030]              Balance[to] := Balance[to] + amount;
[L1031]  COND FALSE  !(choice == 0)
[L1037]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]              assume Balance[from] >= amount;
[L1029]              Balance[from] := Balance[from] - amount;
[L1030]              Balance[to] := Balance[to] + amount;
[L1031]  COND FALSE  !(choice == 0)
[L1037]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:06,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:06,843 INFO  L82        PathProgramCache]: Analyzing trace with hash 1506595775, now seen corresponding path program 1 times
[2020-05-31 02:36:06,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:06,857 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:06,902 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:06,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:06,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:36:06,903 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:06,903 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:36:06,903 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:36:06,903 INFO  L87              Difference]: Start difference. First operand 3226 states and 3709 transitions. cyclomatic complexity: 497 Second operand 10 states.
[2020-05-31 02:36:07,916 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:07,916 INFO  L93              Difference]: Finished difference Result 4443 states and 5093 transitions.
[2020-05-31 02:36:07,916 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:36:07,916 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4443 states and 5093 transitions.
[2020-05-31 02:36:07,924 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-31 02:36:07,937 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4443 states to 4443 states and 5093 transitions.
[2020-05-31 02:36:07,938 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 397
[2020-05-31 02:36:07,938 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 397
[2020-05-31 02:36:07,938 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4443 states and 5093 transitions.
[2020-05-31 02:36:07,942 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:07,942 INFO  L728         BuchiCegarLoop]: Abstraction has 4443 states and 5093 transitions.
[2020-05-31 02:36:07,945 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4443 states and 5093 transitions.
[2020-05-31 02:36:07,981 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4443 to 3206.
[2020-05-31 02:36:07,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3206 states.
[2020-05-31 02:36:07,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3206 states to 3206 states and 3625 transitions.
[2020-05-31 02:36:07,986 INFO  L751         BuchiCegarLoop]: Abstraction has 3206 states and 3625 transitions.
[2020-05-31 02:36:07,986 INFO  L631         BuchiCegarLoop]: Abstraction has 3206 states and 3625 transitions.
[2020-05-31 02:36:07,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:36:07,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3206 states and 3625 transitions.
[2020-05-31 02:36:07,990 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:07,990 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:07,990 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:07,992 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:07,992 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]              assume Balance[from] >= amount;
[L1029]              Balance[from] := Balance[from] - amount;
[L1030]              Balance[to] := Balance[to] + amount;
[L1031]  COND FALSE  !(choice == 0)
[L1037]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND FALSE  !(choice == 1)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:07,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:07,994 INFO  L82        PathProgramCache]: Analyzing trace with hash -1236770300, now seen corresponding path program 1 times
[2020-05-31 02:36:07,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:08,007 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:08,076 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:08,076 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:08,076 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-31 02:36:08,077 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:08,077 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 02:36:08,077 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-05-31 02:36:08,077 INFO  L87              Difference]: Start difference. First operand 3206 states and 3625 transitions. cyclomatic complexity: 433 Second operand 13 states.
[2020-05-31 02:36:09,384 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:09,384 INFO  L93              Difference]: Finished difference Result 3569 states and 4105 transitions.
[2020-05-31 02:36:09,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-31 02:36:09,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3569 states and 4105 transitions.
[2020-05-31 02:36:09,392 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:09,401 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3569 states to 3569 states and 4105 transitions.
[2020-05-31 02:36:09,401 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 280
[2020-05-31 02:36:09,402 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 280
[2020-05-31 02:36:09,402 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3569 states and 4105 transitions.
[2020-05-31 02:36:09,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:09,405 INFO  L728         BuchiCegarLoop]: Abstraction has 3569 states and 4105 transitions.
[2020-05-31 02:36:09,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3569 states and 4105 transitions.
[2020-05-31 02:36:09,436 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3569 to 3432.
[2020-05-31 02:36:09,437 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3432 states.
[2020-05-31 02:36:09,441 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3432 states to 3432 states and 3922 transitions.
[2020-05-31 02:36:09,441 INFO  L751         BuchiCegarLoop]: Abstraction has 3432 states and 3922 transitions.
[2020-05-31 02:36:09,441 INFO  L631         BuchiCegarLoop]: Abstraction has 3432 states and 3922 transitions.
[2020-05-31 02:36:09,441 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:36:09,441 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3432 states and 3922 transitions.
[2020-05-31 02:36:09,445 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:09,445 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:09,445 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:09,446 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:09,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND FALSE  !(choice == 1)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:09,449 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:09,450 INFO  L82        PathProgramCache]: Analyzing trace with hash 1091390287, now seen corresponding path program 1 times
[2020-05-31 02:36:09,450 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:09,461 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:09,553 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:09,553 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:09,553 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-31 02:36:09,554 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:09,554 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-05-31 02:36:09,554 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-05-31 02:36:09,554 INFO  L87              Difference]: Start difference. First operand 3432 states and 3922 transitions. cyclomatic complexity: 504 Second operand 17 states.
[2020-05-31 02:36:11,576 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:11,576 INFO  L93              Difference]: Finished difference Result 3559 states and 4106 transitions.
[2020-05-31 02:36:11,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:36:11,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3559 states and 4106 transitions.
[2020-05-31 02:36:11,581 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:11,587 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3559 states to 3515 states and 4039 transitions.
[2020-05-31 02:36:11,587 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 267
[2020-05-31 02:36:11,587 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 267
[2020-05-31 02:36:11,587 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3515 states and 4039 transitions.
[2020-05-31 02:36:11,589 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:11,589 INFO  L728         BuchiCegarLoop]: Abstraction has 3515 states and 4039 transitions.
[2020-05-31 02:36:11,591 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3515 states and 4039 transitions.
[2020-05-31 02:36:11,612 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3515 to 3480.
[2020-05-31 02:36:11,612 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3480 states.
[2020-05-31 02:36:11,615 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3480 states to 3480 states and 3987 transitions.
[2020-05-31 02:36:11,615 INFO  L751         BuchiCegarLoop]: Abstraction has 3480 states and 3987 transitions.
[2020-05-31 02:36:11,615 INFO  L631         BuchiCegarLoop]: Abstraction has 3480 states and 3987 transitions.
[2020-05-31 02:36:11,615 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:36:11,615 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3480 states and 3987 transitions.
[2020-05-31 02:36:11,618 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:11,618 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:11,618 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:11,619 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:11,619 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND FALSE  !(revert)
[L473]               __tmp__pendingReturns_SimpleAuction[this] := __var_1;
[L474]               __tmp__M_Ref_int_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L475]               __tmp__sum_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := 0;
[L476]               __tmp__ended_SimpleAuction[this] := false;
[L477]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L478]               __tmp___beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L479]               __tmp__beneficiary_SimpleAuction[this] := null;
[L480]               __tmp__beneficiary_SimpleAuction[this] := __tmp___beneficiary_SimpleAuction[this];
[L481]               assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L482]               assume __tmp__now >= 0;
[L483]               __tmp__auctionStart_SimpleAuction[this] := __tmp__now;
[L484]               assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L485]               __tmp__biddingTime_SimpleAuction[this] := 2587587;
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND FALSE  !(choice == 1)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:11,623 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:11,623 INFO  L82        PathProgramCache]: Analyzing trace with hash -450413188, now seen corresponding path program 1 times
[2020-05-31 02:36:11,624 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:11,631 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:11,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:36:11,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:11,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:36:11,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:11,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:36:11,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:36:11,653 INFO  L87              Difference]: Start difference. First operand 3480 states and 3987 transitions. cyclomatic complexity: 521 Second operand 4 states.
[2020-05-31 02:36:11,757 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:11,757 INFO  L93              Difference]: Finished difference Result 4783 states and 5843 transitions.
[2020-05-31 02:36:11,757 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:36:11,757 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4783 states and 5843 transitions.
[2020-05-31 02:36:11,766 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-31 02:36:11,777 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4783 states to 4674 states and 5722 transitions.
[2020-05-31 02:36:11,777 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 340
[2020-05-31 02:36:11,778 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 340
[2020-05-31 02:36:11,778 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4674 states and 5722 transitions.
[2020-05-31 02:36:11,780 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:11,780 INFO  L728         BuchiCegarLoop]: Abstraction has 4674 states and 5722 transitions.
[2020-05-31 02:36:11,782 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4674 states and 5722 transitions.
[2020-05-31 02:36:11,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4674 to 3435.
[2020-05-31 02:36:11,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3435 states.
[2020-05-31 02:36:11,814 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3435 states to 3435 states and 3925 transitions.
[2020-05-31 02:36:11,815 INFO  L751         BuchiCegarLoop]: Abstraction has 3435 states and 3925 transitions.
[2020-05-31 02:36:11,815 INFO  L631         BuchiCegarLoop]: Abstraction has 3435 states and 3925 transitions.
[2020-05-31 02:36:11,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:36:11,815 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3435 states and 3925 transitions.
[2020-05-31 02:36:11,818 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:11,818 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:11,818 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:11,819 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:11,819 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG);
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]              assume Balance[from] >= amount;
[L1029]              Balance[from] := Balance[from] - amount;
[L1030]              Balance[to] := Balance[to] + amount;
[L1031]  COND FALSE  !(choice == 0)
[L1037]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND FALSE  !(choice == 1)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:11,822 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:11,822 INFO  L82        PathProgramCache]: Analyzing trace with hash -494288795, now seen corresponding path program 1 times
[2020-05-31 02:36:11,823 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:11,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:11,900 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 14 proven. 3 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:36:11,900 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:11,900 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 02:36:11,901 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:11,901 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:36:11,901 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:36:11,901 INFO  L87              Difference]: Start difference. First operand 3435 states and 3925 transitions. cyclomatic complexity: 504 Second operand 12 states.
[2020-05-31 02:36:12,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:12,578 INFO  L93              Difference]: Finished difference Result 3552 states and 4057 transitions.
[2020-05-31 02:36:12,578 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 02:36:12,578 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3552 states and 4057 transitions.
[2020-05-31 02:36:12,583 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:12,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3552 states to 3552 states and 4057 transitions.
[2020-05-31 02:36:12,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 281
[2020-05-31 02:36:12,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 281
[2020-05-31 02:36:12,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3552 states and 4057 transitions.
[2020-05-31 02:36:12,592 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:12,592 INFO  L728         BuchiCegarLoop]: Abstraction has 3552 states and 4057 transitions.
[2020-05-31 02:36:12,593 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3552 states and 4057 transitions.
[2020-05-31 02:36:12,609 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3552 to 3515.
[2020-05-31 02:36:12,609 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3515 states.
[2020-05-31 02:36:12,612 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3515 states to 3515 states and 4017 transitions.
[2020-05-31 02:36:12,612 INFO  L751         BuchiCegarLoop]: Abstraction has 3515 states and 4017 transitions.
[2020-05-31 02:36:12,612 INFO  L631         BuchiCegarLoop]: Abstraction has 3515 states and 4017 transitions.
[2020-05-31 02:36:12,612 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:36:12,612 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3515 states and 4017 transitions.
[2020-05-31 02:36:12,614 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:36:12,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:12,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:12,615 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:12,615 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND FALSE  !(choice == 1)
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND FALSE  !(choice == 1)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:12,618 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:12,619 INFO  L82        PathProgramCache]: Analyzing trace with hash -97262193, now seen corresponding path program 1 times
[2020-05-31 02:36:12,619 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:12,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:12,679 INFO  L134       CoverageAnalysis]: Checked inductivity of 26 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 26 trivial. 0 not checked.
[2020-05-31 02:36:12,679 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:36:12,679 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:36:12,680 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:12,680 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:36:12,680 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:36:12,680 INFO  L87              Difference]: Start difference. First operand 3515 states and 4017 transitions. cyclomatic complexity: 516 Second operand 12 states.
[2020-05-31 02:36:14,113 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:14,113 INFO  L93              Difference]: Finished difference Result 3540 states and 4053 transitions.
[2020-05-31 02:36:14,113 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:36:14,113 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3540 states and 4053 transitions.
[2020-05-31 02:36:14,118 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:14,122 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3540 states to 2473 states and 2789 transitions.
[2020-05-31 02:36:14,122 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 245
[2020-05-31 02:36:14,123 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 245
[2020-05-31 02:36:14,123 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2473 states and 2789 transitions.
[2020-05-31 02:36:14,124 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:14,124 INFO  L728         BuchiCegarLoop]: Abstraction has 2473 states and 2789 transitions.
[2020-05-31 02:36:14,126 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2473 states and 2789 transitions.
[2020-05-31 02:36:14,135 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2473 to 2219.
[2020-05-31 02:36:14,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2219 states.
[2020-05-31 02:36:14,137 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2219 states to 2219 states and 2481 transitions.
[2020-05-31 02:36:14,137 INFO  L751         BuchiCegarLoop]: Abstraction has 2219 states and 2481 transitions.
[2020-05-31 02:36:14,137 INFO  L631         BuchiCegarLoop]: Abstraction has 2219 states and 2481 transitions.
[2020-05-31 02:36:14,137 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:36:14,138 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2219 states and 2481 transitions.
[2020-05-31 02:36:14,139 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:36:14,139 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:36:14,139 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:36:14,140 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:36:14,140 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_auctionEnd_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc ben;
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     success_bid_SimpleAuction1 := true;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     revert := revert_hold;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND FALSE  !(gas < 21000)
[L1042]      COND TRUE   DType[from] == SimpleAuction
[L1044]      COND TRUE   choice == 4
[L1046]                  gas := gas - 21000;
[L1047]      COND TRUE   gas >= 0
[L1049]                  assume msgvalue_MSG >= 0;
[L1050]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1050]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1051]      COND FALSE  !(revert)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == ben && amount == val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND FALSE  !(choice == 3)
[L1274]      COND FALSE  !(choice == 2)
[L1283]      COND TRUE   choice == 1
[L1285]                  gas := gas - 21000;
[L1286]      COND TRUE   gas >= 0
[L1288]                  assume msgvalue_MSG == 0;
[L1289]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND TRUE   gas > 2300
[L884]                   gas := 2300;
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND TRUE   DType[to] == SimpleAuction
[L923]                   assume amount == 0;
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == ben && amount == val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume ben == beneficiary_SimpleAuction[this];
[L7]                     success_auctionEnd_SimpleAuction0 := true;
[L7]                     success_auctionEnd_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1289]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND FALSE  !(choice == 4)
[L1265]  COND FALSE  !(choice == 3)
[L1274]  COND FALSE  !(choice == 2)
[L1283]  COND TRUE   choice == 1
[L1285]              gas := gas - 21000;
[L1286]  COND TRUE   gas >= 0
[L1288]              assume msgvalue_MSG == 0;
[L1289]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]              havoc __exception;
[L1188]  COND FALSE  !(__exception)
[L1217]  COND TRUE   Balance[from] >= amount
[L1219]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1219]  RET         call FallbackDispatch__success(from, to, amount);
[L1220]              success := true;
[L1227]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1289]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:36:14,144 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:36:14,144 INFO  L82        PathProgramCache]: Analyzing trace with hash 496377090, now seen corresponding path program 1 times
[2020-05-31 02:36:14,144 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:36:14,155 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:36:14,207 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 4 proven. 17 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-05-31 02:36:14,208 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:36:14,208 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 02:36:14,208 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:36:14,208 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:36:14,208 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:36:14,209 INFO  L87              Difference]: Start difference. First operand 2219 states and 2481 transitions. cyclomatic complexity: 272 Second operand 6 states.
[2020-05-31 02:36:14,274 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:36:14,274 INFO  L93              Difference]: Finished difference Result 1297 states and 1419 transitions.
[2020-05-31 02:36:14,274 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:36:14,275 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1297 states and 1419 transitions.
[2020-05-31 02:36:14,276 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:36:14,276 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1297 states to 0 states and 0 transitions.
[2020-05-31 02:36:14,276 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:36:14,276 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:36:14,276 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:36:14,276 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:36:14,276 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:36:14,277 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:36:14,277 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:36:14,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:36:14,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:36:14,277 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:36:14,277 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:36:14,280 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:36:14 BasicIcfg
[2020-05-31 02:36:14,280 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:36:14,280 INFO  L168              Benchmark]: Toolchain (without parser) took 13641.01 ms. Allocated memory was 514.9 MB in the beginning and 1.4 GB in the end (delta: 849.9 MB). Free memory was 461.5 MB in the beginning and 1.1 GB in the end (delta: -686.3 MB). Peak memory consumption was 163.6 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,281 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,281 INFO  L168              Benchmark]: Boogie Preprocessor took 55.91 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,281 INFO  L168              Benchmark]: UtopiaSpecLang took 35.79 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,282 INFO  L168              Benchmark]: Boogie Printer took 7.97 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,282 INFO  L168              Benchmark]: RCFGBuilder took 349.41 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 415.6 MB in the end (delta: 36.4 MB). Peak memory consumption was 36.4 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,282 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.50 ms. Allocated memory is still 514.9 MB. Free memory was 415.6 MB in the beginning and 411.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,283 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1402.18 ms. Allocated memory was 514.9 MB in the beginning and 643.8 MB in the end (delta: 129.0 MB). Free memory was 411.1 MB in the beginning and 517.2 MB in the end (delta: -106.2 MB). Peak memory consumption was 230.2 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,284 INFO  L168              Benchmark]: BlockEncodingV2 took 112.56 ms. Allocated memory is still 643.8 MB. Free memory was 517.2 MB in the beginning and 470.0 MB in the end (delta: 47.2 MB). Peak memory consumption was 47.2 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,284 INFO  L168              Benchmark]: BuchiAutomizer took 11630.01 ms. Allocated memory was 643.8 MB in the beginning and 1.4 GB in the end (delta: 720.9 MB). Free memory was 470.0 MB in the beginning and 1.1 GB in the end (delta: -677.8 MB). Peak memory consumption was 43.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:36:14,289 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2786 locations, 7001 edges
  - StatisticsResult: Encoded RCFG
    2752 locations, 6887 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 55.91 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 35.79 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 7.97 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 349.41 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 415.6 MB in the end (delta: 36.4 MB). Peak memory consumption was 36.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.50 ms. Allocated memory is still 514.9 MB. Free memory was 415.6 MB in the beginning and 411.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1402.18 ms. Allocated memory was 514.9 MB in the beginning and 643.8 MB in the end (delta: 129.0 MB). Free memory was 411.1 MB in the beginning and 517.2 MB in the end (delta: -106.2 MB). Peak memory consumption was 230.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 112.56 ms. Allocated memory is still 643.8 MB. Free memory was 517.2 MB in the beginning and 470.0 MB in the end (delta: 47.2 MB). Peak memory consumption was 47.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 11630.01 ms. Allocated memory was 643.8 MB in the beginning and 1.4 GB in the end (delta: 720.9 MB). Free memory was 470.0 MB in the beginning and 1.1 GB in the end (delta: -677.8 MB). Peak memory consumption was 43.1 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    624 locations, 757 edges
  - StatisticsResult: BuchiProgram size
    2786 locations, 7001 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 17 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 11.6s and 13 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.9s. Construction of modules took 6.9s. BÃ¼chi inclusion checks took 2.8s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 11 MinimizatonAttempts, 3520 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3515 states and ocurred in iteration 10.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32145 SDtfs, 30384 SDslu, 74327 SDs, 0 SdLazy, 104157 SolverSat, 5822 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( <>(success_auctionEnd_SimpleAuction0) )&& ! ( ( []( ( (success_bid_SimpleAuction0) && ( X( []( !(success_bid_SimpleAuction1) ) ) ) ) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
