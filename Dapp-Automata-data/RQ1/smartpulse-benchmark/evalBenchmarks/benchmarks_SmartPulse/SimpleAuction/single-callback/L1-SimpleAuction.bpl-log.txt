This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:35:24,484 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:35:24,485 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:35:24,496 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:35:24,496 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:35:24,497 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:35:24,498 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:35:24,500 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:35:24,501 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:35:24,502 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:35:24,517 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:35:24,518 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:35:24,519 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:35:24,520 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:35:24,521 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:35:24,522 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:35:24,523 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:35:24,524 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:35:24,526 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:35:24,527 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:35:24,528 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:35:24,529 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:35:24,531 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:35:24,531 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:35:24,532 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:35:24,533 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:35:24,533 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:35:24,534 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:35:24,534 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:35:24,534 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:35:24,535 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:35:24,536 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:35:24,536 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:35:24,537 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:35:24,538 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:35:24,540 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:35:24,540 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:35:24,541 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:35:24,541 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:35:24,541 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:35:24,542 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:35:24,543 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:35:24,544 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:35:24,552 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:35:24,552 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:35:24,553 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:35:24,553 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:35:24,553 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:35:24,553 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:35:24,553 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:35:24,553 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:35:24,553 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:35:24,553 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:35:24,554 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:35:24,554 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:35:24,555 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:35:24,555 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:35:24,555 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:35:24,555 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:35:24,555 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:35:24,555 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:35:24,575 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:35:24,586 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:35:24,588 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:35:24,589 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:35:24,589 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:35:24,590 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/single-callback/L1-SimpleAuction.bpl
[2020-05-31 02:35:24,591 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/single-callback/L1-SimpleAuction.bpl'
[2020-05-31 02:35:24,629 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:35:24,630 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:35:24,631 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:35:24,631 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:35:24,631 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:35:24,644 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,645 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,660 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,660 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,674 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,679 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,682 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,687 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:35:24,688 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:35:24,688 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:35:24,690 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:35:24,693 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/1) ...
[2020-05-31 02:35:24,702 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:35:24,707 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:35:24,712 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:35:24,715 INFO  L599   opiaSpecLangObserver]: Parsed ( ( user==( old(highestBidder_SimpleAuction[this]) ) && val==( old(highestBid_SimpleAuction[this]) ) ) && user!=0 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[highestBidder_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]]],BinaryExpression[COMPEQ,IdentifierExpression[val,GLOBAL],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[highestBid_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]]]],BinaryExpression[COMPNEQ,IdentifierExpression[user,GLOBAL],IntegerLiteral[0]]]
[2020-05-31 02:35:24,716 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount>=val ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPGEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[val,GLOBAL]]]
[2020-05-31 02:35:24,717 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:35:24,717 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_bid_SimpleAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:35:24,717 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:35:24,717 INFO  L979   opiaSpecLangObserver]: Successfully lexed: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:35:24,717 INFO  L981   opiaSpecLangObserver]: Successfully parsed: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:35:24,719 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_SimpleAuction>]]
[2020-05-31 02:35:24,719 INFO  L968   opiaSpecLangObserver]: Compiling: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:35:24,720 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( <>AP(success_withdraw_SimpleAuction0) ) )
Executed UtopiaSpecLang
[2020-05-31 02:35:24,724 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:35:24 PropertyContainer
[2020-05-31 02:35:24,724 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:35:24,725 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:35:24,725 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:35:24,725 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:35:24,725 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/2) ...
[2020-05-31 02:35:24,726 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:35:24,726 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:35:24,732 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:35:24" (2/2) ...
[2020-05-31 02:35:24,732 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:35:24,733 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:35:24,733 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:35:24,733 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:35:24,734 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/2) ...
[2020-05-31 02:35:24,776 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:35:24,776 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:35:24,776 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:35:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:35:24,776 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction
[2020-05-31 02:35:24,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction
[2020-05-31 02:35:24,777 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction
[2020-05-31 02:35:24,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction
[2020-05-31 02:35:24,777 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:35:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction
[2020-05-31 02:35:24,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SimpleAuction
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:35:24,778 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__success
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__success
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:35:24,779 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:35:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:35:24,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__fail
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__success
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__success
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:35:24,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SimpleAuction
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:35:24,781 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:35:24,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:35:24,902 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:35:24,918 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:35:24,995 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:35:25,062 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:35:25,074 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:35:25,074 INFO  L286             CfgBuilder]: Removed 1 assue(true) statements.
[2020-05-31 02:35:25,075 INFO  L202        PluginConnector]: Adding new model L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:35:25 BoogieIcfgContainer
[2020-05-31 02:35:25,075 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:35:24" (2/2) ...
[2020-05-31 02:35:25,075 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:35:25,075 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@d1c2eca and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:35:25, skipping insertion in model container
[2020-05-31 02:35:25,076 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:35:25,076 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:35:25,076 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:35:25,077 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:35:25,077 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/3) ...
[2020-05-31 02:35:25,077 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@37cc70f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:35:25, skipping insertion in model container
[2020-05-31 02:35:25,078 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:35:24" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( [] ( <>a ) ) && ! ( ( [] ( b -> ( <>c ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:35:25,114 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:35:25 NWAContainer
[2020-05-31 02:35:25,114 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:35:25,115 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:35:25,115 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:35:25,115 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:35:25,116 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:35:25" (3/4) ...
[2020-05-31 02:35:25,117 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2d4dc1dc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:35:25, skipping insertion in model container
[2020-05-31 02:35:25,117 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:35:25" (4/4) ...
[2020-05-31 02:35:25,120 INFO  L104   BuchiProductObserver]: Initial property automaton 3 locations, 6 edges
[2020-05-31 02:35:25,121 INFO  L110   BuchiProductObserver]: Initial RCFG 617 locations, 750 edges
[2020-05-31 02:35:25,121 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:35:25,130 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:35:26,146 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:35:26,150 INFO  L110   BuchiProductObserver]: BuchiProgram size 2071 locations, 4591 edges
[2020-05-31 02:35:26,150 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:35:26 BoogieIcfgContainer
[2020-05-31 02:35:26,151 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:35:26,151 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:35:26,151 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:35:26,153 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:35:26,154 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:35:26" (1/1) ...
[2020-05-31 02:35:26,211 INFO  L313           BlockEncoder]: Initial Icfg 2071 locations, 4591 edges
[2020-05-31 02:35:26,212 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:35:26,213 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:35:26,213 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:35:26,213 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:35:26,222 INFO  L70    emoveInfeasibleEdges]: Removed 39 edges and 8 locations because of local infeasibility
[2020-05-31 02:35:26,228 INFO  L70        RemoveSinkStates]: Removed 5 edges and 2 locations by removing sink states
[2020-05-31 02:35:26,235 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:35:26,239 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:35:26,241 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:35:26,242 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:35:26,246 INFO  L313           BlockEncoder]: Encoded RCFG 2052 locations, 4532 edges
[2020-05-31 02:35:26,246 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:35:26 BasicIcfg
[2020-05-31 02:35:26,246 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:35:26,247 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:35:26,247 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:35:26,249 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:35:26,250 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:35:26,250 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:35:24" (1/6) ...
[2020-05-31 02:35:26,251 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2652ab27 and model type L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:35:26, skipping insertion in model container
[2020-05-31 02:35:26,251 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:35:26,251 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:35:24" (2/6) ...
[2020-05-31 02:35:26,251 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2652ab27 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:35:26, skipping insertion in model container
[2020-05-31 02:35:26,251 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:35:26,251 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:35:25" (3/6) ...
[2020-05-31 02:35:26,252 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2652ab27 and model type L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:35:26, skipping insertion in model container
[2020-05-31 02:35:26,252 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:35:26,252 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:35:25" (4/6) ...
[2020-05-31 02:35:26,252 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2652ab27 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:35:26, skipping insertion in model container
[2020-05-31 02:35:26,252 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:35:26,252 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:35:26" (5/6) ...
[2020-05-31 02:35:26,253 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2652ab27 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:35:26, skipping insertion in model container
[2020-05-31 02:35:26,253 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:35:26,253 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:35:26" (6/6) ...
[2020-05-31 02:35:26,254 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-SimpleAuction.bpl_BEv2
[2020-05-31 02:35:26,296 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:35:26,296 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:35:26,297 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:35:26,297 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:35:26,297 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:35:26,297 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:35:26,297 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:35:26,297 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:35:26,297 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:35:26,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2052 states.
[2020-05-31 02:35:26,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:26,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:26,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:26,383 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:26,383 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:26,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:35:26,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2052 states.
[2020-05-31 02:35:26,400 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:26,400 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:26,400 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:26,402 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:26,402 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND FALSE  !(gas >= 0)
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:26,420 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:26,420 INFO  L82        PathProgramCache]: Analyzing trace with hash -783131660, now seen corresponding path program 1 times
[2020-05-31 02:35:26,425 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:26,447 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:26,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:35:26,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:26,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:35:26,506 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:26,615 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:35:26,616 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:35:26,617 INFO  L87              Difference]: Start difference. First operand 2052 states. Second operand 4 states.
[2020-05-31 02:35:26,986 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:26,987 INFO  L93              Difference]: Finished difference Result 1823 states and 3273 transitions.
[2020-05-31 02:35:26,987 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:35:26,988 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1823 states and 3273 transitions.
[2020-05-31 02:35:27,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:27,025 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1823 states to 1823 states and 3273 transitions.
[2020-05-31 02:35:27,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:35:27,026 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 6
[2020-05-31 02:35:27,026 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1823 states and 3273 transitions.
[2020-05-31 02:35:27,037 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:27,037 INFO  L728         BuchiCegarLoop]: Abstraction has 1823 states and 3273 transitions.
[2020-05-31 02:35:27,054 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1823 states and 3273 transitions.
[2020-05-31 02:35:27,100 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1823 to 1823.
[2020-05-31 02:35:27,100 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1823 states.
[2020-05-31 02:35:27,106 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1823 states to 1823 states and 3273 transitions.
[2020-05-31 02:35:27,109 INFO  L751         BuchiCegarLoop]: Abstraction has 1823 states and 3273 transitions.
[2020-05-31 02:35:27,109 INFO  L631         BuchiCegarLoop]: Abstraction has 1823 states and 3273 transitions.
[2020-05-31 02:35:27,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:35:27,109 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1823 states and 3273 transitions.
[2020-05-31 02:35:27,116 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:27,116 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:27,116 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:27,118 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:27,118 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:27,122 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:27,122 INFO  L82        PathProgramCache]: Analyzing trace with hash 1349157246, now seen corresponding path program 1 times
[2020-05-31 02:35:27,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:27,139 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:27,160 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:35:27,160 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:27,160 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:35:27,166 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:27,166 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:35:27,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:35:27,166 INFO  L87              Difference]: Start difference. First operand 1823 states and 3273 transitions. cyclomatic complexity: 1456 Second operand 4 states.
[2020-05-31 02:35:27,801 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:27,801 INFO  L93              Difference]: Finished difference Result 2393 states and 4323 transitions.
[2020-05-31 02:35:27,801 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:35:27,802 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2393 states and 4323 transitions.
[2020-05-31 02:35:27,813 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:35:27,832 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2393 states to 2303 states and 4152 transitions.
[2020-05-31 02:35:27,832 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-05-31 02:35:27,832 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 12
[2020-05-31 02:35:27,832 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2303 states and 4152 transitions.
[2020-05-31 02:35:27,841 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:27,841 INFO  L728         BuchiCegarLoop]: Abstraction has 2303 states and 4152 transitions.
[2020-05-31 02:35:27,844 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2303 states and 4152 transitions.
[2020-05-31 02:35:27,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2303 to 1927.
[2020-05-31 02:35:27,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1927 states.
[2020-05-31 02:35:27,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1927 states to 1927 states and 3423 transitions.
[2020-05-31 02:35:27,877 INFO  L751         BuchiCegarLoop]: Abstraction has 1927 states and 3423 transitions.
[2020-05-31 02:35:27,877 INFO  L631         BuchiCegarLoop]: Abstraction has 1927 states and 3423 transitions.
[2020-05-31 02:35:27,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:35:27,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1927 states and 3423 transitions.
[2020-05-31 02:35:27,884 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:27,884 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:27,884 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:27,886 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:27,886 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:27,888 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:27,889 INFO  L82        PathProgramCache]: Analyzing trace with hash 19190693, now seen corresponding path program 1 times
[2020-05-31 02:35:27,889 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:27,906 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:27,932 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:27,932 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:27,932 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:35:27,933 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:27,933 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:35:27,933 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:35:27,933 INFO  L87              Difference]: Start difference. First operand 1927 states and 3423 transitions. cyclomatic complexity: 1502 Second operand 6 states.
[2020-05-31 02:35:28,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:28,281 INFO  L93              Difference]: Finished difference Result 1316 states and 1478 transitions.
[2020-05-31 02:35:28,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:35:28,281 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1316 states and 1478 transitions.
[2020-05-31 02:35:28,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:28,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1316 states to 1316 states and 1478 transitions.
[2020-05-31 02:35:28,293 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:35:28,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:35:28,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1316 states and 1478 transitions.
[2020-05-31 02:35:28,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:28,294 INFO  L728         BuchiCegarLoop]: Abstraction has 1316 states and 1478 transitions.
[2020-05-31 02:35:28,296 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1316 states and 1478 transitions.
[2020-05-31 02:35:28,308 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1316 to 1316.
[2020-05-31 02:35:28,308 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1316 states.
[2020-05-31 02:35:28,310 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1316 states to 1316 states and 1478 transitions.
[2020-05-31 02:35:28,310 INFO  L751         BuchiCegarLoop]: Abstraction has 1316 states and 1478 transitions.
[2020-05-31 02:35:28,310 INFO  L631         BuchiCegarLoop]: Abstraction has 1316 states and 1478 transitions.
[2020-05-31 02:35:28,311 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:35:28,311 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1316 states and 1478 transitions.
[2020-05-31 02:35:28,314 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:28,314 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:28,314 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:28,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:28,316 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1302]              assume null == 0;
[L1303]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1303]  RET         call this := FreshRefGenerator__success();
[L1304]              assume now >= 0;
[L1305]              assume DType[this] == SimpleAuction;
[L1306]              gas := gas - 53000;
[L1307]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1307]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]              assume !revert && gas >= 0;
[L1311]  CALL        call CorralChoice_SimpleAuction(this);
[L1242]              havoc msgsender_MSG;
[L1243]              havoc msgvalue_MSG;
[L1244]              havoc choice;
[L1245]              havoc __ret_0_withdraw;
[L1246]              havoc __ret_0_auctionEndTime;
[L1247]              havoc tmpNow;
[L1248]              havoc gas;
[L1249]              assume gas > 4000000 && gas <= 8000000;
[L1250]              tmpNow := now;
[L1251]              havoc now;
[L1252]              assume now > tmpNow;
[L1253]              assume msgsender_MSG != null;
[L1254]              assume DType[msgsender_MSG] != SimpleAuction;
[L1255]              Alloc[msgsender_MSG] := true;
[L1256]  COND TRUE   choice == 4
[L1258]              gas := gas - 21000;
[L1259]  COND TRUE   gas >= 0
[L1261]              assume msgvalue_MSG >= 0;
[L1262]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1262]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:28,319 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:28,319 INFO  L82        PathProgramCache]: Analyzing trace with hash 17773548, now seen corresponding path program 1 times
[2020-05-31 02:35:28,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:28,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:28,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:28,405 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:28,405 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:35:28,406 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:28,406 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-31 02:35:28,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-05-31 02:35:28,406 INFO  L87              Difference]: Start difference. First operand 1316 states and 1478 transitions. cyclomatic complexity: 168 Second operand 9 states.
[2020-05-31 02:35:29,026 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:29,027 INFO  L93              Difference]: Finished difference Result 1478 states and 1659 transitions.
[2020-05-31 02:35:29,027 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:35:29,027 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1478 states and 1659 transitions.
[2020-05-31 02:35:29,035 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:29,042 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1478 states to 1478 states and 1659 transitions.
[2020-05-31 02:35:29,042 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:29,042 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:29,042 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1478 states and 1659 transitions.
[2020-05-31 02:35:29,044 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:29,044 INFO  L728         BuchiCegarLoop]: Abstraction has 1478 states and 1659 transitions.
[2020-05-31 02:35:29,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1478 states and 1659 transitions.
[2020-05-31 02:35:29,060 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1478 to 1366.
[2020-05-31 02:35:29,060 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1366 states.
[2020-05-31 02:35:29,062 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1366 states to 1366 states and 1526 transitions.
[2020-05-31 02:35:29,062 INFO  L751         BuchiCegarLoop]: Abstraction has 1366 states and 1526 transitions.
[2020-05-31 02:35:29,062 INFO  L631         BuchiCegarLoop]: Abstraction has 1366 states and 1526 transitions.
[2020-05-31 02:35:29,062 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:35:29,062 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1366 states and 1526 transitions.
[2020-05-31 02:35:29,066 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:35:29,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:29,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:29,068 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:29,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND FALSE  !(gas < 21000)
[L1042]      COND TRUE   DType[from] == SimpleAuction
[L1044]      COND TRUE   choice == 4
[L1046]                  gas := gas - 21000;
[L1047]      COND TRUE   gas >= 0
[L1049]                  assume msgvalue_MSG >= 0;
[L1050]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1050]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1051]      COND FALSE  !(revert)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:29,073 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:29,074 INFO  L82        PathProgramCache]: Analyzing trace with hash -1238871164, now seen corresponding path program 1 times
[2020-05-31 02:35:29,074 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:29,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:29,123 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:29,123 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:29,123 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:35:29,124 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:29,124 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:35:29,124 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:35:29,124 INFO  L87              Difference]: Start difference. First operand 1366 states and 1526 transitions. cyclomatic complexity: 166 Second operand 11 states.
[2020-05-31 02:35:29,651 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:29,651 INFO  L93              Difference]: Finished difference Result 1452 states and 1624 transitions.
[2020-05-31 02:35:29,652 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 02:35:29,652 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1452 states and 1624 transitions.
[2020-05-31 02:35:29,655 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:35:29,660 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1452 states to 1452 states and 1624 transitions.
[2020-05-31 02:35:29,660 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:29,661 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:29,661 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1452 states and 1624 transitions.
[2020-05-31 02:35:29,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:29,662 INFO  L728         BuchiCegarLoop]: Abstraction has 1452 states and 1624 transitions.
[2020-05-31 02:35:29,663 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1452 states and 1624 transitions.
[2020-05-31 02:35:29,677 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1452 to 1387.
[2020-05-31 02:35:29,677 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1387 states.
[2020-05-31 02:35:29,679 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1387 states to 1387 states and 1549 transitions.
[2020-05-31 02:35:29,679 INFO  L751         BuchiCegarLoop]: Abstraction has 1387 states and 1549 transitions.
[2020-05-31 02:35:29,679 INFO  L631         BuchiCegarLoop]: Abstraction has 1387 states and 1549 transitions.
[2020-05-31 02:35:29,679 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:35:29,679 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1387 states and 1549 transitions.
[2020-05-31 02:35:29,682 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:35:29,682 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:29,682 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:29,684 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:29,684 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND TRUE   __exception
[L112]                   __tmp__Balance := Balance;
[L113]                   __tmp__DType := DType;
[L114]                   __tmp__Alloc := Alloc;
[L115]                   __tmp__balance_ADDR := balance_ADDR;
[L116]                   __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]                   __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]                   __tmp__Length := Length;
[L119]                   __tmp__now := now;
[L120]                   __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]                   __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]                   __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]                   __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]                   __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]                   __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]                   __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]                   __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]       CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]                   assume msgsender_MSG != null;
[L462]                   __tmp__Balance[this] := 0;
[L463]                   __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]                   __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]                   __tmp__highestBidder_SimpleAuction[this] := null;
[L466]                   __tmp__highestBid_SimpleAuction[this] := 0;
[L467]       CALL        call __var_1 := FreshRefGenerator__fail();
[L438]                   havoc newRef;
[L439]                   assume __tmp__Alloc[newRef] == false;
[L440]                   __tmp__Alloc[newRef] := true;
[L441]                   assume newRef != null;
[L467]       RET         call __var_1 := FreshRefGenerator__fail();
[L468]       COND FALSE  !(revert)
[L473]                   __tmp__pendingReturns_SimpleAuction[this] := __var_1;
[L474]                   __tmp__M_Ref_int_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L475]                   __tmp__sum_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := 0;
[L476]                   __tmp__ended_SimpleAuction[this] := false;
[L477]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L478]                   __tmp___beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L479]                   __tmp__beneficiary_SimpleAuction[this] := null;
[L480]                   __tmp__beneficiary_SimpleAuction[this] := __tmp___beneficiary_SimpleAuction[this];
[L481]                   assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L482]                   assume __tmp__now >= 0;
[L483]                   __tmp__auctionStart_SimpleAuction[this] := __tmp__now;
[L484]                   assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L485]                   __tmp__biddingTime_SimpleAuction[this] := 2587587;
[L529]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]       COND FALSE  !(revert)
[L128]       RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]                   assume revert || gas < 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:29,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:29,686 INFO  L82        PathProgramCache]: Analyzing trace with hash -119028256, now seen corresponding path program 1 times
[2020-05-31 02:35:29,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:29,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:29,710 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:35:29,710 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:29,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:35:29,711 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:29,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:35:29,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:35:29,711 INFO  L87              Difference]: Start difference. First operand 1387 states and 1549 transitions. cyclomatic complexity: 169 Second operand 4 states.
[2020-05-31 02:35:29,849 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:29,849 INFO  L93              Difference]: Finished difference Result 1695 states and 1938 transitions.
[2020-05-31 02:35:29,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:35:29,849 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1695 states and 1938 transitions.
[2020-05-31 02:35:29,853 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:29,859 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1695 states to 1610 states and 1847 transitions.
[2020-05-31 02:35:29,859 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:35:29,859 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:35:29,859 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1610 states and 1847 transitions.
[2020-05-31 02:35:29,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:29,861 INFO  L728         BuchiCegarLoop]: Abstraction has 1610 states and 1847 transitions.
[2020-05-31 02:35:29,863 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1610 states and 1847 transitions.
[2020-05-31 02:35:29,877 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1610 to 1334.
[2020-05-31 02:35:29,877 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1334 states.
[2020-05-31 02:35:29,878 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1334 states to 1334 states and 1487 transitions.
[2020-05-31 02:35:29,879 INFO  L751         BuchiCegarLoop]: Abstraction has 1334 states and 1487 transitions.
[2020-05-31 02:35:29,879 INFO  L631         BuchiCegarLoop]: Abstraction has 1334 states and 1487 transitions.
[2020-05-31 02:35:29,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:35:29,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1334 states and 1487 transitions.
[2020-05-31 02:35:29,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:35:29,880 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:29,880 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:29,882 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:29,882 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:29,884 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:29,884 INFO  L82        PathProgramCache]: Analyzing trace with hash 1430907931, now seen corresponding path program 1 times
[2020-05-31 02:35:29,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:29,897 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:29,912 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:29,961 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:29,961 INFO  L82        PathProgramCache]: Analyzing trace with hash 1764031784, now seen corresponding path program 1 times
[2020-05-31 02:35:29,962 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:29,968 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:29,975 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:29,983 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:29,983 INFO  L82        PathProgramCache]: Analyzing trace with hash 1054249410, now seen corresponding path program 1 times
[2020-05-31 02:35:29,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:30,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:30,176 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 39 proven. 20 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:30,176 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:30,176 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-05-31 02:35:30,177 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-31 02:35:30,177 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=496, Unknown=0, NotChecked=0, Total=552
[2020-05-31 02:35:30,177 INFO  L87              Difference]: Start difference. First operand 1334 states and 1487 transitions. cyclomatic complexity: 160 Second operand 24 states.
[2020-05-31 02:35:31,591 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:31,591 INFO  L93              Difference]: Finished difference Result 1772 states and 2044 transitions.
[2020-05-31 02:35:31,591 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-05-31 02:35:31,591 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1772 states and 2044 transitions.
[2020-05-31 02:35:31,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:31,600 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1772 states to 1772 states and 2044 transitions.
[2020-05-31 02:35:31,600 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:35:31,600 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:35:31,600 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1772 states and 2044 transitions.
[2020-05-31 02:35:31,603 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:31,603 INFO  L728         BuchiCegarLoop]: Abstraction has 1772 states and 2044 transitions.
[2020-05-31 02:35:31,604 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1772 states and 2044 transitions.
[2020-05-31 02:35:31,621 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1772 to 1740.
[2020-05-31 02:35:31,621 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1740 states.
[2020-05-31 02:35:31,623 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1740 states to 1740 states and 2006 transitions.
[2020-05-31 02:35:31,623 INFO  L751         BuchiCegarLoop]: Abstraction has 1740 states and 2006 transitions.
[2020-05-31 02:35:31,624 INFO  L631         BuchiCegarLoop]: Abstraction has 1740 states and 2006 transitions.
[2020-05-31 02:35:31,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:35:31,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1740 states and 2006 transitions.
[2020-05-31 02:35:31,626 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:31,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:31,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:31,628 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:31,628 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:31,632 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:31,632 INFO  L82        PathProgramCache]: Analyzing trace with hash 1552243566, now seen corresponding path program 1 times
[2020-05-31 02:35:31,633 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:31,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:31,669 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:31,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:31,711 INFO  L82        PathProgramCache]: Analyzing trace with hash -1199001127, now seen corresponding path program 1 times
[2020-05-31 02:35:31,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:31,720 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:31,734 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-31 02:35:31,735 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:31,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:35:31,735 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:35:31,735 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:35:31,735 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:35:31,735 INFO  L87              Difference]: Start difference. First operand 1740 states and 2006 transitions. cyclomatic complexity: 273 Second operand 4 states.
[2020-05-31 02:35:31,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:31,745 INFO  L93              Difference]: Finished difference Result 1770 states and 2043 transitions.
[2020-05-31 02:35:31,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:35:31,745 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1770 states and 2043 transitions.
[2020-05-31 02:35:31,748 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:31,753 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1770 states to 1770 states and 2043 transitions.
[2020-05-31 02:35:31,753 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:35:31,753 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:35:31,753 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1770 states and 2043 transitions.
[2020-05-31 02:35:31,755 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:31,755 INFO  L728         BuchiCegarLoop]: Abstraction has 1770 states and 2043 transitions.
[2020-05-31 02:35:31,757 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1770 states and 2043 transitions.
[2020-05-31 02:35:31,776 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1770 to 1762.
[2020-05-31 02:35:31,776 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1762 states.
[2020-05-31 02:35:31,779 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1762 states to 1762 states and 2031 transitions.
[2020-05-31 02:35:31,779 INFO  L751         BuchiCegarLoop]: Abstraction has 1762 states and 2031 transitions.
[2020-05-31 02:35:31,779 INFO  L631         BuchiCegarLoop]: Abstraction has 1762 states and 2031 transitions.
[2020-05-31 02:35:31,779 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:35:31,779 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1762 states and 2031 transitions.
[2020-05-31 02:35:31,781 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:31,781 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:31,781 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:31,784 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:31,784 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND FALSE  !(gas < 21000)
[L1042]      COND TRUE   DType[from] == SimpleAuction
[L1044]      COND TRUE   choice == 4
[L1046]                  gas := gas - 21000;
[L1047]      COND TRUE   gas >= 0
[L1049]                  assume msgvalue_MSG >= 0;
[L1050]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1050]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1051]      COND FALSE  !(revert)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND FALSE  !(gas < 21000)
[L1042]      COND TRUE   DType[from] == SimpleAuction
[L1044]      COND TRUE   choice == 4
[L1046]                  gas := gas - 21000;
[L1047]      COND TRUE   gas >= 0
[L1049]                  assume msgvalue_MSG >= 0;
[L1050]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1050]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1051]      COND FALSE  !(revert)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:31,789 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:31,789 INFO  L82        PathProgramCache]: Analyzing trace with hash 1548347308, now seen corresponding path program 1 times
[2020-05-31 02:35:31,790 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:31,810 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:31,878 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-05-31 02:35:31,878 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:31,878 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 02:35:31,878 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:31,879 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:35:31,879 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:35:31,879 INFO  L87              Difference]: Start difference. First operand 1762 states and 2031 transitions. cyclomatic complexity: 276 Second operand 6 states.
[2020-05-31 02:35:32,025 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:32,025 INFO  L93              Difference]: Finished difference Result 1346 states and 1511 transitions.
[2020-05-31 02:35:32,025 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:35:32,026 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1346 states and 1511 transitions.
[2020-05-31 02:35:32,030 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:32,035 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1346 states to 1346 states and 1508 transitions.
[2020-05-31 02:35:32,036 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:32,036 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:32,036 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1346 states and 1508 transitions.
[2020-05-31 02:35:32,037 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:32,047 INFO  L728         BuchiCegarLoop]: Abstraction has 1346 states and 1508 transitions.
[2020-05-31 02:35:32,048 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1346 states and 1508 transitions.
[2020-05-31 02:35:32,061 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1346 to 1268.
[2020-05-31 02:35:32,061 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1268 states.
[2020-05-31 02:35:32,062 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1268 states to 1268 states and 1390 transitions.
[2020-05-31 02:35:32,062 INFO  L751         BuchiCegarLoop]: Abstraction has 1268 states and 1390 transitions.
[2020-05-31 02:35:32,062 INFO  L631         BuchiCegarLoop]: Abstraction has 1268 states and 1390 transitions.
[2020-05-31 02:35:32,062 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:35:32,062 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1268 states and 1390 transitions.
[2020-05-31 02:35:32,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:32,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:32,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:32,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:32,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:32,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:32,072 INFO  L82        PathProgramCache]: Analyzing trace with hash 1552243566, now seen corresponding path program 2 times
[2020-05-31 02:35:32,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:32,088 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:32,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:32,131 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:32,132 INFO  L82        PathProgramCache]: Analyzing trace with hash -1553896836, now seen corresponding path program 1 times
[2020-05-31 02:35:32,132 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:32,141 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:32,166 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-05-31 02:35:32,167 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:32,167 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:35:32,167 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:35:32,167 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:35:32,167 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:35:32,167 INFO  L87              Difference]: Start difference. First operand 1268 states and 1390 transitions. cyclomatic complexity: 125 Second operand 11 states.
[2020-05-31 02:35:32,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:32,387 INFO  L93              Difference]: Finished difference Result 1554 states and 1720 transitions.
[2020-05-31 02:35:32,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 02:35:32,387 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1554 states and 1720 transitions.
[2020-05-31 02:35:32,389 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:32,393 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1554 states to 1480 states and 1630 transitions.
[2020-05-31 02:35:32,393 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:32,393 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:32,393 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1480 states and 1630 transitions.
[2020-05-31 02:35:32,394 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:32,394 INFO  L728         BuchiCegarLoop]: Abstraction has 1480 states and 1630 transitions.
[2020-05-31 02:35:32,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1480 states and 1630 transitions.
[2020-05-31 02:35:32,405 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1480 to 1268.
[2020-05-31 02:35:32,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1268 states.
[2020-05-31 02:35:32,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1268 states to 1268 states and 1374 transitions.
[2020-05-31 02:35:32,406 INFO  L751         BuchiCegarLoop]: Abstraction has 1268 states and 1374 transitions.
[2020-05-31 02:35:32,406 INFO  L631         BuchiCegarLoop]: Abstraction has 1268 states and 1374 transitions.
[2020-05-31 02:35:32,407 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:35:32,407 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1268 states and 1374 transitions.
[2020-05-31 02:35:32,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:32,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:32,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:32,409 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:32,409 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:32,413 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:32,413 INFO  L82        PathProgramCache]: Analyzing trace with hash 1552243566, now seen corresponding path program 3 times
[2020-05-31 02:35:32,414 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:32,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:32,447 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:32,471 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:32,471 INFO  L82        PathProgramCache]: Analyzing trace with hash -76749624, now seen corresponding path program 1 times
[2020-05-31 02:35:32,472 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:32,480 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:32,550 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 18 proven. 2 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:35:32,550 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:32,550 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-31 02:35:32,551 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:35:32,551 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-31 02:35:32,551 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=334, Unknown=0, NotChecked=0, Total=380
[2020-05-31 02:35:32,551 INFO  L87              Difference]: Start difference. First operand 1268 states and 1374 transitions. cyclomatic complexity: 109 Second operand 20 states.
[2020-05-31 02:35:33,317 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:33,317 INFO  L93              Difference]: Finished difference Result 1495 states and 1639 transitions.
[2020-05-31 02:35:33,317 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:35:33,317 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1495 states and 1639 transitions.
[2020-05-31 02:35:33,320 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:33,322 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1495 states to 1489 states and 1633 transitions.
[2020-05-31 02:35:33,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:33,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:33,323 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1489 states and 1633 transitions.
[2020-05-31 02:35:33,323 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:33,324 INFO  L728         BuchiCegarLoop]: Abstraction has 1489 states and 1633 transitions.
[2020-05-31 02:35:33,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1489 states and 1633 transitions.
[2020-05-31 02:35:33,332 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1489 to 1434.
[2020-05-31 02:35:33,332 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1434 states.
[2020-05-31 02:35:33,334 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1434 states to 1434 states and 1569 transitions.
[2020-05-31 02:35:33,334 INFO  L751         BuchiCegarLoop]: Abstraction has 1434 states and 1569 transitions.
[2020-05-31 02:35:33,334 INFO  L631         BuchiCegarLoop]: Abstraction has 1434 states and 1569 transitions.
[2020-05-31 02:35:33,334 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:35:33,334 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1434 states and 1569 transitions.
[2020-05-31 02:35:33,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:35:33,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:33,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:33,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:33,336 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:33,340 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:33,340 INFO  L82        PathProgramCache]: Analyzing trace with hash 1552243566, now seen corresponding path program 4 times
[2020-05-31 02:35:33,341 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:33,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:33,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:33,394 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:33,394 INFO  L82        PathProgramCache]: Analyzing trace with hash 1764031784, now seen corresponding path program 2 times
[2020-05-31 02:35:33,394 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:33,398 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:33,402 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:33,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:33,406 INFO  L82        PathProgramCache]: Analyzing trace with hash -1558158123, now seen corresponding path program 1 times
[2020-05-31 02:35:33,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:33,422 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:33,692 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 39 proven. 46 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:33,692 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:33,692 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-31 02:35:33,693 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-31 02:35:33,693 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=99, Invalid=957, Unknown=0, NotChecked=0, Total=1056
[2020-05-31 02:35:33,693 INFO  L87              Difference]: Start difference. First operand 1434 states and 1569 transitions. cyclomatic complexity: 138 Second operand 33 states.
[2020-05-31 02:35:34,789 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:34,789 INFO  L93              Difference]: Finished difference Result 1508 states and 1676 transitions.
[2020-05-31 02:35:34,789 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-05-31 02:35:34,789 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1508 states and 1676 transitions.
[2020-05-31 02:35:34,791 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:34,794 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1508 states to 1508 states and 1675 transitions.
[2020-05-31 02:35:34,794 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:34,794 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:34,794 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1508 states and 1675 transitions.
[2020-05-31 02:35:34,795 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:34,795 INFO  L728         BuchiCegarLoop]: Abstraction has 1508 states and 1675 transitions.
[2020-05-31 02:35:34,796 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1508 states and 1675 transitions.
[2020-05-31 02:35:34,804 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1508 to 1466.
[2020-05-31 02:35:34,804 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1466 states.
[2020-05-31 02:35:34,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1466 states to 1466 states and 1618 transitions.
[2020-05-31 02:35:34,806 INFO  L751         BuchiCegarLoop]: Abstraction has 1466 states and 1618 transitions.
[2020-05-31 02:35:34,806 INFO  L631         BuchiCegarLoop]: Abstraction has 1466 states and 1618 transitions.
[2020-05-31 02:35:34,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:35:34,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1466 states and 1618 transitions.
[2020-05-31 02:35:34,807 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:34,807 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:34,807 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:34,808 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:34,808 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:34,812 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:34,813 INFO  L82        PathProgramCache]: Analyzing trace with hash 1708551038, now seen corresponding path program 1 times
[2020-05-31 02:35:34,813 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:34,823 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:34,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 22 proven. 16 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-05-31 02:35:34,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:34,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-31 02:35:34,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:34,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-05-31 02:35:34,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=397, Unknown=0, NotChecked=0, Total=462
[2020-05-31 02:35:34,962 INFO  L87              Difference]: Start difference. First operand 1466 states and 1618 transitions. cyclomatic complexity: 155 Second operand 22 states.
[2020-05-31 02:35:35,686 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:35,687 INFO  L93              Difference]: Finished difference Result 1507 states and 1685 transitions.
[2020-05-31 02:35:35,687 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-31 02:35:35,687 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1507 states and 1685 transitions.
[2020-05-31 02:35:35,689 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:35,692 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1507 states to 1507 states and 1685 transitions.
[2020-05-31 02:35:35,692 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:35,692 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:35,692 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1507 states and 1685 transitions.
[2020-05-31 02:35:35,693 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:35,693 INFO  L728         BuchiCegarLoop]: Abstraction has 1507 states and 1685 transitions.
[2020-05-31 02:35:35,694 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1507 states and 1685 transitions.
[2020-05-31 02:35:35,701 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1507 to 1486.
[2020-05-31 02:35:35,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1486 states.
[2020-05-31 02:35:35,702 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1486 states to 1486 states and 1661 transitions.
[2020-05-31 02:35:35,702 INFO  L751         BuchiCegarLoop]: Abstraction has 1486 states and 1661 transitions.
[2020-05-31 02:35:35,702 INFO  L631         BuchiCegarLoop]: Abstraction has 1486 states and 1661 transitions.
[2020-05-31 02:35:35,702 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 02:35:35,702 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1486 states and 1661 transitions.
[2020-05-31 02:35:35,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:35,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:35,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:35,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:35,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:35,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:35,709 INFO  L82        PathProgramCache]: Analyzing trace with hash -1733888501, now seen corresponding path program 1 times
[2020-05-31 02:35:35,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:35,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:36,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 32 proven. 53 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:36,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:36,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 02:35:36,502 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:36,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 02:35:36,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=222, Invalid=2328, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 02:35:36,503 INFO  L87              Difference]: Start difference. First operand 1486 states and 1661 transitions. cyclomatic complexity: 182 Second operand 51 states.
[2020-05-31 02:35:39,976 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:39,976 INFO  L93              Difference]: Finished difference Result 1832 states and 2185 transitions.
[2020-05-31 02:35:39,976 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-05-31 02:35:39,976 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1832 states and 2185 transitions.
[2020-05-31 02:35:39,979 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:39,983 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1832 states to 1832 states and 2182 transitions.
[2020-05-31 02:35:39,983 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:35:39,983 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:35:39,983 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1832 states and 2182 transitions.
[2020-05-31 02:35:39,985 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:39,985 INFO  L728         BuchiCegarLoop]: Abstraction has 1832 states and 2182 transitions.
[2020-05-31 02:35:39,986 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1832 states and 2182 transitions.
[2020-05-31 02:35:39,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1832 to 1695.
[2020-05-31 02:35:39,999 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1695 states.
[2020-05-31 02:35:40,001 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1695 states to 1695 states and 1968 transitions.
[2020-05-31 02:35:40,001 INFO  L751         BuchiCegarLoop]: Abstraction has 1695 states and 1968 transitions.
[2020-05-31 02:35:40,001 INFO  L631         BuchiCegarLoop]: Abstraction has 1695 states and 1968 transitions.
[2020-05-31 02:35:40,001 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 02:35:40,001 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1695 states and 1968 transitions.
[2020-05-31 02:35:40,002 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:40,002 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:40,003 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:40,004 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:40,004 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND TRUE   DType[to] == SimpleAuction
[L923]                   assume amount == 0;
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:40,007 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:40,007 INFO  L82        PathProgramCache]: Analyzing trace with hash -37974063, now seen corresponding path program 1 times
[2020-05-31 02:35:40,008 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:40,021 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:40,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-31 02:35:40,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:35:40,068 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:35:40,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:40,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:35:40,068 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:35:40,068 INFO  L87              Difference]: Start difference. First operand 1695 states and 1968 transitions. cyclomatic complexity: 288 Second operand 5 states.
[2020-05-31 02:35:40,080 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:40,080 INFO  L93              Difference]: Finished difference Result 1695 states and 1965 transitions.
[2020-05-31 02:35:40,080 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:35:40,080 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1695 states and 1965 transitions.
[2020-05-31 02:35:40,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:40,086 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1695 states to 1695 states and 1965 transitions.
[2020-05-31 02:35:40,086 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:40,086 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:40,086 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1695 states and 1965 transitions.
[2020-05-31 02:35:40,087 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:40,087 INFO  L728         BuchiCegarLoop]: Abstraction has 1695 states and 1965 transitions.
[2020-05-31 02:35:40,088 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1695 states and 1965 transitions.
[2020-05-31 02:35:40,098 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1695 to 1692.
[2020-05-31 02:35:40,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1692 states.
[2020-05-31 02:35:40,100 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1692 states to 1692 states and 1962 transitions.
[2020-05-31 02:35:40,100 INFO  L751         BuchiCegarLoop]: Abstraction has 1692 states and 1962 transitions.
[2020-05-31 02:35:40,100 INFO  L631         BuchiCegarLoop]: Abstraction has 1692 states and 1962 transitions.
[2020-05-31 02:35:40,100 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 02:35:40,100 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1692 states and 1962 transitions.
[2020-05-31 02:35:40,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:35:40,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:40,102 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:40,103 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:40,103 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:40,107 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:40,107 INFO  L82        PathProgramCache]: Analyzing trace with hash 1460086565, now seen corresponding path program 1 times
[2020-05-31 02:35:40,108 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:40,125 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:40,147 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:40,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:40,175 INFO  L82        PathProgramCache]: Analyzing trace with hash 1023109013, now seen corresponding path program 1 times
[2020-05-31 02:35:40,176 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:40,185 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:40,319 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 40 proven. 70 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:35:40,319 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:40,319 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-31 02:35:40,320 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:35:40,320 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-31 02:35:40,320 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=726, Unknown=0, NotChecked=0, Total=812
[2020-05-31 02:35:40,321 INFO  L87              Difference]: Start difference. First operand 1692 states and 1962 transitions. cyclomatic complexity: 285 Second operand 29 states.
[2020-05-31 02:35:41,470 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:41,470 INFO  L93              Difference]: Finished difference Result 2032 states and 2438 transitions.
[2020-05-31 02:35:41,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-05-31 02:35:41,470 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2032 states and 2438 transitions.
[2020-05-31 02:35:41,474 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:35:41,479 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2032 states to 2026 states and 2432 transitions.
[2020-05-31 02:35:41,479 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:41,479 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:41,479 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2026 states and 2432 transitions.
[2020-05-31 02:35:41,480 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:41,480 INFO  L728         BuchiCegarLoop]: Abstraction has 2026 states and 2432 transitions.
[2020-05-31 02:35:41,481 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2026 states and 2432 transitions.
[2020-05-31 02:35:41,494 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2026 to 2007.
[2020-05-31 02:35:41,494 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2007 states.
[2020-05-31 02:35:41,497 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2007 states to 2007 states and 2399 transitions.
[2020-05-31 02:35:41,497 INFO  L751         BuchiCegarLoop]: Abstraction has 2007 states and 2399 transitions.
[2020-05-31 02:35:41,497 INFO  L631         BuchiCegarLoop]: Abstraction has 2007 states and 2399 transitions.
[2020-05-31 02:35:41,497 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 02:35:41,497 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2007 states and 2399 transitions.
[2020-05-31 02:35:41,499 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:35:41,499 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:41,499 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:41,500 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:41,500 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:41,502 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:41,503 INFO  L82        PathProgramCache]: Analyzing trace with hash 1460086565, now seen corresponding path program 2 times
[2020-05-31 02:35:41,503 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:41,522 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:41,543 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:41,574 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:41,574 INFO  L82        PathProgramCache]: Analyzing trace with hash 1764031784, now seen corresponding path program 3 times
[2020-05-31 02:35:41,574 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:41,577 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:41,579 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:35:41,583 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:41,583 INFO  L82        PathProgramCache]: Analyzing trace with hash 2110054732, now seen corresponding path program 1 times
[2020-05-31 02:35:41,584 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:41,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:41,912 INFO  L134       CoverageAnalysis]: Checked inductivity of 165 backedges. 39 proven. 86 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-05-31 02:35:41,912 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:41,912 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-05-31 02:35:41,912 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-05-31 02:35:41,912 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1157, Unknown=0, NotChecked=0, Total=1260
[2020-05-31 02:35:41,913 INFO  L87              Difference]: Start difference. First operand 2007 states and 2399 transitions. cyclomatic complexity: 407 Second operand 36 states.
[2020-05-31 02:35:43,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:43,170 INFO  L93              Difference]: Finished difference Result 2038 states and 2474 transitions.
[2020-05-31 02:35:43,170 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-31 02:35:43,170 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2038 states and 2474 transitions.
[2020-05-31 02:35:43,173 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-31 02:35:43,178 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2038 states to 2038 states and 2474 transitions.
[2020-05-31 02:35:43,178 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:43,178 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:43,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2038 states and 2474 transitions.
[2020-05-31 02:35:43,179 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:43,179 INFO  L728         BuchiCegarLoop]: Abstraction has 2038 states and 2474 transitions.
[2020-05-31 02:35:43,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2038 states and 2474 transitions.
[2020-05-31 02:35:43,191 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2038 to 2007.
[2020-05-31 02:35:43,191 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2007 states.
[2020-05-31 02:35:43,193 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2007 states to 2007 states and 2399 transitions.
[2020-05-31 02:35:43,193 INFO  L751         BuchiCegarLoop]: Abstraction has 2007 states and 2399 transitions.
[2020-05-31 02:35:43,193 INFO  L631         BuchiCegarLoop]: Abstraction has 2007 states and 2399 transitions.
[2020-05-31 02:35:43,193 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 02:35:43,193 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2007 states and 2399 transitions.
[2020-05-31 02:35:43,194 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:35:43,195 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:43,195 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:43,196 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:43,196 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:43,200 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:43,200 INFO  L82        PathProgramCache]: Analyzing trace with hash -1034118174, now seen corresponding path program 1 times
[2020-05-31 02:35:43,201 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:43,216 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:43,280 INFO  L134       CoverageAnalysis]: Checked inductivity of 181 backedges. 23 proven. 94 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-05-31 02:35:43,281 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:43,281 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-31 02:35:43,281 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:43,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:35:43,281 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:35:43,281 INFO  L87              Difference]: Start difference. First operand 2007 states and 2399 transitions. cyclomatic complexity: 407 Second operand 12 states.
[2020-05-31 02:35:43,529 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:43,529 INFO  L93              Difference]: Finished difference Result 1848 states and 2128 transitions.
[2020-05-31 02:35:43,529 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:35:43,529 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1848 states and 2128 transitions.
[2020-05-31 02:35:43,532 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:43,536 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1848 states to 1815 states and 2092 transitions.
[2020-05-31 02:35:43,536 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:43,536 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:43,536 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1815 states and 2092 transitions.
[2020-05-31 02:35:43,537 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:43,537 INFO  L728         BuchiCegarLoop]: Abstraction has 1815 states and 2092 transitions.
[2020-05-31 02:35:43,538 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1815 states and 2092 transitions.
[2020-05-31 02:35:43,548 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1815 to 1808.
[2020-05-31 02:35:43,548 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1808 states.
[2020-05-31 02:35:43,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1808 states to 1808 states and 2082 transitions.
[2020-05-31 02:35:43,550 INFO  L751         BuchiCegarLoop]: Abstraction has 1808 states and 2082 transitions.
[2020-05-31 02:35:43,550 INFO  L631         BuchiCegarLoop]: Abstraction has 1808 states and 2082 transitions.
[2020-05-31 02:35:43,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 02:35:43,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1808 states and 2082 transitions.
[2020-05-31 02:35:43,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:43,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:43,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:43,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:43,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND FALSE  !(choice == 3)
[L1274]      COND FALSE  !(choice == 2)
[L1283]      COND TRUE   choice == 1
[L1285]                  gas := gas - 21000;
[L1286]      COND TRUE   gas >= 0
[L1288]                  assume msgvalue_MSG == 0;
[L1289]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND FALSE  !(gas > 2300)
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L1289]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:43,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:43,556 INFO  L82        PathProgramCache]: Analyzing trace with hash -133914545, now seen corresponding path program 1 times
[2020-05-31 02:35:43,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:43,577 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:43,661 INFO  L134       CoverageAnalysis]: Checked inductivity of 235 backedges. 12 proven. 7 refuted. 0 times theorem prover too weak. 216 trivial. 0 not checked.
[2020-05-31 02:35:43,661 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:43,661 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-31 02:35:43,662 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:43,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:35:43,662 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:35:43,662 INFO  L87              Difference]: Start difference. First operand 1808 states and 2082 transitions. cyclomatic complexity: 287 Second operand 10 states.
[2020-05-31 02:35:43,866 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:43,866 INFO  L93              Difference]: Finished difference Result 2150 states and 2623 transitions.
[2020-05-31 02:35:43,866 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:35:43,867 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2150 states and 2623 transitions.
[2020-05-31 02:35:43,869 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-31 02:35:43,874 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2150 states to 2102 states and 2559 transitions.
[2020-05-31 02:35:43,874 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:43,874 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:43,874 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2102 states and 2559 transitions.
[2020-05-31 02:35:43,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:43,875 INFO  L728         BuchiCegarLoop]: Abstraction has 2102 states and 2559 transitions.
[2020-05-31 02:35:43,876 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2102 states and 2559 transitions.
[2020-05-31 02:35:43,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2102 to 1808.
[2020-05-31 02:35:43,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1808 states.
[2020-05-31 02:35:43,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1808 states to 1808 states and 2078 transitions.
[2020-05-31 02:35:43,891 INFO  L751         BuchiCegarLoop]: Abstraction has 1808 states and 2078 transitions.
[2020-05-31 02:35:43,891 INFO  L631         BuchiCegarLoop]: Abstraction has 1808 states and 2078 transitions.
[2020-05-31 02:35:43,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 02:35:43,891 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1808 states and 2078 transitions.
[2020-05-31 02:35:43,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:35:43,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:43,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:43,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:43,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND FALSE  !(choice == 3)
[L1274]      COND FALSE  !(choice == 2)
[L1283]      COND TRUE   choice == 1
[L1285]                  gas := gas - 21000;
[L1286]      COND TRUE   gas >= 0
[L1288]                  assume msgvalue_MSG == 0;
[L1289]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND TRUE   gas > 2300
[L884]                   gas := 2300;
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L1289]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:43,897 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:43,897 INFO  L82        PathProgramCache]: Analyzing trace with hash -1948931802, now seen corresponding path program 1 times
[2020-05-31 02:35:43,898 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:43,917 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:44,055 INFO  L134       CoverageAnalysis]: Checked inductivity of 235 backedges. 61 proven. 12 refuted. 0 times theorem prover too weak. 162 trivial. 0 not checked.
[2020-05-31 02:35:44,055 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:44,055 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-05-31 02:35:44,055 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:44,056 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 02:35:44,056 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-05-31 02:35:44,056 INFO  L87              Difference]: Start difference. First operand 1808 states and 2078 transitions. cyclomatic complexity: 283 Second operand 18 states.
[2020-05-31 02:35:44,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:44,818 INFO  L93              Difference]: Finished difference Result 2017 states and 2402 transitions.
[2020-05-31 02:35:44,818 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:35:44,818 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2017 states and 2402 transitions.
[2020-05-31 02:35:44,821 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-05-31 02:35:44,825 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2017 states to 1845 states and 2125 transitions.
[2020-05-31 02:35:44,825 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:44,825 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:44,825 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1845 states and 2125 transitions.
[2020-05-31 02:35:44,826 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:44,826 INFO  L728         BuchiCegarLoop]: Abstraction has 1845 states and 2125 transitions.
[2020-05-31 02:35:44,827 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1845 states and 2125 transitions.
[2020-05-31 02:35:44,835 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1845 to 1809.
[2020-05-31 02:35:44,835 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1809 states.
[2020-05-31 02:35:44,837 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1809 states to 1809 states and 2088 transitions.
[2020-05-31 02:35:44,837 INFO  L751         BuchiCegarLoop]: Abstraction has 1809 states and 2088 transitions.
[2020-05-31 02:35:44,837 INFO  L631         BuchiCegarLoop]: Abstraction has 1809 states and 2088 transitions.
[2020-05-31 02:35:44,837 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 02:35:44,837 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1809 states and 2088 transitions.
[2020-05-31 02:35:44,838 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-05-31 02:35:44,838 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:44,838 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:44,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:44,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume to == user && amount >= val;
[L7]                     success_send__success0 := true;
[L7]                     success_send__success0 := false;
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:44,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:44,843 INFO  L82        PathProgramCache]: Analyzing trace with hash -1837173573, now seen corresponding path program 1 times
[2020-05-31 02:35:44,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:44,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:44,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 189 backedges. 3 proven. 74 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-05-31 02:35:44,961 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:44,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-31 02:35:44,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:44,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 02:35:44,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-05-31 02:35:44,961 INFO  L87              Difference]: Start difference. First operand 1809 states and 2088 transitions. cyclomatic complexity: 295 Second operand 13 states.
[2020-05-31 02:35:45,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:45,242 INFO  L93              Difference]: Finished difference Result 1813 states and 2084 transitions.
[2020-05-31 02:35:45,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:35:45,242 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1813 states and 2084 transitions.
[2020-05-31 02:35:45,244 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-05-31 02:35:45,248 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1813 states to 1804 states and 2070 transitions.
[2020-05-31 02:35:45,248 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:35:45,248 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:35:45,248 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1804 states and 2070 transitions.
[2020-05-31 02:35:45,249 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:45,249 INFO  L728         BuchiCegarLoop]: Abstraction has 1804 states and 2070 transitions.
[2020-05-31 02:35:45,250 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1804 states and 2070 transitions.
[2020-05-31 02:35:45,260 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1804 to 1756.
[2020-05-31 02:35:45,260 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1756 states.
[2020-05-31 02:35:45,261 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1756 states to 1756 states and 2011 transitions.
[2020-05-31 02:35:45,261 INFO  L751         BuchiCegarLoop]: Abstraction has 1756 states and 2011 transitions.
[2020-05-31 02:35:45,261 INFO  L631         BuchiCegarLoop]: Abstraction has 1756 states and 2011 transitions.
[2020-05-31 02:35:45,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 02:35:45,262 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1756 states and 2011 transitions.
[2020-05-31 02:35:45,263 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-05-31 02:35:45,263 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:45,263 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:45,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:45,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:45,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:45,267 INFO  L82        PathProgramCache]: Analyzing trace with hash -71855997, now seen corresponding path program 1 times
[2020-05-31 02:35:45,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:45,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:45,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 189 backedges. 95 proven. 88 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:35:45,730 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:45,730 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-05-31 02:35:45,731 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:45,731 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-05-31 02:35:45,731 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=179, Invalid=1983, Unknown=0, NotChecked=0, Total=2162
[2020-05-31 02:35:45,732 INFO  L87              Difference]: Start difference. First operand 1756 states and 2011 transitions. cyclomatic complexity: 270 Second operand 47 states.
[2020-05-31 02:35:47,705 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:47,705 INFO  L93              Difference]: Finished difference Result 1889 states and 2305 transitions.
[2020-05-31 02:35:47,706 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-05-31 02:35:47,706 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1889 states and 2305 transitions.
[2020-05-31 02:35:47,709 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 18
[2020-05-31 02:35:47,714 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1889 states to 1889 states and 2305 transitions.
[2020-05-31 02:35:47,714 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:35:47,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:35:47,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1889 states and 2305 transitions.
[2020-05-31 02:35:47,715 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:47,715 INFO  L728         BuchiCegarLoop]: Abstraction has 1889 states and 2305 transitions.
[2020-05-31 02:35:47,716 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1889 states and 2305 transitions.
[2020-05-31 02:35:47,726 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1889 to 1857.
[2020-05-31 02:35:47,726 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1857 states.
[2020-05-31 02:35:47,728 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1857 states to 1857 states and 2240 transitions.
[2020-05-31 02:35:47,729 INFO  L751         BuchiCegarLoop]: Abstraction has 1857 states and 2240 transitions.
[2020-05-31 02:35:47,729 INFO  L631         BuchiCegarLoop]: Abstraction has 1857 states and 2240 transitions.
[2020-05-31 02:35:47,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 02:35:47,729 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1857 states and 2240 transitions.
[2020-05-31 02:35:47,730 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 18
[2020-05-31 02:35:47,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:47,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:47,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:47,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:47,735 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:47,735 INFO  L82        PathProgramCache]: Analyzing trace with hash -3827029, now seen corresponding path program 1 times
[2020-05-31 02:35:47,736 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:47,754 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:48,117 INFO  L134       CoverageAnalysis]: Checked inductivity of 209 backedges. 49 proven. 90 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-05-31 02:35:48,118 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:48,118 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-05-31 02:35:48,118 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:48,118 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-05-31 02:35:48,118 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=157, Invalid=1403, Unknown=0, NotChecked=0, Total=1560
[2020-05-31 02:35:48,118 INFO  L87              Difference]: Start difference. First operand 1857 states and 2240 transitions. cyclomatic complexity: 401 Second operand 40 states.
[2020-05-31 02:35:49,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:49,860 INFO  L93              Difference]: Finished difference Result 1885 states and 2363 transitions.
[2020-05-31 02:35:49,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-05-31 02:35:49,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1885 states and 2363 transitions.
[2020-05-31 02:35:49,864 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-05-31 02:35:49,869 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1885 states to 1868 states and 2294 transitions.
[2020-05-31 02:35:49,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:35:49,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:35:49,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1868 states and 2294 transitions.
[2020-05-31 02:35:49,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:49,870 INFO  L728         BuchiCegarLoop]: Abstraction has 1868 states and 2294 transitions.
[2020-05-31 02:35:49,871 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1868 states and 2294 transitions.
[2020-05-31 02:35:49,881 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1868 to 1857.
[2020-05-31 02:35:49,881 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1857 states.
[2020-05-31 02:35:49,884 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1857 states to 1857 states and 2260 transitions.
[2020-05-31 02:35:49,884 INFO  L751         BuchiCegarLoop]: Abstraction has 1857 states and 2260 transitions.
[2020-05-31 02:35:49,884 INFO  L631         BuchiCegarLoop]: Abstraction has 1857 states and 2260 transitions.
[2020-05-31 02:35:49,884 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 02:35:49,884 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1857 states and 2260 transitions.
[2020-05-31 02:35:49,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-05-31 02:35:49,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:49,886 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:49,887 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:49,887 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:49,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:49,891 INFO  L82        PathProgramCache]: Analyzing trace with hash 321428336, now seen corresponding path program 1 times
[2020-05-31 02:35:49,891 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:49,913 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:50,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 314 backedges. 90 proven. 186 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-05-31 02:35:50,781 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:50,781 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [53] total 53
[2020-05-31 02:35:50,781 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:50,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 54 interpolants.
[2020-05-31 02:35:50,782 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=224, Invalid=2638, Unknown=0, NotChecked=0, Total=2862
[2020-05-31 02:35:50,782 INFO  L87              Difference]: Start difference. First operand 1857 states and 2260 transitions. cyclomatic complexity: 422 Second operand 54 states.
[2020-05-31 02:35:54,027 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:54,027 INFO  L93              Difference]: Finished difference Result 1883 states and 2362 transitions.
[2020-05-31 02:35:54,027 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-05-31 02:35:54,027 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1883 states and 2362 transitions.
[2020-05-31 02:35:54,031 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 30
[2020-05-31 02:35:54,036 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1883 states to 1873 states and 2318 transitions.
[2020-05-31 02:35:54,036 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:35:54,036 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:35:54,036 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1873 states and 2318 transitions.
[2020-05-31 02:35:54,037 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:54,037 INFO  L728         BuchiCegarLoop]: Abstraction has 1873 states and 2318 transitions.
[2020-05-31 02:35:54,038 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1873 states and 2318 transitions.
[2020-05-31 02:35:54,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1873 to 1861.
[2020-05-31 02:35:54,049 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1861 states.
[2020-05-31 02:35:54,051 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1861 states to 1861 states and 2272 transitions.
[2020-05-31 02:35:54,051 INFO  L751         BuchiCegarLoop]: Abstraction has 1861 states and 2272 transitions.
[2020-05-31 02:35:54,051 INFO  L631         BuchiCegarLoop]: Abstraction has 1861 states and 2272 transitions.
[2020-05-31 02:35:54,051 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-31 02:35:54,051 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1861 states and 2272 transitions.
[2020-05-31 02:35:54,053 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 26
[2020-05-31 02:35:54,053 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:54,053 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:54,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:54,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:54,058 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:54,058 INFO  L82        PathProgramCache]: Analyzing trace with hash 855506366, now seen corresponding path program 2 times
[2020-05-31 02:35:54,059 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:54,084 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:54,722 INFO  L134       CoverageAnalysis]: Checked inductivity of 325 backedges. 44 proven. 204 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-31 02:35:54,722 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:54,722 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-05-31 02:35:54,722 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:54,722 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-05-31 02:35:54,723 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=227, Invalid=2223, Unknown=0, NotChecked=0, Total=2450
[2020-05-31 02:35:54,723 INFO  L87              Difference]: Start difference. First operand 1861 states and 2272 transitions. cyclomatic complexity: 426 Second operand 50 states.
[2020-05-31 02:35:56,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:56,933 INFO  L93              Difference]: Finished difference Result 1899 states and 2401 transitions.
[2020-05-31 02:35:56,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-31 02:35:56,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1899 states and 2401 transitions.
[2020-05-31 02:35:56,937 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-05-31 02:35:56,940 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1899 states to 1867 states and 2280 transitions.
[2020-05-31 02:35:56,940 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:35:56,940 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:35:56,940 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1867 states and 2280 transitions.
[2020-05-31 02:35:56,941 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:56,941 INFO  L728         BuchiCegarLoop]: Abstraction has 1867 states and 2280 transitions.
[2020-05-31 02:35:56,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1867 states and 2280 transitions.
[2020-05-31 02:35:56,950 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1867 to 1845.
[2020-05-31 02:35:56,950 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1845 states.
[2020-05-31 02:35:56,951 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1845 states to 1845 states and 2203 transitions.
[2020-05-31 02:35:56,951 INFO  L751         BuchiCegarLoop]: Abstraction has 1845 states and 2203 transitions.
[2020-05-31 02:35:56,951 INFO  L631         BuchiCegarLoop]: Abstraction has 1845 states and 2203 transitions.
[2020-05-31 02:35:56,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-31 02:35:56,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1845 states and 2203 transitions.
[2020-05-31 02:35:56,953 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-05-31 02:35:56,953 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:56,953 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:56,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:56,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1302]                  assume null == 0;
[L1303]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1303]      RET         call this := FreshRefGenerator__success();
[L1304]                  assume now >= 0;
[L1305]                  assume DType[this] == SimpleAuction;
[L1306]                  gas := gas - 53000;
[L1307]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1307]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1308]                  assume !revert && gas >= 0;
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND TRUE   Balance[from] >= amount
[L1219]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1028]                  assume Balance[from] >= amount;
[L1029]                  Balance[from] := Balance[from] - amount;
[L1030]                  Balance[to] := Balance[to] + amount;
[L1031]      COND FALSE  !(choice == 0)
[L1037]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1219]      RET         call FallbackDispatch__success(from, to, amount);
[L1220]                  success := true;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND TRUE   choice == 4
[L1258]                  gas := gas - 21000;
[L1259]      COND TRUE   gas >= 0
[L1261]                  assume msgvalue_MSG >= 0;
[L1262]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1262]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);
[L1311]      CALL        call CorralChoice_SimpleAuction(this);
[L1242]                  havoc msgsender_MSG;
[L1243]                  havoc msgvalue_MSG;
[L1244]                  havoc choice;
[L1245]                  havoc __ret_0_withdraw;
[L1246]                  havoc __ret_0_auctionEndTime;
[L1247]                  havoc tmpNow;
[L1248]                  havoc gas;
[L1249]                  assume gas > 4000000 && gas <= 8000000;
[L1250]                  tmpNow := now;
[L1251]                  havoc now;
[L1252]                  assume now > tmpNow;
[L1253]                  assume msgsender_MSG != null;
[L1254]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1255]                  Alloc[msgsender_MSG] := true;
[L1256]      COND FALSE  !(choice == 4)
[L1265]      COND TRUE   choice == 3
[L1267]                  gas := gas - 21000;
[L1268]      COND TRUE   gas >= 0
[L1270]                  assume msgvalue_MSG == 0;
[L1271]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1187]                  havoc __exception;
[L1188]      COND FALSE  !(__exception)
[L1217]      COND FALSE  !(Balance[from] >= amount)
[L1224]                  success := false;
[L1227]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1271]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1311]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:35:56,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:56,958 INFO  L82        PathProgramCache]: Analyzing trace with hash -1495564926, now seen corresponding path program 2 times
[2020-05-31 02:35:56,958 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:56,976 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:57,349 INFO  L134       CoverageAnalysis]: Checked inductivity of 316 backedges. 109 proven. 147 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-05-31 02:35:57,349 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:57,349 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-05-31 02:35:57,350 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:57,350 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-05-31 02:35:57,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=133, Invalid=1759, Unknown=0, NotChecked=0, Total=1892
[2020-05-31 02:35:57,351 INFO  L87              Difference]: Start difference. First operand 1845 states and 2203 transitions. cyclomatic complexity: 371 Second operand 44 states.
[2020-05-31 02:35:59,012 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:59,013 INFO  L93              Difference]: Finished difference Result 1858 states and 2189 transitions.
[2020-05-31 02:35:59,013 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-31 02:35:59,013 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1858 states and 2189 transitions.
[2020-05-31 02:35:59,016 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:35:59,016 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1858 states to 0 states and 0 transitions.
[2020-05-31 02:35:59,016 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:35:59,016 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:35:59,016 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:35:59,016 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:59,016 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:35:59,016 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:35:59,017 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:35:59,017 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-31 02:35:59,017 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:35:59,017 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:35:59,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:35:59,020 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:35:59 BasicIcfg
[2020-05-31 02:35:59,020 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:35:59,020 INFO  L168              Benchmark]: Toolchain (without parser) took 34390.19 ms. Allocated memory was 514.9 MB in the beginning and 2.0 GB in the end (delta: 1.5 GB). Free memory was 461.5 MB in the beginning and 1.3 GB in the end (delta: -824.8 MB). Peak memory consumption was 685.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,021 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,021 INFO  L168              Benchmark]: Boogie Preprocessor took 56.96 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,022 INFO  L168              Benchmark]: UtopiaSpecLang took 36.75 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,022 INFO  L168              Benchmark]: Boogie Printer took 7.96 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,023 INFO  L168              Benchmark]: RCFGBuilder took 342.85 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 415.6 MB in the end (delta: 36.5 MB). Peak memory consumption was 36.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,023 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.74 ms. Allocated memory is still 514.9 MB. Free memory was 415.6 MB in the beginning and 411.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,023 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1036.16 ms. Allocated memory was 514.9 MB in the beginning and 578.8 MB in the end (delta: 64.0 MB). Free memory was 411.1 MB in the beginning and 499.4 MB in the end (delta: -88.3 MB). Peak memory consumption was 77.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,023 INFO  L168              Benchmark]: BlockEncodingV2 took 95.24 ms. Allocated memory is still 578.8 MB. Free memory was 499.4 MB in the beginning and 469.3 MB in the end (delta: 30.1 MB). Peak memory consumption was 30.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,024 INFO  L168              Benchmark]: BuchiAutomizer took 32772.71 ms. Allocated memory was 578.8 MB in the beginning and 2.0 GB in the end (delta: 1.4 GB). Free memory was 469.3 MB in the beginning and 1.3 GB in the end (delta: -817.1 MB). Peak memory consumption was 628.9 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:59,027 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2071 locations, 4591 edges
  - StatisticsResult: Encoded RCFG
    2052 locations, 4532 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 56.96 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 36.75 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 7.96 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 342.85 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 415.6 MB in the end (delta: 36.5 MB). Peak memory consumption was 36.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.74 ms. Allocated memory is still 514.9 MB. Free memory was 415.6 MB in the beginning and 411.1 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1036.16 ms. Allocated memory was 514.9 MB in the beginning and 578.8 MB in the end (delta: 64.0 MB). Free memory was 411.1 MB in the beginning and 499.4 MB in the end (delta: -88.3 MB). Peak memory consumption was 77.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 95.24 ms. Allocated memory is still 578.8 MB. Free memory was 499.4 MB in the beginning and 469.3 MB in the end (delta: 30.1 MB). Peak memory consumption was 30.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 32772.71 ms. Allocated memory was 578.8 MB in the beginning and 2.0 GB in the end (delta: 1.4 GB). Free memory was 469.3 MB in the beginning and 1.3 GB in the end (delta: -817.1 MB). Peak memory consumption was 628.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    3 locations, 6 edges
  - StatisticsResult: Initial RCFG
    617 locations, 750 edges
  - StatisticsResult: BuchiProgram size
    2071 locations, 4591 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 26 terminating modules (26 trivial, 0 deterministic, 0 nondeterministic). 26 modules have a trivial ranking function, the largest among these consists of 54 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 32.7s and 27 iterations.  TraceHistogramMax:5. Analysis of lassos took 6.3s. Construction of modules took 17.9s. BÃ¼chi inclusion checks took 7.3s. Highest rank in rank-based complementation 0. Minimization of det autom 26. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 25 MinimizatonAttempts, 1929 StatesRemovedByMinimization, 23 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 2007 states and ocurred in iteration 16.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 34813 SDtfs, 66119 SDslu, 201338 SDs, 0 SdLazy, 236192 SolverSat, 8957 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 17.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI4 SFLT0 conc3 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( []( <>(success_withdraw_SimpleAuction0) ) )&& ! ( ( []( (success_bid_SimpleAuction0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
