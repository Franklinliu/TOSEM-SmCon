This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:38:22,807 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:38:22,808 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:38:22,819 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:38:22,819 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:38:22,820 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:38:22,822 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:38:22,823 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:38:22,825 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:38:22,826 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:38:22,827 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:38:22,827 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:38:22,829 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:38:22,830 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:38:22,831 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:38:22,832 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:38:22,833 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:38:22,834 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:38:22,836 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:38:22,837 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:38:22,838 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:38:22,839 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:38:22,841 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:38:22,841 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:38:22,841 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:38:22,842 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:38:22,842 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:38:22,843 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:38:22,844 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:38:22,844 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:38:22,844 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:38:22,845 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:38:22,846 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:38:22,846 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:38:22,847 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:38:22,848 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:38:22,848 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:38:22,849 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:38:22,849 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:38:22,849 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:38:22,850 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:38:22,854 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:38:22,854 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:38:22,863 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:38:22,864 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:38:22,865 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:38:22,865 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:38:22,865 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:38:22,865 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:38:22,865 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:38:22,865 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:38:22,865 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:38:22,865 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:38:22,865 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:38:22,866 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:38:22,866 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:38:22,867 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:38:22,867 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:38:22,867 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:38:22,885 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:38:22,895 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:38:22,898 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:38:22,898 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:38:22,899 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:38:22,900 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/inf-callback/L2-SimpleAuction.bpl
[2020-05-31 02:38:22,900 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/inf-callback/L2-SimpleAuction.bpl'
[2020-05-31 02:38:22,940 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:38:22,941 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:38:22,942 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:38:22,942 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:38:22,942 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:38:22,954 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,955 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,973 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,973 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,986 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,991 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,994 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:22,999 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:38:22,999 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:38:23,000 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:38:23,002 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:38:23,004 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/1) ...
[2020-05-31 02:38:23,013 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:38:23,018 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:38:23,023 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:38:23,026 INFO  L599   opiaSpecLangObserver]: Parsed ( user==highestBidder_SimpleAuction[this] && val==msg.value ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],ArrayAccessExpression[IdentifierExpression[highestBidder_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]],BinaryExpression[COMPEQ,IdentifierExpression[val,GLOBAL],IdentifierExpression[msgvalue_MSG,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]
[2020-05-31 02:38:23,028 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==val ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[val,GLOBAL]]]
[2020-05-31 02:38:23,028 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(SimpleAuction.bid, (user == highestBidder_SimpleAuction[this] && val == msg.value)) && (X([](!finished(SimpleAuction.bid))))) ==> (<>(finished(send(from, to, amt), (to == ben && amt == val)))))
[2020-05-31 02:38:23,028 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( ( AP(success_bid_SimpleAuction0) && ( X( []( !AP(success_bid_SimpleAuction1) ) ) ) ) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:38:23,028 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:38:23,029 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:38:23,029 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:38:23,030 INFO  L599   opiaSpecLangObserver]: Parsed ben==beneficiary_SimpleAuction[this] to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiary_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,auctionEnd_SimpleAuction>]]]]
[2020-05-31 02:38:23,030 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(SimpleAuction.auctionEnd, (ben == beneficiary_SimpleAuction[this])))
[2020-05-31 02:38:23,031 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_auctionEnd_SimpleAuction0) )
Executed UtopiaSpecLang
[2020-05-31 02:38:23,035 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:23 PropertyContainer
[2020-05-31 02:38:23,035 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:38:23,036 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:38:23,036 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:38:23,036 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:38:23,037 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/2) ...
[2020-05-31 02:38:23,037 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:38:23,037 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:38:23,044 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:23" (2/2) ...
[2020-05-31 02:38:23,044 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:38:23,045 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:38:23,045 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:38:23,045 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:38:23,046 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/2) ...
[2020-05-31 02:38:23,087 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:38:23,088 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:38:23,088 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:38:23,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:38:23,088 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction
[2020-05-31 02:38:23,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction
[2020-05-31 02:38:23,088 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction
[2020-05-31 02:38:23,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction
[2020-05-31 02:38:23,088 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:38:23,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:38:23,089 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction
[2020-05-31 02:38:23,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction
[2020-05-31 02:38:23,089 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:38:23,089 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:38:23,089 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:38:23,089 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SimpleAuction
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__success
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__fail
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__success
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:38:23,090 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:38:23,091 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:38:23,091 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:38:23,091 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:38:23,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SimpleAuction
[2020-05-31 02:38:23,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:38:23,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:38:23,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:38:23,213 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:23,227 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:23,324 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:23,373 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:38:23,385 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:38:23,385 INFO  L286             CfgBuilder]: Removed 1 assue(true) statements.
[2020-05-31 02:38:23,386 INFO  L202        PluginConnector]: Adding new model L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:23 BoogieIcfgContainer
[2020-05-31 02:38:23,387 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:23" (2/2) ...
[2020-05-31 02:38:23,387 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:38:23,387 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7ce2b496 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:23, skipping insertion in model container
[2020-05-31 02:38:23,387 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:38:23,387 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:38:23,388 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:38:23,389 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:38:23,389 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/3) ...
[2020-05-31 02:38:23,389 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5b7adcb5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:23, skipping insertion in model container
[2020-05-31 02:38:23,389 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:23" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( <>a ) && ! ( ( [] ( ( b && ( X ( [] ( !c ) ) ) ) -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:38:23,424 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:23 NWAContainer
[2020-05-31 02:38:23,424 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:38:23,424 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:38:23,424 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:38:23,425 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:38:23,426 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:23" (3/4) ...
[2020-05-31 02:38:23,426 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@274367d9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:23, skipping insertion in model container
[2020-05-31 02:38:23,426 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:23" (4/4) ...
[2020-05-31 02:38:23,429 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-31 02:38:23,430 INFO  L110   BuchiProductObserver]: Initial RCFG 638 locations, 773 edges
[2020-05-31 02:38:23,431 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:38:23,439 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:38:24,945 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:38:24,950 INFO  L110   BuchiProductObserver]: BuchiProgram size 2842 locations, 7145 edges
[2020-05-31 02:38:24,950 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:24 BoogieIcfgContainer
[2020-05-31 02:38:24,950 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:38:24,950 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:38:24,951 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:38:24,952 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:38:24,953 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:24" (1/1) ...
[2020-05-31 02:38:25,019 INFO  L313           BlockEncoder]: Initial Icfg 2842 locations, 7145 edges
[2020-05-31 02:38:25,019 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:38:25,020 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:38:25,020 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:38:25,020 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:38:25,032 INFO  L70    emoveInfeasibleEdges]: Removed 58 edges and 10 locations because of local infeasibility
[2020-05-31 02:38:25,038 INFO  L70        RemoveSinkStates]: Removed 34 edges and 12 locations by removing sink states
[2020-05-31 02:38:25,048 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:38:25,052 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:38:25,056 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:38:25,056 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:38:25,059 INFO  L313           BlockEncoder]: Encoded RCFG 2808 locations, 7031 edges
[2020-05-31 02:38:25,060 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:38:25 BasicIcfg
[2020-05-31 02:38:25,060 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:38:25,060 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:38:25,060 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:38:25,064 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:38:25,064 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:25,064 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:38:22" (1/6) ...
[2020-05-31 02:38:25,066 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@206d91ed and model type L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:38:25, skipping insertion in model container
[2020-05-31 02:38:25,066 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:25,066 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:38:23" (2/6) ...
[2020-05-31 02:38:25,066 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@206d91ed and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:38:25, skipping insertion in model container
[2020-05-31 02:38:25,066 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:25,067 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:38:23" (3/6) ...
[2020-05-31 02:38:25,067 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@206d91ed and model type L2-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:38:25, skipping insertion in model container
[2020-05-31 02:38:25,067 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:25,067 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:38:23" (4/6) ...
[2020-05-31 02:38:25,068 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@206d91ed and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:38:25, skipping insertion in model container
[2020-05-31 02:38:25,068 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:25,068 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:38:24" (5/6) ...
[2020-05-31 02:38:25,068 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@206d91ed and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:38:25, skipping insertion in model container
[2020-05-31 02:38:25,068 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:38:25,069 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:38:25" (6/6) ...
[2020-05-31 02:38:25,070 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-SimpleAuction.bpl_BEv2
[2020-05-31 02:38:25,106 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:38:25,106 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:38:25,106 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:38:25,106 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:38:25,106 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:38:25,106 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:38:25,106 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:38:25,107 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:38:25,107 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:38:25,138 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2808 states.
[2020-05-31 02:38:25,201 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 93
[2020-05-31 02:38:25,202 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:25,202 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:25,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:25,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:25,211 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:38:25,211 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2808 states.
[2020-05-31 02:38:25,242 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 93
[2020-05-31 02:38:25,242 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:25,242 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:25,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:25,245 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND FALSE  !(gas >= 0)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:25,264 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:25,264 INFO  L82        PathProgramCache]: Analyzing trace with hash -516321706, now seen corresponding path program 1 times
[2020-05-31 02:38:25,267 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:25,293 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:25,345 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:38:25,348 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:25,348 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:38:25,352 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:25,529 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:38:25,530 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:38:25,532 INFO  L87              Difference]: Start difference. First operand 2808 states. Second operand 4 states.
[2020-05-31 02:38:26,190 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:26,190 INFO  L93              Difference]: Finished difference Result 2564 states and 4255 transitions.
[2020-05-31 02:38:26,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:38:26,192 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2564 states and 4255 transitions.
[2020-05-31 02:38:26,210 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 93
[2020-05-31 02:38:26,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2564 states to 2560 states and 4247 transitions.
[2020-05-31 02:38:26,246 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-31 02:38:26,247 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 58
[2020-05-31 02:38:26,248 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2560 states and 4247 transitions.
[2020-05-31 02:38:26,261 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:26,261 INFO  L728         BuchiCegarLoop]: Abstraction has 2560 states and 4247 transitions.
[2020-05-31 02:38:26,283 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2560 states and 4247 transitions.
[2020-05-31 02:38:26,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2560 to 2560.
[2020-05-31 02:38:26,332 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2560 states.
[2020-05-31 02:38:26,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2560 states to 2560 states and 4247 transitions.
[2020-05-31 02:38:26,338 INFO  L751         BuchiCegarLoop]: Abstraction has 2560 states and 4247 transitions.
[2020-05-31 02:38:26,338 INFO  L631         BuchiCegarLoop]: Abstraction has 2560 states and 4247 transitions.
[2020-05-31 02:38:26,339 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:38:26,339 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2560 states and 4247 transitions.
[2020-05-31 02:38:26,347 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 93
[2020-05-31 02:38:26,347 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:26,347 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:26,349 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:26,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND TRUE   revert
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL       call CorralChoice_SimpleAuction(this);
[L1262]                 havoc msgsender_MSG;
[L1263]                 havoc msgvalue_MSG;
[L1264]                 havoc choice;
[L1265]                 havoc __ret_0_withdraw;
[L1266]                 havoc __ret_0_auctionEndTime;
[L1267]                 havoc tmpNow;
[L1268]                 havoc gas;
[L1269]                 assume gas > 4000000 && gas <= 8000000;
[L1270]                 tmpNow := now;
[L1271]                 havoc now;
[L1272]                 assume now > tmpNow;
[L1273]                 assume msgsender_MSG != null;
[L1274]                 assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                 Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE  choice == 4
[L1278]                 gas := gas - 21000;
[L1279]      COND TRUE  gas >= 0
[L1281]                 assume msgvalue_MSG >= 0;
[L1282]      CALL       call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                  havoc __exception;
[L150]                  revert := false;
[L151]       COND TRUE  __exception
[L153]                  __tmp__Balance := Balance;
[L154]                  __tmp__DType := DType;
[L155]                  __tmp__Alloc := Alloc;
[L156]                  __tmp__balance_ADDR := balance_ADDR;
[L157]                  __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L158]                  __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L159]                  __tmp__Length := Length;
[L160]                  __tmp__now := now;
[L161]                  __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L162]                  __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L163]                  __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L164]                  __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L165]                  __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L166]                  __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L167]                  __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L168]                  __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L169]       CALL       call bid_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L556]                  assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L557]                  __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L558]                  __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L559]                  gas := gas - 437;
[L560]                  assume __tmp__now >= 0;
[L561]                  assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L562]                  assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L563-L564]             assume __tmp__auctionStart_SimpleAuction[this] + __tmp__biddingTime_SimpleAuction[this] >= 0;
[L565-L566]  COND TRUE  !(__tmp__now <= __tmp__auctionStart_SimpleAuction[this] + __tmp__biddingTime_SimpleAuction[this])
[L568]                  revert := true;
[L169]       RET        call bid_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L170]                  assume revert || gas < 0;
[L1282]      RET        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET        call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:26,352 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:26,353 INFO  L82        PathProgramCache]: Analyzing trace with hash 848148088, now seen corresponding path program 1 times
[2020-05-31 02:38:26,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:26,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:26,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:38:26,396 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:26,396 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:38:26,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:26,397 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:38:26,397 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:38:26,397 INFO  L87              Difference]: Start difference. First operand 2560 states and 4247 transitions. cyclomatic complexity: 1699 Second operand 4 states.
[2020-05-31 02:38:27,102 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:27,102 INFO  L93              Difference]: Finished difference Result 3320 states and 5510 transitions.
[2020-05-31 02:38:27,102 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:38:27,103 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3320 states and 5510 transitions.
[2020-05-31 02:38:27,116 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 99
[2020-05-31 02:38:27,136 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3320 states to 3204 states and 5307 transitions.
[2020-05-31 02:38:27,136 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 87
[2020-05-31 02:38:27,136 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 87
[2020-05-31 02:38:27,137 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3204 states and 5307 transitions.
[2020-05-31 02:38:27,145 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:27,145 INFO  L728         BuchiCegarLoop]: Abstraction has 3204 states and 5307 transitions.
[2020-05-31 02:38:27,148 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3204 states and 5307 transitions.
[2020-05-31 02:38:27,182 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3204 to 2678.
[2020-05-31 02:38:27,182 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2678 states.
[2020-05-31 02:38:27,187 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2678 states to 2678 states and 4348 transitions.
[2020-05-31 02:38:27,187 INFO  L751         BuchiCegarLoop]: Abstraction has 2678 states and 4348 transitions.
[2020-05-31 02:38:27,187 INFO  L631         BuchiCegarLoop]: Abstraction has 2678 states and 4348 transitions.
[2020-05-31 02:38:27,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:38:27,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2678 states and 4348 transitions.
[2020-05-31 02:38:27,193 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 95
[2020-05-31 02:38:27,193 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:27,193 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:27,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:27,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND FALSE  !(gas >= 0)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:27,198 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:27,198 INFO  L82        PathProgramCache]: Analyzing trace with hash 1494630204, now seen corresponding path program 1 times
[2020-05-31 02:38:27,199 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:27,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:27,231 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:27,231 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:27,231 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:38:27,232 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:27,232 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:38:27,232 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:38:27,232 INFO  L87              Difference]: Start difference. First operand 2678 states and 4348 transitions. cyclomatic complexity: 1682 Second operand 4 states.
[2020-05-31 02:38:27,686 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:27,686 INFO  L93              Difference]: Finished difference Result 2556 states and 2884 transitions.
[2020-05-31 02:38:27,687 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:38:27,687 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2556 states and 2884 transitions.
[2020-05-31 02:38:27,693 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 95
[2020-05-31 02:38:27,699 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2556 states to 2556 states and 2884 transitions.
[2020-05-31 02:38:27,700 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 67
[2020-05-31 02:38:27,700 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 67
[2020-05-31 02:38:27,700 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2556 states and 2884 transitions.
[2020-05-31 02:38:27,702 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:27,702 INFO  L728         BuchiCegarLoop]: Abstraction has 2556 states and 2884 transitions.
[2020-05-31 02:38:27,704 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2556 states and 2884 transitions.
[2020-05-31 02:38:27,723 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2556 to 2556.
[2020-05-31 02:38:27,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2556 states.
[2020-05-31 02:38:27,726 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2556 states to 2556 states and 2884 transitions.
[2020-05-31 02:38:27,726 INFO  L751         BuchiCegarLoop]: Abstraction has 2556 states and 2884 transitions.
[2020-05-31 02:38:27,726 INFO  L631         BuchiCegarLoop]: Abstraction has 2556 states and 2884 transitions.
[2020-05-31 02:38:27,726 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:38:27,726 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2556 states and 2884 transitions.
[2020-05-31 02:38:27,730 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 95
[2020-05-31 02:38:27,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:27,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:27,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:27,732 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND FALSE  !(Balance[from] >= amount)
[L1244]              success := false;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND FALSE  !(Balance[from] >= amount)
[L1244]              success := false;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:27,735 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:27,735 INFO  L82        PathProgramCache]: Analyzing trace with hash -1692823417, now seen corresponding path program 1 times
[2020-05-31 02:38:27,736 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:27,762 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:27,809 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:27,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:27,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:38:27,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:27,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:38:27,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:38:27,812 INFO  L87              Difference]: Start difference. First operand 2556 states and 2884 transitions. cyclomatic complexity: 340 Second operand 4 states.
[2020-05-31 02:38:27,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:27,851 INFO  L93              Difference]: Finished difference Result 2596 states and 2926 transitions.
[2020-05-31 02:38:27,852 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:38:27,852 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2596 states and 2926 transitions.
[2020-05-31 02:38:27,858 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 95
[2020-05-31 02:38:27,867 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2596 states to 2588 states and 2918 transitions.
[2020-05-31 02:38:27,867 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 72
[2020-05-31 02:38:27,868 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 72
[2020-05-31 02:38:27,868 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2588 states and 2918 transitions.
[2020-05-31 02:38:27,870 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:27,870 INFO  L728         BuchiCegarLoop]: Abstraction has 2588 states and 2918 transitions.
[2020-05-31 02:38:27,873 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2588 states and 2918 transitions.
[2020-05-31 02:38:27,907 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2588 to 2588.
[2020-05-31 02:38:27,907 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2588 states.
[2020-05-31 02:38:27,910 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2588 states to 2588 states and 2918 transitions.
[2020-05-31 02:38:27,910 INFO  L751         BuchiCegarLoop]: Abstraction has 2588 states and 2918 transitions.
[2020-05-31 02:38:27,910 INFO  L631         BuchiCegarLoop]: Abstraction has 2588 states and 2918 transitions.
[2020-05-31 02:38:27,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:38:27,910 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2588 states and 2918 transitions.
[2020-05-31 02:38:27,913 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 95
[2020-05-31 02:38:27,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:27,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:27,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:27,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:27,920 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:27,921 INFO  L82        PathProgramCache]: Analyzing trace with hash 678940456, now seen corresponding path program 1 times
[2020-05-31 02:38:27,921 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:27,938 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:28,051 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:28,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:28,052 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-31 02:38:28,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:28,052 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 02:38:28,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-05-31 02:38:28,052 INFO  L87              Difference]: Start difference. First operand 2588 states and 2918 transitions. cyclomatic complexity: 342 Second operand 14 states.
[2020-05-31 02:38:29,261 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:29,261 INFO  L93              Difference]: Finished difference Result 3424 states and 4003 transitions.
[2020-05-31 02:38:29,261 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 02:38:29,261 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3424 states and 4003 transitions.
[2020-05-31 02:38:29,267 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 133
[2020-05-31 02:38:29,277 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3424 states to 3424 states and 4003 transitions.
[2020-05-31 02:38:29,277 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 146
[2020-05-31 02:38:29,278 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 146
[2020-05-31 02:38:29,278 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3424 states and 4003 transitions.
[2020-05-31 02:38:29,280 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:29,280 INFO  L728         BuchiCegarLoop]: Abstraction has 3424 states and 4003 transitions.
[2020-05-31 02:38:29,282 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3424 states and 4003 transitions.
[2020-05-31 02:38:29,314 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3424 to 3326.
[2020-05-31 02:38:29,315 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3326 states.
[2020-05-31 02:38:29,320 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3326 states to 3326 states and 3851 transitions.
[2020-05-31 02:38:29,320 INFO  L751         BuchiCegarLoop]: Abstraction has 3326 states and 3851 transitions.
[2020-05-31 02:38:29,321 INFO  L631         BuchiCegarLoop]: Abstraction has 3326 states and 3851 transitions.
[2020-05-31 02:38:29,321 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:38:29,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3326 states and 3851 transitions.
[2020-05-31 02:38:29,324 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 131
[2020-05-31 02:38:29,324 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:29,324 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:29,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:29,326 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]              assume Balance[from] >= amount;
[L1040]              Balance[from] := Balance[from] - amount;
[L1041]              Balance[to] := Balance[to] + amount;
[L1042]  COND FALSE  !(choice == 0)
[L1048]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND FALSE  !(gas > 2300)
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]              assume Balance[from] >= amount;
[L1040]              Balance[from] := Balance[from] - amount;
[L1041]              Balance[to] := Balance[to] + amount;
[L1042]  COND FALSE  !(choice == 0)
[L1048]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:29,330 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:29,330 INFO  L82        PathProgramCache]: Analyzing trace with hash -65798355, now seen corresponding path program 1 times
[2020-05-31 02:38:29,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:29,343 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:29,387 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:29,388 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:29,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:38:29,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:29,388 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:38:29,388 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:38:29,389 INFO  L87              Difference]: Start difference. First operand 3326 states and 3851 transitions. cyclomatic complexity: 539 Second operand 10 states.
[2020-05-31 02:38:30,313 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:30,313 INFO  L93              Difference]: Finished difference Result 5571 states and 6741 transitions.
[2020-05-31 02:38:30,313 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:38:30,313 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5571 states and 6741 transitions.
[2020-05-31 02:38:30,325 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 240
[2020-05-31 02:38:30,346 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5571 states to 5571 states and 6741 transitions.
[2020-05-31 02:38:30,346 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 293
[2020-05-31 02:38:30,347 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 293
[2020-05-31 02:38:30,347 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5571 states and 6741 transitions.
[2020-05-31 02:38:30,353 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:30,353 INFO  L728         BuchiCegarLoop]: Abstraction has 5571 states and 6741 transitions.
[2020-05-31 02:38:30,356 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5571 states and 6741 transitions.
[2020-05-31 02:38:30,395 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5571 to 3374.
[2020-05-31 02:38:30,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3374 states.
[2020-05-31 02:38:30,399 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3374 states to 3374 states and 3873 transitions.
[2020-05-31 02:38:30,399 INFO  L751         BuchiCegarLoop]: Abstraction has 3374 states and 3873 transitions.
[2020-05-31 02:38:30,399 INFO  L631         BuchiCegarLoop]: Abstraction has 3374 states and 3873 transitions.
[2020-05-31 02:38:30,399 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:38:30,399 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3374 states and 3873 transitions.
[2020-05-31 02:38:30,403 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 130
[2020-05-31 02:38:30,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:30,403 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:30,404 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:30,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]              assume Balance[from] >= amount;
[L1040]              Balance[from] := Balance[from] - amount;
[L1041]              Balance[to] := Balance[to] + amount;
[L1042]  COND FALSE  !(choice == 0)
[L1048]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND FALSE  !(choice == 1)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:30,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:30,407 INFO  L82        PathProgramCache]: Analyzing trace with hash 12157777, now seen corresponding path program 1 times
[2020-05-31 02:38:30,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:30,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:30,486 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:30,486 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:30,487 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-05-31 02:38:30,487 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:30,487 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 02:38:30,487 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-05-31 02:38:30,487 INFO  L87              Difference]: Start difference. First operand 3374 states and 3873 transitions. cyclomatic complexity: 513 Second operand 13 states.
[2020-05-31 02:38:31,798 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:31,798 INFO  L93              Difference]: Finished difference Result 3744 states and 4372 transitions.
[2020-05-31 02:38:31,798 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-31 02:38:31,798 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3744 states and 4372 transitions.
[2020-05-31 02:38:31,805 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 132
[2020-05-31 02:38:31,814 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3744 states to 3744 states and 4372 transitions.
[2020-05-31 02:38:31,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 154
[2020-05-31 02:38:31,814 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 154
[2020-05-31 02:38:31,814 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3744 states and 4372 transitions.
[2020-05-31 02:38:31,816 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:31,817 INFO  L728         BuchiCegarLoop]: Abstraction has 3744 states and 4372 transitions.
[2020-05-31 02:38:31,818 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3744 states and 4372 transitions.
[2020-05-31 02:38:31,849 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3744 to 3597.
[2020-05-31 02:38:31,849 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3597 states.
[2020-05-31 02:38:31,854 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3597 states to 3597 states and 4168 transitions.
[2020-05-31 02:38:31,854 INFO  L751         BuchiCegarLoop]: Abstraction has 3597 states and 4168 transitions.
[2020-05-31 02:38:31,854 INFO  L631         BuchiCegarLoop]: Abstraction has 3597 states and 4168 transitions.
[2020-05-31 02:38:31,854 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:38:31,854 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3597 states and 4168 transitions.
[2020-05-31 02:38:31,859 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 130
[2020-05-31 02:38:31,859 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:31,859 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:31,861 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:31,861 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND FALSE  !(choice == 1)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:31,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:31,863 INFO  L82        PathProgramCache]: Analyzing trace with hash -61146237, now seen corresponding path program 1 times
[2020-05-31 02:38:31,864 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:31,876 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:31,977 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:31,977 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:31,977 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-31 02:38:31,978 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:31,978 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-05-31 02:38:31,978 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-05-31 02:38:31,978 INFO  L87              Difference]: Start difference. First operand 3597 states and 4168 transitions. cyclomatic complexity: 585 Second operand 17 states.
[2020-05-31 02:38:33,904 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:33,905 INFO  L93              Difference]: Finished difference Result 3739 states and 4374 transitions.
[2020-05-31 02:38:33,905 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:38:33,905 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3739 states and 4374 transitions.
[2020-05-31 02:38:33,910 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 130
[2020-05-31 02:38:33,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3739 states to 3695 states and 4306 transitions.
[2020-05-31 02:38:33,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 141
[2020-05-31 02:38:33,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 141
[2020-05-31 02:38:33,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3695 states and 4306 transitions.
[2020-05-31 02:38:33,919 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:33,919 INFO  L728         BuchiCegarLoop]: Abstraction has 3695 states and 4306 transitions.
[2020-05-31 02:38:33,920 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3695 states and 4306 transitions.
[2020-05-31 02:38:33,942 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3695 to 3648.
[2020-05-31 02:38:33,942 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3648 states.
[2020-05-31 02:38:33,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3648 states to 3648 states and 4239 transitions.
[2020-05-31 02:38:33,945 INFO  L751         BuchiCegarLoop]: Abstraction has 3648 states and 4239 transitions.
[2020-05-31 02:38:33,945 INFO  L631         BuchiCegarLoop]: Abstraction has 3648 states and 4239 transitions.
[2020-05-31 02:38:33,945 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:38:33,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3648 states and 4239 transitions.
[2020-05-31 02:38:33,948 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 130
[2020-05-31 02:38:33,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:33,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:33,950 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:33,950 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG);
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND FALSE  !(DType[to] == SimpleAuction)
[L927]   CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]              assume Balance[from] >= amount;
[L1040]              Balance[from] := Balance[from] - amount;
[L1041]              Balance[to] := Balance[to] + amount;
[L1042]  COND FALSE  !(choice == 0)
[L1048]  COND TRUE   gas < 21000
[L927]   RET         call Fallback_UnknownType__success(from, to, amount);
[L928]   COND FALSE  !(revert)
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND FALSE  !(choice == 1)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:33,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:33,954 INFO  L82        PathProgramCache]: Analyzing trace with hash 683033775, now seen corresponding path program 1 times
[2020-05-31 02:38:33,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:33,968 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:34,026 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 14 proven. 3 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:34,027 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:34,027 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 02:38:34,027 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:34,027 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:38:34,027 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:38:34,028 INFO  L87              Difference]: Start difference. First operand 3648 states and 4239 transitions. cyclomatic complexity: 605 Second operand 12 states.
[2020-05-31 02:38:34,730 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:34,730 INFO  L93              Difference]: Finished difference Result 3777 states and 4414 transitions.
[2020-05-31 02:38:34,730 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 02:38:34,730 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3777 states and 4414 transitions.
[2020-05-31 02:38:34,735 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 132
[2020-05-31 02:38:34,742 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3777 states to 3777 states and 4414 transitions.
[2020-05-31 02:38:34,742 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 146
[2020-05-31 02:38:34,742 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 146
[2020-05-31 02:38:34,743 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3777 states and 4414 transitions.
[2020-05-31 02:38:34,744 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:34,744 INFO  L728         BuchiCegarLoop]: Abstraction has 3777 states and 4414 transitions.
[2020-05-31 02:38:34,746 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3777 states and 4414 transitions.
[2020-05-31 02:38:34,763 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3777 to 3728.
[2020-05-31 02:38:34,763 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3728 states.
[2020-05-31 02:38:34,767 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3728 states to 3728 states and 4331 transitions.
[2020-05-31 02:38:34,767 INFO  L751         BuchiCegarLoop]: Abstraction has 3728 states and 4331 transitions.
[2020-05-31 02:38:34,767 INFO  L631         BuchiCegarLoop]: Abstraction has 3728 states and 4331 transitions.
[2020-05-31 02:38:34,767 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:38:34,767 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3728 states and 4331 transitions.
[2020-05-31 02:38:34,770 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 130
[2020-05-31 02:38:34,770 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:34,770 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:34,771 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:34,771 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_auctionEnd_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc ben;
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     success_bid_SimpleAuction1 := true;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     revert := revert_hold;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND FALSE  !(choice == 3)
[L1294]      COND FALSE  !(choice == 2)
[L1303]      COND TRUE   choice == 1
[L1305]                  gas := gas - 21000;
[L1306]      COND TRUE   gas >= 0
[L1308]                  assume msgvalue_MSG == 0;
[L1309]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND TRUE   gas > 2300
[L884]                   gas := 2300;
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == ben && amount == val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume ben == beneficiary_SimpleAuction[this];
[L7]                     success_auctionEnd_SimpleAuction0 := true;
[L7]                     success_auctionEnd_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1309]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     success_bid_SimpleAuction1 := true;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     revert := revert_hold;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND FALSE  !(choice == 1)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:34,773 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:34,773 INFO  L82        PathProgramCache]: Analyzing trace with hash -481547824, now seen corresponding path program 1 times
[2020-05-31 02:38:34,774 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:34,785 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:34,871 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-05-31 02:38:34,871 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:34,871 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-05-31 02:38:34,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:34,872 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 02:38:34,872 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-05-31 02:38:34,872 INFO  L87              Difference]: Start difference. First operand 3728 states and 4331 transitions. cyclomatic complexity: 617 Second operand 18 states.
[2020-05-31 02:38:36,908 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:36,908 INFO  L93              Difference]: Finished difference Result 3887 states and 4603 transitions.
[2020-05-31 02:38:36,908 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:38:36,908 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3887 states and 4603 transitions.
[2020-05-31 02:38:36,913 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 132
[2020-05-31 02:38:36,920 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3887 states to 3809 states and 4473 transitions.
[2020-05-31 02:38:36,920 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 150
[2020-05-31 02:38:36,920 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 150
[2020-05-31 02:38:36,920 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3809 states and 4473 transitions.
[2020-05-31 02:38:36,922 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:36,922 INFO  L728         BuchiCegarLoop]: Abstraction has 3809 states and 4473 transitions.
[2020-05-31 02:38:36,924 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3809 states and 4473 transitions.
[2020-05-31 02:38:36,942 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3809 to 3745.
[2020-05-31 02:38:36,942 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3745 states.
[2020-05-31 02:38:36,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3745 states to 3745 states and 4368 transitions.
[2020-05-31 02:38:36,946 INFO  L751         BuchiCegarLoop]: Abstraction has 3745 states and 4368 transitions.
[2020-05-31 02:38:36,946 INFO  L631         BuchiCegarLoop]: Abstraction has 3745 states and 4368 transitions.
[2020-05-31 02:38:36,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:38:36,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3745 states and 4368 transitions.
[2020-05-31 02:38:36,948 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 130
[2020-05-31 02:38:36,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:36,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:36,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:36,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND FALSE  !(revert)
[L473]               __tmp__pendingReturns_SimpleAuction[this] := __var_1;
[L474]               __tmp__M_Ref_int_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L475]               __tmp__sum_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := 0;
[L476]               __tmp__ended_SimpleAuction[this] := false;
[L477]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L478]               __tmp___beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L479]               __tmp__beneficiary_SimpleAuction[this] := null;
[L480]               __tmp__beneficiary_SimpleAuction[this] := __tmp___beneficiary_SimpleAuction[this];
[L481]               assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L482]               assume __tmp__now >= 0;
[L483]               __tmp__auctionStart_SimpleAuction[this] := __tmp__now;
[L484]               assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L485]               __tmp__biddingTime_SimpleAuction[this] := 2587587;
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_bid_SimpleAuction1 := true;
[L7]                 success_bid_SimpleAuction1 := false;
[L7]                 revert := revert_hold;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND FALSE  !(choice == 1)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:36,951 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:36,952 INFO  L82        PathProgramCache]: Analyzing trace with hash 1162327266, now seen corresponding path program 1 times
[2020-05-31 02:38:36,952 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:36,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:36,976 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:38:36,977 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:36,977 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:38:36,977 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:36,977 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:38:36,977 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:38:36,977 INFO  L87              Difference]: Start difference. First operand 3745 states and 4368 transitions. cyclomatic complexity: 638 Second operand 4 states.
[2020-05-31 02:38:37,053 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:37,053 INFO  L93              Difference]: Finished difference Result 3615 states and 4318 transitions.
[2020-05-31 02:38:37,053 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:38:37,054 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3615 states and 4318 transitions.
[2020-05-31 02:38:37,059 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 138
[2020-05-31 02:38:37,066 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3615 states to 3383 states and 4028 transitions.
[2020-05-31 02:38:37,066 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 164
[2020-05-31 02:38:37,066 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 164
[2020-05-31 02:38:37,066 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3383 states and 4028 transitions.
[2020-05-31 02:38:37,068 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:37,068 INFO  L728         BuchiCegarLoop]: Abstraction has 3383 states and 4028 transitions.
[2020-05-31 02:38:37,070 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3383 states and 4028 transitions.
[2020-05-31 02:38:37,085 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3383 to 2316.
[2020-05-31 02:38:37,085 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2316 states.
[2020-05-31 02:38:37,087 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2316 states to 2316 states and 2609 transitions.
[2020-05-31 02:38:37,087 INFO  L751         BuchiCegarLoop]: Abstraction has 2316 states and 2609 transitions.
[2020-05-31 02:38:37,087 INFO  L631         BuchiCegarLoop]: Abstraction has 2316 states and 2609 transitions.
[2020-05-31 02:38:37,087 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:38:37,087 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2316 states and 2609 transitions.
[2020-05-31 02:38:37,088 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 96
[2020-05-31 02:38:37,088 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:37,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:37,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:37,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_auctionEnd_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc ben;
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     success_bid_SimpleAuction1 := true;
[L7]                     success_bid_SimpleAuction1 := false;
[L7]                     revert := revert_hold;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == highestBidder_SimpleAuction[this] && val == msgvalue_MSG;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND TRUE   choice == 4
[L1065]                  gas := gas - 21000;
[L1066]      COND TRUE   gas >= 0
[L1068]                  assume msgvalue_MSG >= 0;
[L1069]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1069]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1070]      COND FALSE  !(revert)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == ben && amount == val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND FALSE  !(choice == 3)
[L1294]      COND FALSE  !(choice == 2)
[L1303]      COND TRUE   choice == 1
[L1305]                  gas := gas - 21000;
[L1306]      COND TRUE   gas >= 0
[L1308]                  assume msgvalue_MSG == 0;
[L1309]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND TRUE   gas > 2300
[L884]                   gas := 2300;
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND TRUE   DType[to] == SimpleAuction
[L923]                   assume amount == 0;
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == ben && amount == val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND FALSE  !(!__var_7)
[L896]                   gas := __var_6 + gas;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume ben == beneficiary_SimpleAuction[this];
[L7]                     success_auctionEnd_SimpleAuction0 := true;
[L7]                     success_auctionEnd_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1309]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND FALSE  !(choice == 4)
[L1285]  COND FALSE  !(choice == 3)
[L1294]  COND FALSE  !(choice == 2)
[L1303]  COND TRUE   choice == 1
[L1305]              gas := gas - 21000;
[L1306]  COND TRUE   gas >= 0
[L1308]              assume msgvalue_MSG == 0;
[L1309]  CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]               havoc __exception;
[L273]               revert := false;
[L274]   COND FALSE  !(__exception)
[L297]   CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]               gas := gas - 437;
[L860]               assume now >= 0;
[L861]               assume auctionStart_SimpleAuction[this] >= 0;
[L862]               assume biddingTime_SimpleAuction[this] >= 0;
[L863]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]   COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]               gas := gas - 262;
[L871]   COND FALSE  !(!!ended_SimpleAuction[this])
[L877]               gas := gas - 20267;
[L878]               ended_SimpleAuction[this] := true;
[L879]               assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]               gas := gas - 36220;
[L881]               __var_6 := gas;
[L882]   COND TRUE   gas > 2300
[L884]               gas := 2300;
[L887]               __var_6 := __var_6 - gas;
[L888]               assume highestBid_SimpleAuction[this] >= 0;
[L889]   CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]              havoc __exception;
[L1208]  COND FALSE  !(__exception)
[L1237]  COND TRUE   Balance[from] >= amount
[L1239]  CALL        call FallbackDispatch__success(from, to, amount);
[L921]   COND TRUE   DType[to] == SimpleAuction
[L923]               assume amount == 0;
[L1239]  RET         call FallbackDispatch__success(from, to, amount);
[L1240]              success := true;
[L1247]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == val);
[L7]                 revert := revert_hold;
[L889]   RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]   COND FALSE  !(!__var_7)
[L896]               gas := __var_6 + gas;
[L297]   RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_SimpleAuction[this];
[L7]                 success_auctionEnd_SimpleAuction0 := true;
[L7]                 success_auctionEnd_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1309]  RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:37,093 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:37,093 INFO  L82        PathProgramCache]: Analyzing trace with hash -884489379, now seen corresponding path program 1 times
[2020-05-31 02:38:37,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:37,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:37,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 45 backedges. 4 proven. 18 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-05-31 02:38:37,152 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:37,152 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 02:38:37,152 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:37,152 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:38:37,152 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:38:37,153 INFO  L87              Difference]: Start difference. First operand 2316 states and 2609 transitions. cyclomatic complexity: 303 Second operand 6 states.
[2020-05-31 02:38:37,231 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:37,231 INFO  L93              Difference]: Finished difference Result 1297 states and 1419 transitions.
[2020-05-31 02:38:37,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:38:37,231 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1297 states and 1419 transitions.
[2020-05-31 02:38:37,233 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:38:37,233 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1297 states to 0 states and 0 transitions.
[2020-05-31 02:38:37,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:38:37,233 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:38:37,233 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:38:37,233 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:37,233 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:38:37,233 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:38:37,233 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:38:37,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:38:37,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:38:37,233 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:38:37,234 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:38:37,236 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:38:37 BasicIcfg
[2020-05-31 02:38:37,236 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:38:37,237 INFO  L168              Benchmark]: Toolchain (without parser) took 14295.99 ms. Allocated memory was 514.9 MB in the beginning and 1.4 GB in the end (delta: 872.9 MB). Free memory was 461.5 MB in the beginning and 599.6 MB in the end (delta: -138.0 MB). Peak memory consumption was 734.9 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,238 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,238 INFO  L168              Benchmark]: Boogie Preprocessor took 57.68 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,238 INFO  L168              Benchmark]: UtopiaSpecLang took 36.20 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,238 INFO  L168              Benchmark]: Boogie Printer took 8.58 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,239 INFO  L168              Benchmark]: RCFGBuilder took 342.66 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 414.3 MB in the end (delta: 37.8 MB). Peak memory consumption was 37.8 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,239 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.63 ms. Allocated memory is still 514.9 MB. Free memory was 414.3 MB in the beginning and 411.2 MB in the end (delta: 3.1 MB). Peak memory consumption was 3.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,240 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1526.06 ms. Allocated memory was 514.9 MB in the beginning and 638.6 MB in the end (delta: 123.7 MB). Free memory was 411.2 MB in the beginning and 490.1 MB in the end (delta: -79.0 MB). Peak memory consumption was 230.4 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,240 INFO  L168              Benchmark]: BlockEncodingV2 took 109.45 ms. Allocated memory is still 638.6 MB. Free memory was 490.1 MB in the beginning and 446.6 MB in the end (delta: 43.5 MB). Peak memory consumption was 43.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,240 INFO  L168              Benchmark]: BuchiAutomizer took 12175.72 ms. Allocated memory was 638.6 MB in the beginning and 1.4 GB in the end (delta: 749.2 MB). Free memory was 442.3 MB in the beginning and 599.6 MB in the end (delta: -157.3 MB). Peak memory consumption was 591.9 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:37,245 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2842 locations, 7145 edges
  - StatisticsResult: Encoded RCFG
    2808 locations, 7031 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 57.68 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 36.20 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 8.58 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 342.66 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 414.3 MB in the end (delta: 37.8 MB). Peak memory consumption was 37.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.63 ms. Allocated memory is still 514.9 MB. Free memory was 414.3 MB in the beginning and 411.2 MB in the end (delta: 3.1 MB). Peak memory consumption was 3.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1526.06 ms. Allocated memory was 514.9 MB in the beginning and 638.6 MB in the end (delta: 123.7 MB). Free memory was 411.2 MB in the beginning and 490.1 MB in the end (delta: -79.0 MB). Peak memory consumption was 230.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 109.45 ms. Allocated memory is still 638.6 MB. Free memory was 490.1 MB in the beginning and 446.6 MB in the end (delta: 43.5 MB). Peak memory consumption was 43.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 12175.72 ms. Allocated memory was 638.6 MB in the beginning and 1.4 GB in the end (delta: 749.2 MB). Free memory was 442.3 MB in the beginning and 599.6 MB in the end (delta: -157.3 MB). Peak memory consumption was 591.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    638 locations, 773 edges
  - StatisticsResult: BuchiProgram size
    2842 locations, 7145 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 12.1s and 13 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.9s. Construction of modules took 7.3s. BÃ¼chi inclusion checks took 3.0s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 11 MinimizatonAttempts, 4195 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3745 states and ocurred in iteration 10.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 34198 SDtfs, 33928 SDslu, 77824 SDs, 0 SdLazy, 120619 SolverSat, 6410 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.3s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( <>(success_auctionEnd_SimpleAuction0) )&& ! ( ( []( ( (success_bid_SimpleAuction0) && ( X( []( !(success_bid_SimpleAuction1) ) ) ) ) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
