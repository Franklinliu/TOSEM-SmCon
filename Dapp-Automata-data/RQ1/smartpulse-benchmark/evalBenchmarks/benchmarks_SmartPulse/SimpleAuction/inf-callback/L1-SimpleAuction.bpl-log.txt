This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:37:49,788 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:37:49,789 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:37:49,799 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:37:49,800 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:37:49,801 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:37:49,802 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:37:49,804 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:37:49,806 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:37:49,807 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:37:49,822 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:37:49,822 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:37:49,824 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:37:49,825 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:37:49,826 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:37:49,827 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:37:49,828 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:37:49,830 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:37:49,831 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:37:49,832 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:37:49,833 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:37:49,834 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:37:49,835 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:37:49,836 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:37:49,836 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:37:49,837 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:37:49,837 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:37:49,838 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:37:49,838 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:37:49,838 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:37:49,838 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:37:49,839 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:37:49,840 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:37:49,841 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:37:49,842 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:37:49,844 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:37:49,844 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:37:49,845 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:37:49,845 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:37:49,845 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:37:49,846 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:37:49,847 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:37:49,847 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:37:49,857 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:37:49,858 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:37:49,858 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:37:49,859 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:37:49,859 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:37:49,859 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:37:49,860 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:37:49,860 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:37:49,861 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:37:49,861 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:37:49,861 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:37:49,861 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:37:49,881 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:37:49,892 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:37:49,894 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:37:49,895 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:37:49,895 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:37:49,896 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/inf-callback/L1-SimpleAuction.bpl
[2020-05-31 02:37:49,896 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/SimpleAuction/inf-callback/L1-SimpleAuction.bpl'
[2020-05-31 02:37:49,936 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:37:49,937 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:37:49,938 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:37:49,938 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:37:49,938 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:37:49,951 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,952 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,968 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,968 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,979 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,985 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,988 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:49,992 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:37:49,994 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:37:49,994 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:37:49,996 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:37:49,998 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/1) ...
[2020-05-31 02:37:50,007 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:37:50,012 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:37:50,017 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:37:50,020 INFO  L599   opiaSpecLangObserver]: Parsed ( ( user==( old(highestBidder_SimpleAuction[this]) ) && val==( old(highestBid_SimpleAuction[this]) ) ) && user!=0 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[highestBidder_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]]],BinaryExpression[COMPEQ,IdentifierExpression[val,GLOBAL],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[highestBid_SimpleAuction,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,bid_SimpleAuction>]]]]]],BinaryExpression[COMPNEQ,IdentifierExpression[user,GLOBAL],IntegerLiteral[0]]]
[2020-05-31 02:37:50,022 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount>=val ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPGEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[val,GLOBAL]]]
[2020-05-31 02:37:50,022 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(SimpleAuction.bid, (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this]) && user != 0))) ==> (<>(finished(send(from, to, amt), (to == user && amt >= val)))))
[2020-05-31 02:37:50,022 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_bid_SimpleAuction0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:37:50,022 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:37:50,022 INFO  L979   opiaSpecLangObserver]: Successfully lexed: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:37:50,023 INFO  L981   opiaSpecLangObserver]: Successfully parsed: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:37:50,024 INFO  L599   opiaSpecLangObserver]: Parsed user==msg.sender to BinaryExpression[COMPEQ,IdentifierExpression[user,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,withdraw_SimpleAuction>]]
[2020-05-31 02:37:50,024 INFO  L968   opiaSpecLangObserver]: Compiling: [](<>(finished(SimpleAuction.withdraw, (user == msg.sender))))
[2020-05-31 02:37:50,025 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( <>AP(success_withdraw_SimpleAuction0) ) )
Executed UtopiaSpecLang
[2020-05-31 02:37:50,029 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:50 PropertyContainer
[2020-05-31 02:37:50,029 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:37:50,030 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:37:50,030 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:37:50,030 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:37:50,030 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/2) ...
[2020-05-31 02:37:50,031 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:37:50,031 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:37:50,038 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:50" (2/2) ...
[2020-05-31 02:37:50,038 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:37:50,038 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:37:50,038 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:37:50,039 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:37:50,039 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/2) ...
[2020-05-31 02:37:50,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:37:50,081 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:37:50,081 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:37:50,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction
[2020-05-31 02:37:50,081 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction
[2020-05-31 02:37:50,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction
[2020-05-31 02:37:50,081 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction
[2020-05-31 02:37:50,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction
[2020-05-31 02:37:50,082 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:37:50,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction
[2020-05-31 02:37:50,082 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction
[2020-05-31 02:37:50,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SimpleAuction
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure bid_SimpleAuction__fail
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:37:50,083 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:37:50,084 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:37:50,084 INFO  L130     BoogieDeclarations]: Found specification of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:37:50,084 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:37:50,084 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:37:50,084 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:37:50,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:37:50,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:37:50,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__fail
[2020-05-31 02:37:50,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction_NoBaseCtor__success
[2020-05-31 02:37:50,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure SimpleAuction_SimpleAuction__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure bid_SimpleAuction__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_SimpleAuction__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEndTime_SimpleAuction__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure auctionEnd_SimpleAuction__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:37:50,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:37:50,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SimpleAuction
[2020-05-31 02:37:50,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:37:50,086 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:37:50,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:37:50,205 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:50,221 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:50,302 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:50,374 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:37:50,385 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:37:50,385 INFO  L286             CfgBuilder]: Removed 1 assue(true) statements.
[2020-05-31 02:37:50,387 INFO  L202        PluginConnector]: Adding new model L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:50 BoogieIcfgContainer
[2020-05-31 02:37:50,387 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:50" (2/2) ...
[2020-05-31 02:37:50,387 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:37:50,387 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@71e8d605 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:50, skipping insertion in model container
[2020-05-31 02:37:50,387 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:37:50,388 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:37:50,388 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:37:50,389 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:37:50,389 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/3) ...
[2020-05-31 02:37:50,389 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1b79f3c1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:50, skipping insertion in model container
[2020-05-31 02:37:50,389 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:50" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( [] ( <>a ) ) && ! ( ( [] ( b -> ( <>c ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:37:50,425 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:50 NWAContainer
[2020-05-31 02:37:50,425 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:37:50,425 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:37:50,425 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:37:50,426 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:37:50,426 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:50" (3/4) ...
[2020-05-31 02:37:50,427 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@48f06a3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:50, skipping insertion in model container
[2020-05-31 02:37:50,427 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:50" (4/4) ...
[2020-05-31 02:37:50,430 INFO  L104   BuchiProductObserver]: Initial property automaton 3 locations, 6 edges
[2020-05-31 02:37:50,431 INFO  L110   BuchiProductObserver]: Initial RCFG 631 locations, 766 edges
[2020-05-31 02:37:50,431 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:37:50,439 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:37:51,448 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:37:51,451 INFO  L110   BuchiProductObserver]: BuchiProgram size 2113 locations, 4687 edges
[2020-05-31 02:37:51,452 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:51 BoogieIcfgContainer
[2020-05-31 02:37:51,452 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:37:51,452 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:37:51,452 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:37:51,454 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:37:51,455 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:51" (1/1) ...
[2020-05-31 02:37:51,504 INFO  L313           BlockEncoder]: Initial Icfg 2113 locations, 4687 edges
[2020-05-31 02:37:51,505 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:37:51,505 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:37:51,505 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:37:51,506 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:37:51,514 INFO  L70    emoveInfeasibleEdges]: Removed 39 edges and 8 locations because of local infeasibility
[2020-05-31 02:37:51,520 INFO  L70        RemoveSinkStates]: Removed 5 edges and 2 locations by removing sink states
[2020-05-31 02:37:51,529 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:37:51,533 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:37:51,536 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:37:51,536 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:37:51,540 INFO  L313           BlockEncoder]: Encoded RCFG 2094 locations, 4628 edges
[2020-05-31 02:37:51,541 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:37:51 BasicIcfg
[2020-05-31 02:37:51,541 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:37:51,541 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:37:51,541 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:37:51,543 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:37:51,543 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:51,544 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:37:49" (1/6) ...
[2020-05-31 02:37:51,545 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3054dda8 and model type L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:37:51, skipping insertion in model container
[2020-05-31 02:37:51,545 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:51,545 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:37:50" (2/6) ...
[2020-05-31 02:37:51,545 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3054dda8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:37:51, skipping insertion in model container
[2020-05-31 02:37:51,545 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:51,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:37:50" (3/6) ...
[2020-05-31 02:37:51,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3054dda8 and model type L1-SimpleAuction.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:37:51, skipping insertion in model container
[2020-05-31 02:37:51,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:51,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:37:50" (4/6) ...
[2020-05-31 02:37:51,546 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3054dda8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:37:51, skipping insertion in model container
[2020-05-31 02:37:51,546 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:51,546 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:37:51" (5/6) ...
[2020-05-31 02:37:51,547 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3054dda8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:37:51, skipping insertion in model container
[2020-05-31 02:37:51,547 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:37:51,547 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:37:51" (6/6) ...
[2020-05-31 02:37:51,548 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-SimpleAuction.bpl_BEv2
[2020-05-31 02:37:51,580 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:37:51,580 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:37:51,580 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:37:51,581 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:37:51,581 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:37:51,581 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:37:51,581 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:37:51,581 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:37:51,581 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:37:51,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2094 states.
[2020-05-31 02:37:51,661 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 186
[2020-05-31 02:37:51,661 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:51,661 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:51,728 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:51,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:51,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:37:51,729 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2094 states.
[2020-05-31 02:37:51,751 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 186
[2020-05-31 02:37:51,751 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:51,752 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:51,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:51,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND FALSE  !(gas >= 0)
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND FALSE  !(choice == 3)
[L1294]      COND FALSE  !(choice == 2)
[L1303]      COND TRUE   choice == 1
[L1305]                  gas := gas - 21000;
[L1306]      COND TRUE   gas >= 0
[L1308]                  assume msgvalue_MSG == 0;
[L1309]      CALL        call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L272]                   havoc __exception;
[L273]                   revert := false;
[L274]       COND FALSE  !(__exception)
[L297]       CALL        call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND FALSE  !(gas > 2300)
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND FALSE  !(choice == 4)
[L1076]      COND FALSE  !(choice == 3)
[L1089]      COND FALSE  !(choice == 2)
[L1102]      COND TRUE   choice == 1
[L1104]                  gas := gas - 21000;
[L1105]      COND TRUE   gas >= 0
[L1107]                  assume msgvalue_MSG == 0;
[L1108]      CALL        call auctionEnd_SimpleAuction__success(from, to, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND FALSE  !(gas > 2300)
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND FALSE  !(choice == 4)
[L1076]      COND FALSE  !(choice == 3)
[L1089]      COND FALSE  !(choice == 2)
[L1102]      COND TRUE   choice == 1
[L1104]                  gas := gas - 21000;
[L1105]      COND TRUE   gas >= 0
[L1107]                  assume msgvalue_MSG == 0;
[L1108]      CALL        call auctionEnd_SimpleAuction__success(from, to, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND FALSE  !(gas > 2300)
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND FALSE  !(choice == 4)
[L1076]      COND FALSE  !(choice == 3)
[L1089]      COND FALSE  !(choice == 2)
[L1102]      COND TRUE   choice == 1
[L1104]                  gas := gas - 21000;
[L1105]      COND TRUE   gas >= 0
[L1107]                  assume msgvalue_MSG == 0;
[L1108]      CALL        call auctionEnd_SimpleAuction__success(from, to, msgvalue_MSG);
[L859]                   gas := gas - 437;
[L860]                   assume now >= 0;
[L861]                   assume auctionStart_SimpleAuction[this] >= 0;
[L862]                   assume biddingTime_SimpleAuction[this] >= 0;
[L863]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L864]       COND FALSE  !(!(now >= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L870]                   gas := gas - 262;
[L871]       COND FALSE  !(!!ended_SimpleAuction[this])
[L877]                   gas := gas - 20267;
[L878]                   ended_SimpleAuction[this] := true;
[L879]                   assert { :EventEmitted "AuctionEnded_SimpleAuction" } true;
[L880]                   gas := gas - 36220;
[L881]                   __var_6 := gas;
[L882]       COND FALSE  !(gas > 2300)
[L887]                   __var_6 := __var_6 - gas;
[L888]                   assume highestBid_SimpleAuction[this] >= 0;
[L889]       CALL        call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND FALSE  !(choice == 4)
[L1076]      COND TRUE   choice == 3
[L1078]                  gas := gas - 21000;
[L1079]      COND TRUE   gas >= 0
[L1081]                  assume msgvalue_MSG == 0;
[L1082]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction__success(from, to, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L1082]      RET         call __ret_0_withdraw := withdraw_SimpleAuction__success(from, to, msgvalue_MSG);
[L1083]      COND FALSE  !(revert)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND FALSE  !(DType[from] == SimpleAuction)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND TRUE   !__var_7
[L892]                   revert := true;
[L1108]      RET         call auctionEnd_SimpleAuction__success(from, to, msgvalue_MSG);
[L1109]      COND FALSE  !(revert)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND FALSE  !(DType[from] == SimpleAuction)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND TRUE   !__var_7
[L892]                   revert := true;
[L1108]      RET         call auctionEnd_SimpleAuction__success(from, to, msgvalue_MSG);
[L1109]      COND FALSE  !(revert)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND FALSE  !(DType[from] == SimpleAuction)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND TRUE   !__var_7
[L892]                   revert := true;
[L1108]      RET         call auctionEnd_SimpleAuction__success(from, to, msgvalue_MSG);
[L1109]      COND FALSE  !(revert)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND FALSE  !(DType[from] == SimpleAuction)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L889]       RET         call __var_7 := send__success(this, beneficiary_SimpleAuction[this], highestBid_SimpleAuction[this]);
[L890]       COND TRUE   !__var_7
[L892]                   revert := true;
[L297]       RET         call auctionEnd_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L298]                   assume !revert && gas >= 0;
[L1309]      RET         call auctionEnd_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:51,814 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:51,815 INFO  L82        PathProgramCache]: Analyzing trace with hash -482971938, now seen corresponding path program 1 times
[2020-05-31 02:37:51,818 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:51,845 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:51,936 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:51,938 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:51,938 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:51,943 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:52,039 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:52,039 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:52,040 INFO  L87              Difference]: Start difference. First operand 2094 states. Second operand 4 states.
[2020-05-31 02:37:52,452 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:52,452 INFO  L93              Difference]: Finished difference Result 1865 states and 3353 transitions.
[2020-05-31 02:37:52,453 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:52,454 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1865 states and 3353 transitions.
[2020-05-31 02:37:52,467 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 186
[2020-05-31 02:37:52,491 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1865 states to 1865 states and 3353 transitions.
[2020-05-31 02:37:52,492 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:37:52,492 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 6
[2020-05-31 02:37:52,493 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1865 states and 3353 transitions.
[2020-05-31 02:37:52,506 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:52,506 INFO  L728         BuchiCegarLoop]: Abstraction has 1865 states and 3353 transitions.
[2020-05-31 02:37:52,524 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1865 states and 3353 transitions.
[2020-05-31 02:37:52,566 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1865 to 1865.
[2020-05-31 02:37:52,566 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1865 states.
[2020-05-31 02:37:52,571 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1865 states to 1865 states and 3353 transitions.
[2020-05-31 02:37:52,572 INFO  L751         BuchiCegarLoop]: Abstraction has 1865 states and 3353 transitions.
[2020-05-31 02:37:52,572 INFO  L631         BuchiCegarLoop]: Abstraction has 1865 states and 3353 transitions.
[2020-05-31 02:37:52,572 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:37:52,572 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1865 states and 3353 transitions.
[2020-05-31 02:37:52,577 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 186
[2020-05-31 02:37:52,577 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:52,577 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:52,579 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:52,579 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND TRUE   __exception
[L112]               __tmp__Balance := Balance;
[L113]               __tmp__DType := DType;
[L114]               __tmp__Alloc := Alloc;
[L115]               __tmp__balance_ADDR := balance_ADDR;
[L116]               __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]               __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]               __tmp__Length := Length;
[L119]               __tmp__now := now;
[L120]               __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]               __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]               __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]               __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]               __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]               __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]               __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]               __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]   CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]               assume msgsender_MSG != null;
[L462]               __tmp__Balance[this] := 0;
[L463]               __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]               __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]               __tmp__highestBidder_SimpleAuction[this] := null;
[L466]               __tmp__highestBid_SimpleAuction[this] := 0;
[L467]   CALL        call __var_1 := FreshRefGenerator__fail();
[L438]               havoc newRef;
[L439]               assume __tmp__Alloc[newRef] == false;
[L440]               __tmp__Alloc[newRef] := true;
[L441]               assume newRef != null;
[L467]   RET         call __var_1 := FreshRefGenerator__fail();
[L468]   COND TRUE   revert
[L529]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]   COND FALSE  !(revert)
[L128]   RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]               assume revert || gas < 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND TRUE   !(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this])
[L621]               revert := true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:52,581 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:52,581 INFO  L82        PathProgramCache]: Analyzing trace with hash 1380519314, now seen corresponding path program 1 times
[2020-05-31 02:37:52,582 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:52,594 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:52,614 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:52,614 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:52,615 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:52,616 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:52,616 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:52,616 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:52,616 INFO  L87              Difference]: Start difference. First operand 1865 states and 3353 transitions. cyclomatic complexity: 1494 Second operand 4 states.
[2020-05-31 02:37:53,625 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:53,625 INFO  L93              Difference]: Finished difference Result 2435 states and 4403 transitions.
[2020-05-31 02:37:53,625 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:53,626 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2435 states and 4403 transitions.
[2020-05-31 02:37:53,655 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 198
[2020-05-31 02:37:53,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2435 states to 2345 states and 4232 transitions.
[2020-05-31 02:37:53,669 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 12
[2020-05-31 02:37:53,670 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 12
[2020-05-31 02:37:53,670 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2345 states and 4232 transitions.
[2020-05-31 02:37:53,677 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:53,677 INFO  L728         BuchiCegarLoop]: Abstraction has 2345 states and 4232 transitions.
[2020-05-31 02:37:53,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2345 states and 4232 transitions.
[2020-05-31 02:37:53,705 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2345 to 1969.
[2020-05-31 02:37:53,705 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1969 states.
[2020-05-31 02:37:53,710 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1969 states to 1969 states and 3503 transitions.
[2020-05-31 02:37:53,710 INFO  L751         BuchiCegarLoop]: Abstraction has 1969 states and 3503 transitions.
[2020-05-31 02:37:53,710 INFO  L631         BuchiCegarLoop]: Abstraction has 1969 states and 3503 transitions.
[2020-05-31 02:37:53,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:37:53,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1969 states and 3503 transitions.
[2020-05-31 02:37:53,715 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 190
[2020-05-31 02:37:53,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:53,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:53,717 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:53,717 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:53,725 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:53,725 INFO  L82        PathProgramCache]: Analyzing trace with hash -510818022, now seen corresponding path program 1 times
[2020-05-31 02:37:53,726 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:53,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:53,771 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:53,771 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:53,771 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:53,772 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:53,772 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:37:53,772 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:37:53,772 INFO  L87              Difference]: Start difference. First operand 1969 states and 3503 transitions. cyclomatic complexity: 1540 Second operand 5 states.
[2020-05-31 02:37:53,929 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:53,929 INFO  L93              Difference]: Finished difference Result 1344 states and 1510 transitions.
[2020-05-31 02:37:53,929 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:37:53,929 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1344 states and 1510 transitions.
[2020-05-31 02:37:53,933 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:53,939 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1344 states to 1344 states and 1510 transitions.
[2020-05-31 02:37:53,939 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:37:53,939 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:37:53,939 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1344 states and 1510 transitions.
[2020-05-31 02:37:53,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:53,940 INFO  L728         BuchiCegarLoop]: Abstraction has 1344 states and 1510 transitions.
[2020-05-31 02:37:53,942 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1344 states and 1510 transitions.
[2020-05-31 02:37:53,952 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1344 to 1344.
[2020-05-31 02:37:53,953 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1344 states.
[2020-05-31 02:37:53,954 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1344 states to 1344 states and 1510 transitions.
[2020-05-31 02:37:53,954 INFO  L751         BuchiCegarLoop]: Abstraction has 1344 states and 1510 transitions.
[2020-05-31 02:37:53,954 INFO  L631         BuchiCegarLoop]: Abstraction has 1344 states and 1510 transitions.
[2020-05-31 02:37:53,954 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:37:53,954 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1344 states and 1510 transitions.
[2020-05-31 02:37:53,957 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:53,957 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:53,957 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:53,957 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:53,957 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_withdraw_SimpleAuction0 := false;
[L7]                 success_send__success0 := false;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]     CALL        call main();
[L7]                 havoc val;
[L7]                 havoc user;
[L1322]              assume null == 0;
[L1323]  CALL        call this := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L1323]  RET         call this := FreshRefGenerator__success();
[L1324]              assume now >= 0;
[L1325]              assume DType[this] == SimpleAuction;
[L1326]              gas := gas - 53000;
[L1327]  CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]               havoc __exception;
[L109]               revert := false;
[L110]   COND FALSE  !(__exception)
[L133]   CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]   CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]               assume msgsender_MSG != null;
[L496]               Balance[this] := 0;
[L497]               auctionStart_SimpleAuction[this] := 0;
[L498]               biddingTime_SimpleAuction[this] := 0;
[L499]               highestBidder_SimpleAuction[this] := null;
[L500]               highestBid_SimpleAuction[this] := 0;
[L501]   CALL        call __var_1 := FreshRefGenerator__success();
[L448]               havoc newRef;
[L449]               assume Alloc[newRef] == false;
[L450]               Alloc[newRef] := true;
[L451]               assume newRef != null;
[L501]   RET         call __var_1 := FreshRefGenerator__success();
[L502]   COND FALSE  !(revert)
[L507]               pendingReturns_SimpleAuction[this] := __var_1;
[L508]               M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]               sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]               ended_SimpleAuction[this] := false;
[L511]               __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]               _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]               beneficiary_SimpleAuction[this] := null;
[L514]               beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]               assume auctionStart_SimpleAuction[this] >= 0;
[L516]               assume now >= 0;
[L517]               auctionStart_SimpleAuction[this] := now;
[L518]               assume biddingTime_SimpleAuction[this] >= 0;
[L519]               biddingTime_SimpleAuction[this] := 2587587;
[L543]   RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]   COND FALSE  !(revert)
[L133]   RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]               assume !revert && gas >= 0;
[L1327]  RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]              assume !revert && gas >= 0;
[L1331]  CALL        call CorralChoice_SimpleAuction(this);
[L1262]              havoc msgsender_MSG;
[L1263]              havoc msgvalue_MSG;
[L1264]              havoc choice;
[L1265]              havoc __ret_0_withdraw;
[L1266]              havoc __ret_0_auctionEndTime;
[L1267]              havoc tmpNow;
[L1268]              havoc gas;
[L1269]              assume gas > 4000000 && gas <= 8000000;
[L1270]              tmpNow := now;
[L1271]              havoc now;
[L1272]              assume now > tmpNow;
[L1273]              assume msgsender_MSG != null;
[L1274]              assume DType[msgsender_MSG] != SimpleAuction;
[L1275]              Alloc[msgsender_MSG] := true;
[L1276]  COND TRUE   choice == 4
[L1278]              gas := gas - 21000;
[L1279]  COND TRUE   gas >= 0
[L1281]              assume msgvalue_MSG >= 0;
[L1282]  CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]               havoc __exception;
[L150]               revert := false;
[L151]   COND FALSE  !(__exception)
[L174]   CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]               Balance[this] := Balance[this] + msgvalue_MSG;
[L614]               gas := gas - 437;
[L615]               assume now >= 0;
[L616]               assume auctionStart_SimpleAuction[this] >= 0;
[L617]               assume biddingTime_SimpleAuction[this] >= 0;
[L618]               assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]   COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]               gas := gas - 228;
[L626]               assume msgvalue_MSG >= 0;
[L627]               assume highestBid_SimpleAuction[this] >= 0;
[L628]   COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]               gas := gas - 257;
[L635]               __var_3 := null;
[L636]   COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]               gas := gas - 20266;
[L651]               highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]               gas := gas - 20013;
[L653]               assume highestBid_SimpleAuction[this] >= 0;
[L654]               assume msgvalue_MSG >= 0;
[L655]               highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]               assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]   RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                 success_bid_SimpleAuction0 := true;
[L7]                 success_bid_SimpleAuction0 := false;
[L7]                 revert := revert_hold;
[L1282]  RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]  RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:53,959 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:53,959 INFO  L82        PathProgramCache]: Analyzing trace with hash -510817808, now seen corresponding path program 1 times
[2020-05-31 02:37:53,960 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:53,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:54,035 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:54,035 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:54,035 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 02:37:54,036 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:54,036 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-31 02:37:54,036 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-05-31 02:37:54,037 INFO  L87              Difference]: Start difference. First operand 1344 states and 1510 transitions. cyclomatic complexity: 172 Second operand 9 states.
[2020-05-31 02:37:54,644 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:54,644 INFO  L93              Difference]: Finished difference Result 1566 states and 1785 transitions.
[2020-05-31 02:37:54,644 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:37:54,644 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1566 states and 1785 transitions.
[2020-05-31 02:37:54,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:54,662 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1566 states to 1566 states and 1785 transitions.
[2020-05-31 02:37:54,662 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:37:54,662 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:37:54,663 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1566 states and 1785 transitions.
[2020-05-31 02:37:54,665 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:54,665 INFO  L728         BuchiCegarLoop]: Abstraction has 1566 states and 1785 transitions.
[2020-05-31 02:37:54,667 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1566 states and 1785 transitions.
[2020-05-31 02:37:54,687 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1566 to 1422.
[2020-05-31 02:37:54,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1422 states.
[2020-05-31 02:37:54,691 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1422 states to 1422 states and 1601 transitions.
[2020-05-31 02:37:54,691 INFO  L751         BuchiCegarLoop]: Abstraction has 1422 states and 1601 transitions.
[2020-05-31 02:37:54,691 INFO  L631         BuchiCegarLoop]: Abstraction has 1422 states and 1601 transitions.
[2020-05-31 02:37:54,691 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:37:54,691 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1422 states and 1601 transitions.
[2020-05-31 02:37:54,696 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:54,696 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:54,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:54,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:54,698 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND TRUE   choice == 4
[L1065]                  gas := gas - 21000;
[L1066]      COND TRUE   gas >= 0
[L1068]                  assume msgvalue_MSG >= 0;
[L1069]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1069]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1070]      COND FALSE  !(revert)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:54,702 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:54,702 INFO  L82        PathProgramCache]: Analyzing trace with hash -1068616889, now seen corresponding path program 1 times
[2020-05-31 02:37:54,703 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:54,715 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:54,765 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:54,765 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:54,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:37:54,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:54,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:37:54,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:37:54,766 INFO  L87              Difference]: Start difference. First operand 1422 states and 1601 transitions. cyclomatic complexity: 185 Second operand 11 states.
[2020-05-31 02:37:55,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:55,232 INFO  L93              Difference]: Finished difference Result 1540 states and 1750 transitions.
[2020-05-31 02:37:55,232 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 02:37:55,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1540 states and 1750 transitions.
[2020-05-31 02:37:55,236 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:55,240 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1540 states to 1540 states and 1750 transitions.
[2020-05-31 02:37:55,240 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:37:55,241 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:37:55,241 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1540 states and 1750 transitions.
[2020-05-31 02:37:55,242 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:55,242 INFO  L728         BuchiCegarLoop]: Abstraction has 1540 states and 1750 transitions.
[2020-05-31 02:37:55,243 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1540 states and 1750 transitions.
[2020-05-31 02:37:55,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1540 to 1443.
[2020-05-31 02:37:55,253 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1443 states.
[2020-05-31 02:37:55,255 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1443 states to 1443 states and 1624 transitions.
[2020-05-31 02:37:55,255 INFO  L751         BuchiCegarLoop]: Abstraction has 1443 states and 1624 transitions.
[2020-05-31 02:37:55,255 INFO  L631         BuchiCegarLoop]: Abstraction has 1443 states and 1624 transitions.
[2020-05-31 02:37:55,255 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:37:55,255 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1443 states and 1624 transitions.
[2020-05-31 02:37:55,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:55,257 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:55,257 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:55,259 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:55,259 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND TRUE   __exception
[L112]                   __tmp__Balance := Balance;
[L113]                   __tmp__DType := DType;
[L114]                   __tmp__Alloc := Alloc;
[L115]                   __tmp__balance_ADDR := balance_ADDR;
[L116]                   __tmp__M_Ref_int_pendingReturns0 := M_Ref_int_pendingReturns0;
[L117]                   __tmp__sum_pendingReturns0 := sum_pendingReturns0;
[L118]                   __tmp__Length := Length;
[L119]                   __tmp__now := now;
[L120]                   __tmp__auctionStart_SimpleAuction := auctionStart_SimpleAuction;
[L121]                   __tmp__biddingTime_SimpleAuction := biddingTime_SimpleAuction;
[L122]                   __tmp__highestBidder_SimpleAuction := highestBidder_SimpleAuction;
[L123]                   __tmp__highestBid_SimpleAuction := highestBid_SimpleAuction;
[L124]                   __tmp__pendingReturns_SimpleAuction := pendingReturns_SimpleAuction;
[L125]                   __tmp__ended_SimpleAuction := ended_SimpleAuction;
[L126]                   __tmp___beneficiary_SimpleAuction := _beneficiary_SimpleAuction;
[L127]                   __tmp__beneficiary_SimpleAuction := beneficiary_SimpleAuction;
[L128]       CALL        call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L529]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L461]                   assume msgsender_MSG != null;
[L462]                   __tmp__Balance[this] := 0;
[L463]                   __tmp__auctionStart_SimpleAuction[this] := 0;
[L464]                   __tmp__biddingTime_SimpleAuction[this] := 0;
[L465]                   __tmp__highestBidder_SimpleAuction[this] := null;
[L466]                   __tmp__highestBid_SimpleAuction[this] := 0;
[L467]       CALL        call __var_1 := FreshRefGenerator__fail();
[L438]                   havoc newRef;
[L439]                   assume __tmp__Alloc[newRef] == false;
[L440]                   __tmp__Alloc[newRef] := true;
[L441]                   assume newRef != null;
[L467]       RET         call __var_1 := FreshRefGenerator__fail();
[L468]       COND FALSE  !(revert)
[L473]                   __tmp__pendingReturns_SimpleAuction[this] := __var_1;
[L474]                   __tmp__M_Ref_int_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L475]                   __tmp__sum_pendingReturns0[__tmp__pendingReturns_SimpleAuction[this]] := 0;
[L476]                   __tmp__ended_SimpleAuction[this] := false;
[L477]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L478]                   __tmp___beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L479]                   __tmp__beneficiary_SimpleAuction[this] := null;
[L480]                   __tmp__beneficiary_SimpleAuction[this] := __tmp___beneficiary_SimpleAuction[this];
[L481]                   assume __tmp__auctionStart_SimpleAuction[this] >= 0;
[L482]                   assume __tmp__now >= 0;
[L483]                   __tmp__auctionStart_SimpleAuction[this] := __tmp__now;
[L484]                   assume __tmp__biddingTime_SimpleAuction[this] >= 0;
[L485]                   __tmp__biddingTime_SimpleAuction[this] := 2587587;
[L529]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L530]       COND FALSE  !(revert)
[L128]       RET         call SimpleAuction_SimpleAuction__fail(this, msgsender_MSG, msgvalue_MSG);
[L129]                   assume revert || gas < 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:55,260 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:55,261 INFO  L82        PathProgramCache]: Analyzing trace with hash -521037334, now seen corresponding path program 1 times
[2020-05-31 02:37:55,261 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:55,267 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:55,283 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:55,283 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:55,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:55,284 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:55,284 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:55,284 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:55,284 INFO  L87              Difference]: Start difference. First operand 1443 states and 1624 transitions. cyclomatic complexity: 188 Second operand 4 states.
[2020-05-31 02:37:55,405 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:55,405 INFO  L93              Difference]: Finished difference Result 1767 states and 2029 transitions.
[2020-05-31 02:37:55,405 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:55,405 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1767 states and 2029 transitions.
[2020-05-31 02:37:55,408 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:37:55,413 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1767 states to 1670 states and 1923 transitions.
[2020-05-31 02:37:55,414 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1
[2020-05-31 02:37:55,414 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1
[2020-05-31 02:37:55,414 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1670 states and 1923 transitions.
[2020-05-31 02:37:55,415 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:55,415 INFO  L728         BuchiCegarLoop]: Abstraction has 1670 states and 1923 transitions.
[2020-05-31 02:37:55,416 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1670 states and 1923 transitions.
[2020-05-31 02:37:55,428 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1670 to 1390.
[2020-05-31 02:37:55,428 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1390 states.
[2020-05-31 02:37:55,429 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1390 states to 1390 states and 1558 transitions.
[2020-05-31 02:37:55,430 INFO  L751         BuchiCegarLoop]: Abstraction has 1390 states and 1558 transitions.
[2020-05-31 02:37:55,430 INFO  L631         BuchiCegarLoop]: Abstraction has 1390 states and 1558 transitions.
[2020-05-31 02:37:55,430 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:37:55,430 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1390 states and 1558 transitions.
[2020-05-31 02:37:55,431 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 02:37:55,431 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:55,431 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:55,432 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:55,432 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:55,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:55,434 INFO  L82        PathProgramCache]: Analyzing trace with hash -1569507956, now seen corresponding path program 1 times
[2020-05-31 02:37:55,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:55,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:55,467 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:55,524 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:55,524 INFO  L82        PathProgramCache]: Analyzing trace with hash 91539340, now seen corresponding path program 1 times
[2020-05-31 02:37:55,524 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:55,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:55,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:55,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:55,542 INFO  L82        PathProgramCache]: Analyzing trace with hash 1511556823, now seen corresponding path program 1 times
[2020-05-31 02:37:55,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:55,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:55,693 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 39 proven. 20 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:55,694 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:55,694 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [23] total 23
[2020-05-31 02:37:55,694 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-31 02:37:55,694 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=56, Invalid=496, Unknown=0, NotChecked=0, Total=552
[2020-05-31 02:37:55,695 INFO  L87              Difference]: Start difference. First operand 1390 states and 1558 transitions. cyclomatic complexity: 175 Second operand 24 states.
[2020-05-31 02:37:57,472 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:57,472 INFO  L93              Difference]: Finished difference Result 1986 states and 2358 transitions.
[2020-05-31 02:37:57,472 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-05-31 02:37:57,472 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1986 states and 2358 transitions.
[2020-05-31 02:37:57,478 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:37:57,485 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1986 states to 1986 states and 2358 transitions.
[2020-05-31 02:37:57,485 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-05-31 02:37:57,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3
[2020-05-31 02:37:57,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1986 states and 2358 transitions.
[2020-05-31 02:37:57,487 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:57,487 INFO  L728         BuchiCegarLoop]: Abstraction has 1986 states and 2358 transitions.
[2020-05-31 02:37:57,488 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1986 states and 2358 transitions.
[2020-05-31 02:37:57,507 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1986 to 1938.
[2020-05-31 02:37:57,507 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1938 states.
[2020-05-31 02:37:57,511 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1938 states to 1938 states and 2296 transitions.
[2020-05-31 02:37:57,511 INFO  L751         BuchiCegarLoop]: Abstraction has 1938 states and 2296 transitions.
[2020-05-31 02:37:57,511 INFO  L631         BuchiCegarLoop]: Abstraction has 1938 states and 2296 transitions.
[2020-05-31 02:37:57,511 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:37:57,511 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1938 states and 2296 transitions.
[2020-05-31 02:37:57,516 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:37:57,516 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:57,516 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:57,518 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:57,518 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND TRUE   choice == 4
[L1065]                  gas := gas - 21000;
[L1066]      COND TRUE   gas >= 0
[L1068]                  assume msgvalue_MSG >= 0;
[L1069]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1069]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1070]      COND FALSE  !(revert)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND FALSE  !(gas < 21000)
[L1053]      COND TRUE   iterate && gas >= 21000
[L1055]                  havoc msgsender_MSG;
[L1056]                  havoc msgvalue_MSG;
[L1057]                  havoc choice;
[L1058]                  havoc __ret_0_withdraw;
[L1059]                  havoc __ret_0_auctionEndTime;
[L1060]                  havoc iterate;
[L1061]      COND TRUE   DType[from] == SimpleAuction
[L1063]      COND TRUE   choice == 4
[L1065]                  gas := gas - 21000;
[L1066]      COND TRUE   gas >= 0
[L1068]                  assume msgvalue_MSG >= 0;
[L1069]      CALL        call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L1069]      RET         call bid_SimpleAuction__success(from, to, msgvalue_MSG);
[L1070]      COND FALSE  !(revert)
[L1053]      COND FALSE  !(iterate && gas >= 21000)
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:57,525 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:57,525 INFO  L82        PathProgramCache]: Analyzing trace with hash -1716527381, now seen corresponding path program 1 times
[2020-05-31 02:37:57,526 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:57,544 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:57,598 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 2 proven. 1 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-05-31 02:37:57,598 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:57,598 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 02:37:57,598 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:37:57,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:37:57,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:37:57,599 INFO  L87              Difference]: Start difference. First operand 1938 states and 2296 transitions. cyclomatic complexity: 365 Second operand 6 states.
[2020-05-31 02:37:57,677 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:57,677 INFO  L93              Difference]: Finished difference Result 1324 states and 1486 transitions.
[2020-05-31 02:37:57,677 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:37:57,677 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1324 states and 1486 transitions.
[2020-05-31 02:37:57,679 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:37:57,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1324 states to 1324 states and 1483 transitions.
[2020-05-31 02:37:57,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:37:57,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:37:57,683 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1324 states and 1483 transitions.
[2020-05-31 02:37:57,684 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:57,684 INFO  L728         BuchiCegarLoop]: Abstraction has 1324 states and 1483 transitions.
[2020-05-31 02:37:57,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1324 states and 1483 transitions.
[2020-05-31 02:37:57,693 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1324 to 1246.
[2020-05-31 02:37:57,693 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1246 states.
[2020-05-31 02:37:57,694 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1246 states to 1246 states and 1365 transitions.
[2020-05-31 02:37:57,694 INFO  L751         BuchiCegarLoop]: Abstraction has 1246 states and 1365 transitions.
[2020-05-31 02:37:57,694 INFO  L631         BuchiCegarLoop]: Abstraction has 1246 states and 1365 transitions.
[2020-05-31 02:37:57,694 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:37:57,694 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1246 states and 1365 transitions.
[2020-05-31 02:37:57,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:57,696 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:57,696 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:57,697 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:57,697 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:57,701 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:57,701 INFO  L82        PathProgramCache]: Analyzing trace with hash -476019264, now seen corresponding path program 1 times
[2020-05-31 02:37:57,702 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:57,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:57,748 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:57,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:57,778 INFO  L82        PathProgramCache]: Analyzing trace with hash -623025694, now seen corresponding path program 1 times
[2020-05-31 02:37:57,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:57,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:57,800 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-31 02:37:57,800 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:57,800 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:37:57,801 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:37:57,801 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:37:57,801 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:37:57,801 INFO  L87              Difference]: Start difference. First operand 1246 states and 1365 transitions. cyclomatic complexity: 122 Second operand 4 states.
[2020-05-31 02:37:57,808 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:57,808 INFO  L93              Difference]: Finished difference Result 1272 states and 1394 transitions.
[2020-05-31 02:37:57,808 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:37:57,809 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1272 states and 1394 transitions.
[2020-05-31 02:37:57,811 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:57,814 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1272 states to 1272 states and 1394 transitions.
[2020-05-31 02:37:57,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:37:57,814 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:37:57,814 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1272 states and 1394 transitions.
[2020-05-31 02:37:57,815 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:57,815 INFO  L728         BuchiCegarLoop]: Abstraction has 1272 states and 1394 transitions.
[2020-05-31 02:37:57,816 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1272 states and 1394 transitions.
[2020-05-31 02:37:57,826 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1272 to 1268.
[2020-05-31 02:37:57,826 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1268 states.
[2020-05-31 02:37:57,827 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1268 states to 1268 states and 1390 transitions.
[2020-05-31 02:37:57,827 INFO  L751         BuchiCegarLoop]: Abstraction has 1268 states and 1390 transitions.
[2020-05-31 02:37:57,827 INFO  L631         BuchiCegarLoop]: Abstraction has 1268 states and 1390 transitions.
[2020-05-31 02:37:57,827 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:37:57,828 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1268 states and 1390 transitions.
[2020-05-31 02:37:57,829 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:57,829 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:57,829 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:57,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:57,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND FALSE  !(gas > 2300)
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:57,834 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:57,834 INFO  L82        PathProgramCache]: Analyzing trace with hash -476019264, now seen corresponding path program 2 times
[2020-05-31 02:37:57,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:57,849 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:57,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:57,894 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:57,894 INFO  L82        PathProgramCache]: Analyzing trace with hash 1629057760, now seen corresponding path program 1 times
[2020-05-31 02:37:57,895 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:57,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:57,925 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-05-31 02:37:57,925 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:37:57,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:37:57,926 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:37:57,926 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:37:57,926 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=75, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:37:57,926 INFO  L87              Difference]: Start difference. First operand 1268 states and 1390 transitions. cyclomatic complexity: 125 Second operand 11 states.
[2020-05-31 02:37:58,150 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:58,150 INFO  L93              Difference]: Finished difference Result 1554 states and 1720 transitions.
[2020-05-31 02:37:58,150 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-31 02:37:58,150 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1554 states and 1720 transitions.
[2020-05-31 02:37:58,153 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:37:58,156 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1554 states to 1480 states and 1630 transitions.
[2020-05-31 02:37:58,156 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:37:58,156 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:37:58,156 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1480 states and 1630 transitions.
[2020-05-31 02:37:58,157 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:58,158 INFO  L728         BuchiCegarLoop]: Abstraction has 1480 states and 1630 transitions.
[2020-05-31 02:37:58,158 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1480 states and 1630 transitions.
[2020-05-31 02:37:58,167 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1480 to 1268.
[2020-05-31 02:37:58,167 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1268 states.
[2020-05-31 02:37:58,169 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1268 states to 1268 states and 1374 transitions.
[2020-05-31 02:37:58,169 INFO  L751         BuchiCegarLoop]: Abstraction has 1268 states and 1374 transitions.
[2020-05-31 02:37:58,169 INFO  L631         BuchiCegarLoop]: Abstraction has 1268 states and 1374 transitions.
[2020-05-31 02:37:58,169 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:37:58,169 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1268 states and 1374 transitions.
[2020-05-31 02:37:58,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:58,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:58,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:58,172 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:58,172 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:58,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:58,175 INFO  L82        PathProgramCache]: Analyzing trace with hash -476019264, now seen corresponding path program 3 times
[2020-05-31 02:37:58,176 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:58,190 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:58,204 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:58,228 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:58,228 INFO  L82        PathProgramCache]: Analyzing trace with hash -1121059864, now seen corresponding path program 1 times
[2020-05-31 02:37:58,229 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:58,236 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:58,297 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 18 proven. 2 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:37:58,298 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:58,298 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-05-31 02:37:58,298 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:37:58,298 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-05-31 02:37:58,298 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=334, Unknown=0, NotChecked=0, Total=380
[2020-05-31 02:37:58,298 INFO  L87              Difference]: Start difference. First operand 1268 states and 1374 transitions. cyclomatic complexity: 109 Second operand 20 states.
[2020-05-31 02:37:59,064 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:37:59,064 INFO  L93              Difference]: Finished difference Result 1495 states and 1639 transitions.
[2020-05-31 02:37:59,065 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-05-31 02:37:59,065 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1495 states and 1639 transitions.
[2020-05-31 02:37:59,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:59,069 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1495 states to 1489 states and 1633 transitions.
[2020-05-31 02:37:59,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:37:59,070 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:37:59,070 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1489 states and 1633 transitions.
[2020-05-31 02:37:59,070 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:37:59,070 INFO  L728         BuchiCegarLoop]: Abstraction has 1489 states and 1633 transitions.
[2020-05-31 02:37:59,071 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1489 states and 1633 transitions.
[2020-05-31 02:37:59,077 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1489 to 1434.
[2020-05-31 02:37:59,077 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1434 states.
[2020-05-31 02:37:59,078 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1434 states to 1434 states and 1569 transitions.
[2020-05-31 02:37:59,078 INFO  L751         BuchiCegarLoop]: Abstraction has 1434 states and 1569 transitions.
[2020-05-31 02:37:59,078 INFO  L631         BuchiCegarLoop]: Abstraction has 1434 states and 1569 transitions.
[2020-05-31 02:37:59,079 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:37:59,079 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1434 states and 1569 transitions.
[2020-05-31 02:37:59,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:37:59,080 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:37:59,080 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:37:59,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:37:59,080 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:37:59,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:59,082 INFO  L82        PathProgramCache]: Analyzing trace with hash -476019264, now seen corresponding path program 4 times
[2020-05-31 02:37:59,083 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:59,092 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:59,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:59,120 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:59,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 91539340, now seen corresponding path program 2 times
[2020-05-31 02:37:59,121 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:59,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:59,126 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:37:59,130 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:37:59,130 INFO  L82        PathProgramCache]: Analyzing trace with hash -1756682229, now seen corresponding path program 1 times
[2020-05-31 02:37:59,130 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:37:59,141 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:37:59,432 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 39 proven. 46 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:37:59,433 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:37:59,433 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-31 02:37:59,434 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-31 02:37:59,434 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=95, Invalid=961, Unknown=0, NotChecked=0, Total=1056
[2020-05-31 02:37:59,434 INFO  L87              Difference]: Start difference. First operand 1434 states and 1569 transitions. cyclomatic complexity: 138 Second operand 33 states.
[2020-05-31 02:38:00,622 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:00,622 INFO  L93              Difference]: Finished difference Result 1494 states and 1660 transitions.
[2020-05-31 02:38:00,622 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-05-31 02:38:00,622 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1494 states and 1660 transitions.
[2020-05-31 02:38:00,625 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:38:00,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1494 states to 1494 states and 1660 transitions.
[2020-05-31 02:38:00,628 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:00,628 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:00,628 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1494 states and 1660 transitions.
[2020-05-31 02:38:00,629 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:00,629 INFO  L728         BuchiCegarLoop]: Abstraction has 1494 states and 1660 transitions.
[2020-05-31 02:38:00,630 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1494 states and 1660 transitions.
[2020-05-31 02:38:00,638 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1494 to 1465.
[2020-05-31 02:38:00,638 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1465 states.
[2020-05-31 02:38:00,639 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1465 states to 1465 states and 1616 transitions.
[2020-05-31 02:38:00,639 INFO  L751         BuchiCegarLoop]: Abstraction has 1465 states and 1616 transitions.
[2020-05-31 02:38:00,639 INFO  L631         BuchiCegarLoop]: Abstraction has 1465 states and 1616 transitions.
[2020-05-31 02:38:00,639 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:38:00,640 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1465 states and 1616 transitions.
[2020-05-31 02:38:00,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:00,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:00,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:00,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:00,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:00,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:00,645 INFO  L82        PathProgramCache]: Analyzing trace with hash 1686237595, now seen corresponding path program 1 times
[2020-05-31 02:38:00,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:00,657 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:00,781 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 22 proven. 16 refuted. 0 times theorem prover too weak. 27 trivial. 0 not checked.
[2020-05-31 02:38:00,782 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:00,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-05-31 02:38:00,782 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:00,782 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-05-31 02:38:00,782 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=397, Unknown=0, NotChecked=0, Total=462
[2020-05-31 02:38:00,782 INFO  L87              Difference]: Start difference. First operand 1465 states and 1616 transitions. cyclomatic complexity: 154 Second operand 22 states.
[2020-05-31 02:38:01,481 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:01,481 INFO  L93              Difference]: Finished difference Result 1506 states and 1683 transitions.
[2020-05-31 02:38:01,482 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-31 02:38:01,482 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1506 states and 1683 transitions.
[2020-05-31 02:38:01,484 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:01,487 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1506 states to 1506 states and 1683 transitions.
[2020-05-31 02:38:01,487 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:01,488 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:01,488 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1506 states and 1683 transitions.
[2020-05-31 02:38:01,489 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:01,489 INFO  L728         BuchiCegarLoop]: Abstraction has 1506 states and 1683 transitions.
[2020-05-31 02:38:01,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1506 states and 1683 transitions.
[2020-05-31 02:38:01,498 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1506 to 1485.
[2020-05-31 02:38:01,498 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1485 states.
[2020-05-31 02:38:01,499 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1485 states to 1485 states and 1659 transitions.
[2020-05-31 02:38:01,500 INFO  L751         BuchiCegarLoop]: Abstraction has 1485 states and 1659 transitions.
[2020-05-31 02:38:01,500 INFO  L631         BuchiCegarLoop]: Abstraction has 1485 states and 1659 transitions.
[2020-05-31 02:38:01,500 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 02:38:01,500 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1485 states and 1659 transitions.
[2020-05-31 02:38:01,501 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:01,501 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:01,501 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:01,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:01,502 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:01,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:01,506 INFO  L82        PathProgramCache]: Analyzing trace with hash 50866663, now seen corresponding path program 1 times
[2020-05-31 02:38:01,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:01,519 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:02,299 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 32 proven. 53 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:38:02,299 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:02,299 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 02:38:02,299 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:02,299 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 02:38:02,300 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=222, Invalid=2328, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 02:38:02,300 INFO  L87              Difference]: Start difference. First operand 1485 states and 1659 transitions. cyclomatic complexity: 181 Second operand 51 states.
[2020-05-31 02:38:05,800 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:05,800 INFO  L93              Difference]: Finished difference Result 1831 states and 2183 transitions.
[2020-05-31 02:38:05,801 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-05-31 02:38:05,801 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1831 states and 2183 transitions.
[2020-05-31 02:38:05,803 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:05,807 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1831 states to 1831 states and 2180 transitions.
[2020-05-31 02:38:05,807 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-05-31 02:38:05,807 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2020-05-31 02:38:05,807 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1831 states and 2180 transitions.
[2020-05-31 02:38:05,808 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:05,808 INFO  L728         BuchiCegarLoop]: Abstraction has 1831 states and 2180 transitions.
[2020-05-31 02:38:05,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1831 states and 2180 transitions.
[2020-05-31 02:38:05,822 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1831 to 1694.
[2020-05-31 02:38:05,822 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1694 states.
[2020-05-31 02:38:05,823 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1694 states to 1694 states and 1966 transitions.
[2020-05-31 02:38:05,823 INFO  L751         BuchiCegarLoop]: Abstraction has 1694 states and 1966 transitions.
[2020-05-31 02:38:05,823 INFO  L631         BuchiCegarLoop]: Abstraction has 1694 states and 1966 transitions.
[2020-05-31 02:38:05,823 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 02:38:05,823 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1694 states and 1966 transitions.
[2020-05-31 02:38:05,825 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:05,825 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:05,825 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:05,826 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:05,826 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND TRUE   DType[to] == SimpleAuction
[L923]                   assume amount == 0;
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:05,829 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:05,830 INFO  L82        PathProgramCache]: Analyzing trace with hash -1252065775, now seen corresponding path program 1 times
[2020-05-31 02:38:05,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:05,841 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:05,885 INFO  L134       CoverageAnalysis]: Checked inductivity of 91 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-31 02:38:05,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:38:05,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 02:38:05,885 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:05,885 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 02:38:05,885 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 02:38:05,886 INFO  L87              Difference]: Start difference. First operand 1694 states and 1966 transitions. cyclomatic complexity: 287 Second operand 5 states.
[2020-05-31 02:38:05,897 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:05,897 INFO  L93              Difference]: Finished difference Result 1694 states and 1963 transitions.
[2020-05-31 02:38:05,897 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:38:05,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1694 states and 1963 transitions.
[2020-05-31 02:38:05,900 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:05,903 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1694 states to 1694 states and 1963 transitions.
[2020-05-31 02:38:05,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:05,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:05,903 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1694 states and 1963 transitions.
[2020-05-31 02:38:05,904 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:05,904 INFO  L728         BuchiCegarLoop]: Abstraction has 1694 states and 1963 transitions.
[2020-05-31 02:38:05,905 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1694 states and 1963 transitions.
[2020-05-31 02:38:05,915 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1694 to 1691.
[2020-05-31 02:38:05,915 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1691 states.
[2020-05-31 02:38:05,916 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1691 states to 1691 states and 1960 transitions.
[2020-05-31 02:38:05,916 INFO  L751         BuchiCegarLoop]: Abstraction has 1691 states and 1960 transitions.
[2020-05-31 02:38:05,916 INFO  L631         BuchiCegarLoop]: Abstraction has 1691 states and 1960 transitions.
[2020-05-31 02:38:05,916 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 02:38:05,917 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1691 states and 1960 transitions.
[2020-05-31 02:38:05,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 02:38:05,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:05,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:05,919 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:05,919 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:05,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:05,923 INFO  L82        PathProgramCache]: Analyzing trace with hash -612080845, now seen corresponding path program 1 times
[2020-05-31 02:38:05,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:05,943 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:05,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:05,998 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:05,998 INFO  L82        PathProgramCache]: Analyzing trace with hash 196651764, now seen corresponding path program 1 times
[2020-05-31 02:38:05,998 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:06,008 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:06,147 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 40 proven. 70 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:38:06,148 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:06,148 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-05-31 02:38:06,148 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-05-31 02:38:06,148 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-05-31 02:38:06,149 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=724, Unknown=0, NotChecked=0, Total=812
[2020-05-31 02:38:06,149 INFO  L87              Difference]: Start difference. First operand 1691 states and 1960 transitions. cyclomatic complexity: 284 Second operand 29 states.
[2020-05-31 02:38:07,358 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:07,358 INFO  L93              Difference]: Finished difference Result 2031 states and 2436 transitions.
[2020-05-31 02:38:07,358 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-05-31 02:38:07,358 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2031 states and 2436 transitions.
[2020-05-31 02:38:07,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:38:07,366 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2031 states to 2025 states and 2430 transitions.
[2020-05-31 02:38:07,366 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:07,366 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:07,366 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2025 states and 2430 transitions.
[2020-05-31 02:38:07,367 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:07,367 INFO  L728         BuchiCegarLoop]: Abstraction has 2025 states and 2430 transitions.
[2020-05-31 02:38:07,368 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2025 states and 2430 transitions.
[2020-05-31 02:38:07,378 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2025 to 2006.
[2020-05-31 02:38:07,378 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2006 states.
[2020-05-31 02:38:07,380 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2006 states to 2006 states and 2397 transitions.
[2020-05-31 02:38:07,380 INFO  L751         BuchiCegarLoop]: Abstraction has 2006 states and 2397 transitions.
[2020-05-31 02:38:07,380 INFO  L631         BuchiCegarLoop]: Abstraction has 2006 states and 2397 transitions.
[2020-05-31 02:38:07,380 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 02:38:07,380 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2006 states and 2397 transitions.
[2020-05-31 02:38:07,382 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-05-31 02:38:07,382 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:07,382 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:07,383 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:07,383 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:07,386 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:07,386 INFO  L82        PathProgramCache]: Analyzing trace with hash -612080845, now seen corresponding path program 2 times
[2020-05-31 02:38:07,386 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:07,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:07,421 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:07,447 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:07,448 INFO  L82        PathProgramCache]: Analyzing trace with hash 1755433168, now seen corresponding path program 1 times
[2020-05-31 02:38:07,448 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:07,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:07,456 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:07,461 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:07,461 INFO  L82        PathProgramCache]: Analyzing trace with hash 1749056862, now seen corresponding path program 1 times
[2020-05-31 02:38:07,461 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:07,477 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:07,777 INFO  L134       CoverageAnalysis]: Checked inductivity of 189 backedges. 63 proven. 85 refuted. 0 times theorem prover too weak. 41 trivial. 0 not checked.
[2020-05-31 02:38:07,777 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:07,777 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-05-31 02:38:07,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-05-31 02:38:07,778 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=122, Invalid=1068, Unknown=0, NotChecked=0, Total=1190
[2020-05-31 02:38:07,778 INFO  L87              Difference]: Start difference. First operand 2006 states and 2397 transitions. cyclomatic complexity: 406 Second operand 35 states.
[2020-05-31 02:38:09,093 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:09,093 INFO  L93              Difference]: Finished difference Result 2032 states and 2498 transitions.
[2020-05-31 02:38:09,093 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-05-31 02:38:09,093 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2032 states and 2498 transitions.
[2020-05-31 02:38:09,100 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 20
[2020-05-31 02:38:09,107 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2032 states to 2032 states and 2498 transitions.
[2020-05-31 02:38:09,107 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:09,108 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:09,108 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2032 states and 2498 transitions.
[2020-05-31 02:38:09,109 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:09,110 INFO  L728         BuchiCegarLoop]: Abstraction has 2032 states and 2498 transitions.
[2020-05-31 02:38:09,111 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2032 states and 2498 transitions.
[2020-05-31 02:38:09,131 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2032 to 2022.
[2020-05-31 02:38:09,131 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2022 states.
[2020-05-31 02:38:09,135 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2022 states to 2022 states and 2478 transitions.
[2020-05-31 02:38:09,135 INFO  L751         BuchiCegarLoop]: Abstraction has 2022 states and 2478 transitions.
[2020-05-31 02:38:09,135 INFO  L631         BuchiCegarLoop]: Abstraction has 2022 states and 2478 transitions.
[2020-05-31 02:38:09,135 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 02:38:09,135 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2022 states and 2478 transitions.
[2020-05-31 02:38:09,138 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 20
[2020-05-31 02:38:09,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:09,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:09,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:09,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND FALSE  !(amount_s143 > 0)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:09,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:09,142 INFO  L82        PathProgramCache]: Analyzing trace with hash -612080845, now seen corresponding path program 3 times
[2020-05-31 02:38:09,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:09,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:09,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:09,220 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:09,220 INFO  L82        PathProgramCache]: Analyzing trace with hash 91539340, now seen corresponding path program 3 times
[2020-05-31 02:38:09,220 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:09,223 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:09,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 02:38:09,228 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:09,228 INFO  L82        PathProgramCache]: Analyzing trace with hash 1164546366, now seen corresponding path program 1 times
[2020-05-31 02:38:09,228 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:09,243 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:09,473 INFO  L134       CoverageAnalysis]: Checked inductivity of 165 backedges. 39 proven. 86 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-05-31 02:38:09,473 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:09,473 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-05-31 02:38:09,474 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-05-31 02:38:09,474 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1213, Unknown=0, NotChecked=0, Total=1332
[2020-05-31 02:38:09,474 INFO  L87              Difference]: Start difference. First operand 2022 states and 2478 transitions. cyclomatic complexity: 471 Second operand 37 states.
[2020-05-31 02:38:10,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:10,560 INFO  L93              Difference]: Finished difference Result 2050 states and 2531 transitions.
[2020-05-31 02:38:10,560 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-31 02:38:10,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2050 states and 2531 transitions.
[2020-05-31 02:38:10,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 22
[2020-05-31 02:38:10,570 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2050 states to 2050 states and 2530 transitions.
[2020-05-31 02:38:10,570 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:10,570 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:10,570 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2050 states and 2530 transitions.
[2020-05-31 02:38:10,571 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:10,571 INFO  L728         BuchiCegarLoop]: Abstraction has 2050 states and 2530 transitions.
[2020-05-31 02:38:10,572 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2050 states and 2530 transitions.
[2020-05-31 02:38:10,586 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2050 to 2019.
[2020-05-31 02:38:10,586 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2019 states.
[2020-05-31 02:38:10,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2019 states to 2019 states and 2457 transitions.
[2020-05-31 02:38:10,588 INFO  L751         BuchiCegarLoop]: Abstraction has 2019 states and 2457 transitions.
[2020-05-31 02:38:10,588 INFO  L631         BuchiCegarLoop]: Abstraction has 2019 states and 2457 transitions.
[2020-05-31 02:38:10,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 02:38:10,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2019 states and 2457 transitions.
[2020-05-31 02:38:10,590 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-31 02:38:10,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:10,590 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:10,591 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:10,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:10,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:10,595 INFO  L82        PathProgramCache]: Analyzing trace with hash 638081710, now seen corresponding path program 1 times
[2020-05-31 02:38:10,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:10,609 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:10,670 INFO  L134       CoverageAnalysis]: Checked inductivity of 181 backedges. 23 proven. 94 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-05-31 02:38:10,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:10,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-05-31 02:38:10,670 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:10,670 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-31 02:38:10,670 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-31 02:38:10,670 INFO  L87              Difference]: Start difference. First operand 2019 states and 2457 transitions. cyclomatic complexity: 453 Second operand 12 states.
[2020-05-31 02:38:10,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:10,930 INFO  L93              Difference]: Finished difference Result 1860 states and 2180 transitions.
[2020-05-31 02:38:10,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:38:10,930 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1860 states and 2180 transitions.
[2020-05-31 02:38:10,932 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-31 02:38:10,936 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1860 states to 1827 states and 2144 transitions.
[2020-05-31 02:38:10,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:10,936 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:10,936 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1827 states and 2144 transitions.
[2020-05-31 02:38:10,938 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:10,938 INFO  L728         BuchiCegarLoop]: Abstraction has 1827 states and 2144 transitions.
[2020-05-31 02:38:10,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1827 states and 2144 transitions.
[2020-05-31 02:38:10,948 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1827 to 1825.
[2020-05-31 02:38:10,948 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1825 states.
[2020-05-31 02:38:10,950 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1825 states to 1825 states and 2140 transitions.
[2020-05-31 02:38:10,950 INFO  L751         BuchiCegarLoop]: Abstraction has 1825 states and 2140 transitions.
[2020-05-31 02:38:10,950 INFO  L631         BuchiCegarLoop]: Abstraction has 1825 states and 2140 transitions.
[2020-05-31 02:38:10,950 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 02:38:10,950 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1825 states and 2140 transitions.
[2020-05-31 02:38:10,951 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-31 02:38:10,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:10,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:10,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:10,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:10,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:10,957 INFO  L82        PathProgramCache]: Analyzing trace with hash 140998189, now seen corresponding path program 1 times
[2020-05-31 02:38:10,957 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:10,977 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:11,812 INFO  L134       CoverageAnalysis]: Checked inductivity of 314 backedges. 90 proven. 186 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-05-31 02:38:11,812 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:11,812 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [53] total 53
[2020-05-31 02:38:11,813 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:11,813 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 54 interpolants.
[2020-05-31 02:38:11,814 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=224, Invalid=2638, Unknown=0, NotChecked=0, Total=2862
[2020-05-31 02:38:11,814 INFO  L87              Difference]: Start difference. First operand 1825 states and 2140 transitions. cyclomatic complexity: 328 Second operand 54 states.
[2020-05-31 02:38:15,383 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:15,383 INFO  L93              Difference]: Finished difference Result 1855 states and 2233 transitions.
[2020-05-31 02:38:15,383 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-05-31 02:38:15,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1855 states and 2233 transitions.
[2020-05-31 02:38:15,387 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 24
[2020-05-31 02:38:15,391 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1855 states to 1855 states and 2233 transitions.
[2020-05-31 02:38:15,391 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:15,391 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:15,391 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1855 states and 2233 transitions.
[2020-05-31 02:38:15,392 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:15,392 INFO  L728         BuchiCegarLoop]: Abstraction has 1855 states and 2233 transitions.
[2020-05-31 02:38:15,393 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1855 states and 2233 transitions.
[2020-05-31 02:38:15,403 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1855 to 1829.
[2020-05-31 02:38:15,403 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1829 states.
[2020-05-31 02:38:15,405 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1829 states to 1829 states and 2152 transitions.
[2020-05-31 02:38:15,405 INFO  L751         BuchiCegarLoop]: Abstraction has 1829 states and 2152 transitions.
[2020-05-31 02:38:15,405 INFO  L631         BuchiCegarLoop]: Abstraction has 1829 states and 2152 transitions.
[2020-05-31 02:38:15,405 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 02:38:15,405 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1829 states and 2152 transitions.
[2020-05-31 02:38:15,407 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 18
[2020-05-31 02:38:15,407 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:15,407 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:15,408 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:15,408 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND TRUE   Balance[from] >= amount
[L1239]      CALL        call FallbackDispatch__success(from, to, amount);
[L921]       COND FALSE  !(DType[to] == SimpleAuction)
[L927]       CALL        call Fallback_UnknownType__success(from, to, amount);
[L1039]                  assume Balance[from] >= amount;
[L1040]                  Balance[from] := Balance[from] - amount;
[L1041]                  Balance[to] := Balance[to] + amount;
[L1042]      COND FALSE  !(choice == 0)
[L1048]      COND TRUE   gas < 21000
[L927]       RET         call Fallback_UnknownType__success(from, to, amount);
[L928]       COND FALSE  !(revert)
[L1239]      RET         call FallbackDispatch__success(from, to, amount);
[L1240]                  success := true;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND FALSE  !(!__var_4)
[L772]                   gas := gas - 10;
[L773]                   __ret_0_ := true;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:15,412 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:15,412 INFO  L82        PathProgramCache]: Analyzing trace with hash -403703111, now seen corresponding path program 1 times
[2020-05-31 02:38:15,412 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:15,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:16,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 305 backedges. 44 proven. 184 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-05-31 02:38:16,028 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:16,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 02:38:16,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:16,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 02:38:16,030 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=230, Invalid=2320, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 02:38:16,030 INFO  L87              Difference]: Start difference. First operand 1829 states and 2152 transitions. cyclomatic complexity: 334 Second operand 51 states.
[2020-05-31 02:38:18,501 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:18,501 INFO  L93              Difference]: Finished difference Result 1859 states and 2233 transitions.
[2020-05-31 02:38:18,501 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-05-31 02:38:18,502 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1859 states and 2233 transitions.
[2020-05-31 02:38:18,505 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-31 02:38:18,510 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1859 states to 1841 states and 2170 transitions.
[2020-05-31 02:38:18,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:18,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:18,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1841 states and 2170 transitions.
[2020-05-31 02:38:18,511 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:18,511 INFO  L728         BuchiCegarLoop]: Abstraction has 1841 states and 2170 transitions.
[2020-05-31 02:38:18,512 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1841 states and 2170 transitions.
[2020-05-31 02:38:18,520 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1841 to 1778.
[2020-05-31 02:38:18,520 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1778 states.
[2020-05-31 02:38:18,522 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1778 states to 1778 states and 2064 transitions.
[2020-05-31 02:38:18,522 INFO  L751         BuchiCegarLoop]: Abstraction has 1778 states and 2064 transitions.
[2020-05-31 02:38:18,522 INFO  L631         BuchiCegarLoop]: Abstraction has 1778 states and 2064 transitions.
[2020-05-31 02:38:18,522 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 02:38:18,523 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1778 states and 2064 transitions.
[2020-05-31 02:38:18,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-31 02:38:18,524 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:18,524 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:18,525 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:18,526 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:18,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:18,530 INFO  L82        PathProgramCache]: Analyzing trace with hash 178797748, now seen corresponding path program 1 times
[2020-05-31 02:38:18,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:18,545 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:18,678 INFO  L134       CoverageAnalysis]: Checked inductivity of 351 backedges. 3 proven. 74 refuted. 0 times theorem prover too weak. 274 trivial. 0 not checked.
[2020-05-31 02:38:18,678 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:18,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-31 02:38:18,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:18,679 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 02:38:18,679 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-05-31 02:38:18,679 INFO  L87              Difference]: Start difference. First operand 1778 states and 2064 transitions. cyclomatic complexity: 295 Second operand 13 states.
[2020-05-31 02:38:19,047 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:19,048 INFO  L93              Difference]: Finished difference Result 1782 states and 2057 transitions.
[2020-05-31 02:38:19,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:38:19,048 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1782 states and 2057 transitions.
[2020-05-31 02:38:19,050 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-31 02:38:19,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1782 states to 1776 states and 2047 transitions.
[2020-05-31 02:38:19,054 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2020-05-31 02:38:19,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2020-05-31 02:38:19,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1776 states and 2047 transitions.
[2020-05-31 02:38:19,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:19,054 INFO  L728         BuchiCegarLoop]: Abstraction has 1776 states and 2047 transitions.
[2020-05-31 02:38:19,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1776 states and 2047 transitions.
[2020-05-31 02:38:19,062 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1776 to 1770.
[2020-05-31 02:38:19,063 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1770 states.
[2020-05-31 02:38:19,064 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1770 states to 1770 states and 2041 transitions.
[2020-05-31 02:38:19,064 INFO  L751         BuchiCegarLoop]: Abstraction has 1770 states and 2041 transitions.
[2020-05-31 02:38:19,064 INFO  L631         BuchiCegarLoop]: Abstraction has 1770 states and 2041 transitions.
[2020-05-31 02:38:19,064 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 02:38:19,064 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1770 states and 2041 transitions.
[2020-05-31 02:38:19,066 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2020-05-31 02:38:19,066 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:38:19,066 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:38:19,067 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:38:19,067 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     success_send__success0 := false;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]         CALL        call main();
[L7]                     havoc val;
[L7]                     havoc user;
[L1322]                  assume null == 0;
[L1323]      CALL        call this := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L1323]      RET         call this := FreshRefGenerator__success();
[L1324]                  assume now >= 0;
[L1325]                  assume DType[this] == SimpleAuction;
[L1326]                  gas := gas - 53000;
[L1327]      CALL        call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L108]                   havoc __exception;
[L109]                   revert := false;
[L110]       COND FALSE  !(__exception)
[L133]       CALL        call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L543]       CALL        call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L495]                   assume msgsender_MSG != null;
[L496]                   Balance[this] := 0;
[L497]                   auctionStart_SimpleAuction[this] := 0;
[L498]                   biddingTime_SimpleAuction[this] := 0;
[L499]                   highestBidder_SimpleAuction[this] := null;
[L500]                   highestBid_SimpleAuction[this] := 0;
[L501]       CALL        call __var_1 := FreshRefGenerator__success();
[L448]                   havoc newRef;
[L449]                   assume Alloc[newRef] == false;
[L450]                   Alloc[newRef] := true;
[L451]                   assume newRef != null;
[L501]       RET         call __var_1 := FreshRefGenerator__success();
[L502]       COND FALSE  !(revert)
[L507]                   pendingReturns_SimpleAuction[this] := __var_1;
[L508]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]] := zeroRefIntArr();
[L509]                   sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := 0;
[L510]                   ended_SimpleAuction[this] := false;
[L511]                   __var_2 := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L512]                   _beneficiary_SimpleAuction[this] := ConstantToRef(-444150703275361836912585813844736157808586986900);
[L513]                   beneficiary_SimpleAuction[this] := null;
[L514]                   beneficiary_SimpleAuction[this] := _beneficiary_SimpleAuction[this];
[L515]                   assume auctionStart_SimpleAuction[this] >= 0;
[L516]                   assume now >= 0;
[L517]                   auctionStart_SimpleAuction[this] := now;
[L518]                   assume biddingTime_SimpleAuction[this] >= 0;
[L519]                   biddingTime_SimpleAuction[this] := 2587587;
[L543]       RET         call SimpleAuction_SimpleAuction_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L544]       COND FALSE  !(revert)
[L133]       RET         call SimpleAuction_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L134]                   assume !revert && gas >= 0;
[L1327]      RET         call SimpleAuction_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1328]                  assume !revert && gas >= 0;
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND FALSE  !(highestBidder_SimpleAuction[this] != null)
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

Loop:
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume (user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0;
[L7]                     success_bid_SimpleAuction0 := true;
[L7]                     success_bid_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND TRUE   choice == 4
[L1278]                  gas := gas - 21000;
[L1279]      COND TRUE   gas >= 0
[L1281]                  assume msgvalue_MSG >= 0;
[L1282]      CALL        call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L149]                   havoc __exception;
[L150]                   revert := false;
[L151]       COND FALSE  !(__exception)
[L174]       CALL        call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L611]                   assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L612]                   Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L613]                   Balance[this] := Balance[this] + msgvalue_MSG;
[L614]                   gas := gas - 437;
[L615]                   assume now >= 0;
[L616]                   assume auctionStart_SimpleAuction[this] >= 0;
[L617]                   assume biddingTime_SimpleAuction[this] >= 0;
[L618]                   assume auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this] >= 0;
[L619]       COND FALSE  !(!(now <= auctionStart_SimpleAuction[this] + biddingTime_SimpleAuction[this]))
[L625]                   gas := gas - 228;
[L626]                   assume msgvalue_MSG >= 0;
[L627]                   assume highestBid_SimpleAuction[this] >= 0;
[L628]       COND FALSE  !(!(msgvalue_MSG > highestBid_SimpleAuction[this]))
[L634]                   gas := gas - 257;
[L635]                   __var_3 := null;
[L636]       COND TRUE   highestBidder_SimpleAuction[this] != null
[L638]                   gas := gas - 20765;
[L639-L640]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] >= 0;
[L641]                   assume highestBid_SimpleAuction[this] >= 0;
[L642-L643]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L644-L645]              M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]] + highestBid_SimpleAuction[this];
[L646-L647]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][highestBidder_SimpleAuction[this]];
[L650]                   gas := gas - 20266;
[L651]                   highestBidder_SimpleAuction[this] := msgsender_MSG;
[L652]                   gas := gas - 20013;
[L653]                   assume highestBid_SimpleAuction[this] >= 0;
[L654]                   assume msgvalue_MSG >= 0;
[L655]                   highestBid_SimpleAuction[this] := msgvalue_MSG;
[L656]                   assert { :EventEmitted "HighestBidIncreased_SimpleAuction" } true;
[L174]       RET         call bid_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L175]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !((user == old(highestBidder_SimpleAuction[this]) && val == old(highestBid_SimpleAuction[this])) && user != 0);
[L7]                     revert := revert_hold;
[L1282]      RET         call bid_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(user == msgsender_MSG);
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);
[L1331]      CALL        call CorralChoice_SimpleAuction(this);
[L1262]                  havoc msgsender_MSG;
[L1263]                  havoc msgvalue_MSG;
[L1264]                  havoc choice;
[L1265]                  havoc __ret_0_withdraw;
[L1266]                  havoc __ret_0_auctionEndTime;
[L1267]                  havoc tmpNow;
[L1268]                  havoc gas;
[L1269]                  assume gas > 4000000 && gas <= 8000000;
[L1270]                  tmpNow := now;
[L1271]                  havoc now;
[L1272]                  assume now > tmpNow;
[L1273]                  assume msgsender_MSG != null;
[L1274]                  assume DType[msgsender_MSG] != SimpleAuction;
[L1275]                  Alloc[msgsender_MSG] := true;
[L1276]      COND FALSE  !(choice == 4)
[L1285]      COND TRUE   choice == 3
[L1287]                  gas := gas - 21000;
[L1288]      COND TRUE   gas >= 0
[L1290]                  assume msgvalue_MSG == 0;
[L1291]      CALL        call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L190]                   havoc __exception;
[L191]                   revert := false;
[L192]       COND FALSE  !(__exception)
[L215]       CALL        call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L726]                   gas := gas - 3;
[L727]                   gas := gas - 306;
[L728]                   assume amount_s143 >= 0;
[L729-L730]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L731]                   amount_s143 := M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L732]                   gas := gas - 9;
[L733]                   assume amount_s143 >= 0;
[L734]       COND TRUE   amount_s143 > 0
[L736]                   gas := gas - 5109;
[L737-L738]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L739-L740]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L741]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := 0;
[L742-L743]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L744]                   gas := gas - 35781;
[L745]                   assume amount_s143 >= 0;
[L746]                   __var_5 := gas;
[L747]       COND TRUE   gas > 2300
[L749]                   gas := 2300;
[L752]                   __var_5 := __var_5 - gas;
[L753]       CALL        call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L1207]                  havoc __exception;
[L1208]      COND FALSE  !(__exception)
[L1237]      COND FALSE  !(Balance[from] >= amount)
[L1244]                  success := false;
[L1247]                  assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume !(to == user && amount >= val);
[L7]                     revert := revert_hold;
[L753]       RET         call __var_4 := send__success(this, msgsender_MSG, amount_s143);
[L754]                   gas := __var_5 + gas;
[L755]       COND TRUE   !__var_4
[L757]                   gas := gas - 20109;
[L758-L759]              assume M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] >= 0;
[L760]                   assume amount_s143 >= 0;
[L761-L762]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] - M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L763]                   M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG] := amount_s143;
[L764-L765]              sum_pendingReturns0[pendingReturns_SimpleAuction[this]] := sum_pendingReturns0[pendingReturns_SimpleAuction[this]] + M_Ref_int_pendingReturns0[pendingReturns_SimpleAuction[this]][msgsender_MSG];
[L766]                   gas := gas - 21;
[L767]                   __ret_0_ := false;
[L215]       RET         call __ret_0_ := withdraw_SimpleAuction__success(this, msgsender_MSG, msgvalue_MSG);
[L216]                   assume !revert && gas >= 0;
[L7]                     revert_hold := revert;
[L7]                     revert := false;
[L7]                     assume user == msgsender_MSG;
[L7]                     success_withdraw_SimpleAuction0 := true;
[L7]                     success_withdraw_SimpleAuction0 := false;
[L7]                     revert := revert_hold;
[L1291]      RET         call __ret_0_withdraw := withdraw_SimpleAuction(this, msgsender_MSG, msgvalue_MSG);
[L1331]      RET         call CorralChoice_SimpleAuction(this);

[2020-05-31 02:38:19,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:38:19,071 INFO  L82        PathProgramCache]: Analyzing trace with hash -613803831, now seen corresponding path program 2 times
[2020-05-31 02:38:19,071 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:38:19,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:38:19,778 INFO  L134       CoverageAnalysis]: Checked inductivity of 441 backedges. 127 proven. 234 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-05-31 02:38:19,778 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:38:19,778 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [54] total 54
[2020-05-31 02:38:19,778 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:38:19,778 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 55 interpolants.
[2020-05-31 02:38:19,779 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=230, Invalid=2740, Unknown=0, NotChecked=0, Total=2970
[2020-05-31 02:38:19,779 INFO  L87              Difference]: Start difference. First operand 1770 states and 2041 transitions. cyclomatic complexity: 279 Second operand 55 states.
[2020-05-31 02:38:21,338 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:38:21,338 INFO  L93              Difference]: Finished difference Result 2012 states and 2303 transitions.
[2020-05-31 02:38:21,338 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-05-31 02:38:21,338 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2012 states and 2303 transitions.
[2020-05-31 02:38:21,341 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:38:21,341 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2012 states to 0 states and 0 transitions.
[2020-05-31 02:38:21,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:38:21,341 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:38:21,341 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:38:21,341 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:38:21,341 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:38:21,341 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:38:21,341 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:38:21,341 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 02:38:21,341 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:38:21,341 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:38:21,341 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:38:21,344 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:38:21 BasicIcfg
[2020-05-31 02:38:21,344 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:38:21,344 INFO  L168              Benchmark]: Toolchain (without parser) took 31407.32 ms. Allocated memory was 514.9 MB in the beginning and 2.5 GB in the end (delta: 2.0 GB). Free memory was 461.5 MB in the beginning and 2.4 GB in the end (delta: -1.9 GB). Peak memory consumption was 56.8 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,345 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,345 INFO  L168              Benchmark]: Boogie Preprocessor took 55.94 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,346 INFO  L168              Benchmark]: UtopiaSpecLang took 35.50 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,347 INFO  L168              Benchmark]: Boogie Printer took 8.54 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,348 INFO  L168              Benchmark]: RCFGBuilder took 349.18 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 415.7 MB in the end (delta: 36.4 MB). Peak memory consumption was 36.4 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,348 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.36 ms. Allocated memory is still 514.9 MB. Free memory was 415.7 MB in the beginning and 411.2 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,349 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1026.90 ms. Allocated memory was 514.9 MB in the beginning and 627.0 MB in the end (delta: 112.2 MB). Free memory was 411.2 MB in the beginning and 452.5 MB in the end (delta: -41.3 MB). Peak memory consumption was 112.4 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,349 INFO  L168              Benchmark]: BlockEncodingV2 took 88.61 ms. Allocated memory is still 627.0 MB. Free memory was 452.5 MB in the beginning and 422.5 MB in the end (delta: 30.0 MB). Peak memory consumption was 30.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,350 INFO  L168              Benchmark]: BuchiAutomizer took 29802.69 ms. Allocated memory was 627.0 MB in the beginning and 2.5 GB in the end (delta: 1.9 GB). Free memory was 422.5 MB in the beginning and 2.4 GB in the end (delta: -2.0 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:38:21,354 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2113 locations, 4687 edges
  - StatisticsResult: Encoded RCFG
    2094 locations, 4628 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 55.94 ms. Allocated memory is still 514.9 MB. Free memory was 461.5 MB in the beginning and 457.5 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 35.50 ms. Allocated memory is still 514.9 MB. Free memory was 457.5 MB in the beginning and 453.4 MB in the end (delta: 4.1 MB). Peak memory consumption was 4.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 8.54 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 452.1 MB in the end (delta: 1.3 MB). Peak memory consumption was 1.3 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 349.18 ms. Allocated memory is still 514.9 MB. Free memory was 452.1 MB in the beginning and 415.7 MB in the end (delta: 36.4 MB). Peak memory consumption was 36.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.36 ms. Allocated memory is still 514.9 MB. Free memory was 415.7 MB in the beginning and 411.2 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1026.90 ms. Allocated memory was 514.9 MB in the beginning and 627.0 MB in the end (delta: 112.2 MB). Free memory was 411.2 MB in the beginning and 452.5 MB in the end (delta: -41.3 MB). Peak memory consumption was 112.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 88.61 ms. Allocated memory is still 627.0 MB. Free memory was 452.5 MB in the beginning and 422.5 MB in the end (delta: 30.0 MB). Peak memory consumption was 30.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 29802.69 ms. Allocated memory was 627.0 MB in the beginning and 2.5 GB in the end (delta: 1.9 GB). Free memory was 422.5 MB in the beginning and 2.4 GB in the end (delta: -2.0 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    3 locations, 6 edges
  - StatisticsResult: Initial RCFG
    631 locations, 766 edges
  - StatisticsResult: BuchiProgram size
    2113 locations, 4687 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 23 terminating modules (23 trivial, 0 deterministic, 0 nondeterministic). 23 modules have a trivial ranking function, the largest among these consists of 55 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 29.7s and 24 iterations.  TraceHistogramMax:8. Analysis of lassos took 5.8s. Construction of modules took 16.5s. BÃ¼chi inclusion checks took 6.3s. Highest rank in rank-based complementation 0. Minimization of det autom 23. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 22 MinimizatonAttempts, 1641 StatesRemovedByMinimization, 20 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 2022 states and ocurred in iteration 17.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 32027 SDtfs, 58240 SDslu, 180747 SDs, 0 SdLazy, 196717 SolverSat, 7931 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 16.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI4 SFLT0 conc4 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( []( <>(success_withdraw_SimpleAuction0) ) )&& ! ( ( []( (success_bid_SimpleAuction0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
