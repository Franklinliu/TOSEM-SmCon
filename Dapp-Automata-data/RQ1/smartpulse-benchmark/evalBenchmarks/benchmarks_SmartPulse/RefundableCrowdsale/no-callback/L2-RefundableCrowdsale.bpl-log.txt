This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 03:42:56,639 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 03:42:56,640 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 03:42:56,651 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 03:42:56,652 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 03:42:56,653 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 03:42:56,654 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 03:42:56,656 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 03:42:56,658 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 03:42:56,659 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 03:42:56,660 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 03:42:56,661 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 03:42:56,662 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 03:42:56,663 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 03:42:56,665 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 03:42:56,666 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 03:42:56,667 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 03:42:56,668 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 03:42:56,669 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 03:42:56,671 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 03:42:56,672 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 03:42:56,673 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 03:42:56,675 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 03:42:56,675 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 03:42:56,675 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 03:42:56,676 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 03:42:56,677 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 03:42:56,678 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 03:42:56,678 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 03:42:56,678 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 03:42:56,678 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 03:42:56,679 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 03:42:56,680 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 03:42:56,681 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 03:42:56,682 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 03:42:56,683 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 03:42:56,683 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 03:42:56,684 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 03:42:56,684 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 03:42:56,684 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 03:42:56,686 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 03:42:56,687 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 03:42:56,687 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 03:42:56,697 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 03:42:56,697 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 03:42:56,698 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 03:42:56,698 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 03:42:56,698 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 03:42:56,698 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 03:42:56,698 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 03:42:56,698 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 03:42:56,699 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 03:42:56,699 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 03:42:56,699 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 03:42:56,699 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 03:42:56,699 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 03:42:56,699 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 03:42:56,699 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 03:42:56,699 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 03:42:56,700 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 03:42:56,700 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 03:42:56,701 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 03:42:56,720 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 03:42:56,731 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 03:42:56,733 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 03:42:56,734 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 03:42:56,735 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 03:42:56,736 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/no-callback/L2-RefundableCrowdsale.bpl
[2020-05-31 03:42:56,736 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/no-callback/L2-RefundableCrowdsale.bpl'
[2020-05-31 03:42:56,828 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 03:42:56,830 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 03:42:56,830 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 03:42:56,831 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 03:42:56,831 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 03:42:56,843 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,844 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,880 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,880 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,904 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,915 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,925 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,939 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 03:42:56,940 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 03:42:56,940 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 03:42:56,942 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 03:42:56,945 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/1) ...
[2020-05-31 03:42:56,962 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 03:42:56,967 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 03:42:56,975 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 03:42:56,982 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==fsum_buyTokens_Crowdsale_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_buyTokens_Crowdsale_2_0,GLOBAL]]]
[2020-05-31 03:42:56,983 INFO  L677   opiaSpecLangObserver]: Parsed call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msg.sender, msg.value); call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msg.sender, msg.value); call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msg.sender, msg.value);  to CallStatement[false,[VariableLHS[__finalized_FinalizableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],finalized_FinalizableCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]CallStatement[false,[VariableLHS[__goalReached_RefundableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],goalReached_RefundableCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]CallStatement[false,[VariableLHS[__hasClosed_TimedCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>]],hasClosed_TimedCrowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgsender_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>],IdentifierExpression[msgvalue_MSG,<LOCAL,CorralChoice_RefundableCrowdsale>]]]
[2020-05-31 03:42:56,984 INFO  L658   opiaSpecLangObserver]: Parsed var __finalized_FinalizableCrowdsale0: bool; var __goalReached_RefundableCrowdsale0: bool; var __hasClosed_TimedCrowdsale0: bool;  to VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/no-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__finalized_FinalizableCrowdsale0],PrimitiveType[bool],null]]]VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/no-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__goalReached_RefundableCrowdsale0],PrimitiveType[bool],null]]]VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/no-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__hasClosed_TimedCrowdsale0],PrimitiveType[bool],null]]]
[2020-05-31 03:42:56,985 INFO  L599   opiaSpecLangObserver]: Parsed ( ( __hasClosed_TimedCrowdsale==true && __goalReached_RefundableCrowdsale==true ) && __finalized_FinalizableCrowdsale==false ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__hasClosed_TimedCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[true]],BinaryExpression[COMPEQ,IdentifierExpression[__goalReached_RefundableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[true]]],BinaryExpression[COMPEQ,IdentifierExpression[__finalized_FinalizableCrowdsale0,<LOCAL,CorralChoice_RefundableCrowdsale>],BooleanLiteral[false]]]
[2020-05-31 03:42:56,985 INFO  L968   opiaSpecLangObserver]: Compiling: []((INV {TimedCrowdsale.hasClosed() == true && RefundableCrowdsale.goalReached() == true && FinalizableCrowdsale.finalized() == false}) ==> <>(finished(send(from, to, amt), (to == ben && amt == fsum(Crowdsale.buyTokens, 2)))))
[2020-05-31 03:42:56,985 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(inv_CorralChoice_RefundableCrowdsale0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 03:42:56,985 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 03:42:56,985 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 03:42:56,985 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 03:42:56,987 INFO  L677   opiaSpecLangObserver]: Parsed call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msg.sender, msg.value);  to CallStatement[false,[VariableLHS[__wallet_Crowdsale1,<LOCAL,finalize_FinalizableCrowdsale>]],wallet_Crowdsale__success,[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>],IdentifierExpression[msgvalue_MSG,<IMPLEMENTATION_INPARAM,finalize_FinalizableCrowdsale>]]]
[2020-05-31 03:42:56,987 INFO  L658   opiaSpecLangObserver]: Parsed var __wallet_Crowdsale1: int;  to VariableDeclaration[[VarList[BPL: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/RefundableCrowdsale/no-callback/L2-RefundableCrowdsale.bpl:4/0-4/4,[__wallet_Crowdsale1],PrimitiveType[int],null]]]
[2020-05-31 03:42:56,987 INFO  L599   opiaSpecLangObserver]: Parsed ben==__wallet_Crowdsale to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],IdentifierExpression[__wallet_Crowdsale1,<LOCAL,finalize_FinalizableCrowdsale>]]
[2020-05-31 03:42:56,989 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(Crowdsale.buyTokens)) && <>(finished(FinalizableCrowdsale.finalize, (ben == Crowdsale.wallet())))
[2020-05-31 03:42:56,989 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_buyTokens_Crowdsale0) ) && ( <>AP(success_finalize_FinalizableCrowdsale0) ) )
Executed UtopiaSpecLang
[2020-05-31 03:42:57,005 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 03:42:57 PropertyContainer
[2020-05-31 03:42:57,005 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 03:42:57,005 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 03:42:57,005 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 03:42:57,005 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 03:42:57,006 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/2) ...
[2020-05-31 03:42:57,006 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 03:42:57,007 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 03:42:57,028 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 03:42:57" (2/2) ...
[2020-05-31 03:42:57,028 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 03:42:57,028 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 03:42:57,028 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 03:42:57,028 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 03:42:57,029 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/2) ...
[2020-05-31 03:42:57,081 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 03:42:57,081 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-05-31 03:42:57,082 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-05-31 03:42:57,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-05-31 03:42:57,082 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-05-31 03:42:57,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 03:42:57,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-31 03:42:57,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-31 03:42:57,083 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-31 03:42:57,083 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-31 03:42:57,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary_NoBaseCtor__success
[2020-05-31 03:42:57,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary
[2020-05-31 03:42:57,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary
[2020-05-31 03:42:57,083 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary
[2020-05-31 03:42:57,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary
[2020-05-31 03:42:57,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary
[2020-05-31 03:42:57,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary
[2020-05-31 03:42:57,084 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow_NoBaseCtor__success
[2020-05-31 03:42:57,084 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow
[2020-05-31 03:42:57,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow
[2020-05-31 03:42:57,085 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow
[2020-05-31 03:42:57,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow
[2020-05-31 03:42:57,085 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow
[2020-05-31 03:42:57,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow
[2020-05-31 03:42:57,085 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow_Escrow__success
[2020-05-31 03:42:57,085 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow
[2020-05-31 03:42:57,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow
[2020-05-31 03:42:57,086 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow_Escrow__success
[2020-05-31 03:42:57,086 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success
[2020-05-31 03:42:57,086 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow
[2020-05-31 03:42:57,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow
[2020-05-31 03:42:57,086 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_ConditionalEscrow
[2020-05-31 03:42:57,086 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow
[2020-05-31 03:42:57,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow
[2020-05-31 03:42:57,087 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow_NoBaseCtor__success
[2020-05-31 03:42:57,087 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow
[2020-05-31 03:42:57,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow
[2020-05-31 03:42:57,087 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow
[2020-05-31 03:42:57,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow
[2020-05-31 03:42:57,087 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow
[2020-05-31 03:42:57,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow
[2020-05-31 03:42:57,088 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow
[2020-05-31 03:42:57,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow
[2020-05-31 03:42:57,088 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow
[2020-05-31 03:42:57,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow
[2020-05-31 03:42:57,088 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow
[2020-05-31 03:42:57,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow
[2020-05-31 03:42:57,089 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow
[2020-05-31 03:42:57,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow
[2020-05-31 03:42:57,089 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow
[2020-05-31 03:42:57,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow
[2020-05-31 03:42:57,090 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-05-31 03:42:57,090 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-05-31 03:42:57,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-05-31 03:42:57,090 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-05-31 03:42:57,090 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf_IERC20
[2020-05-31 03:42:57,090 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer_IERC20
[2020-05-31 03:42:57,091 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance_IERC20
[2020-05-31 03:42:57,091 INFO  L130     BoogieDeclarations]: Found specification of procedure approve_IERC20
[2020-05-31 03:42:57,091 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom_IERC20
[2020-05-31 03:42:57,091 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20_NoBaseCtor__success
[2020-05-31 03:42:57,091 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20
[2020-05-31 03:42:57,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20
[2020-05-31 03:42:57,091 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransfer_SafeERC20__success
[2020-05-31 03:42:57,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransferFrom_SafeERC20__success
[2020-05-31 03:42:57,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeApprove_SafeERC20__success
[2020-05-31 03:42:57,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeIncreaseAllowance_SafeERC20__success
[2020-05-31 03:42:57,092 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDecreaseAllowance_SafeERC20__success
[2020-05-31 03:42:57,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success
[2020-05-31 03:42:57,093 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard
[2020-05-31 03:42:57,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard
[2020-05-31 03:42:57,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,093 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale
[2020-05-31 03:42:57,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale
[2020-05-31 03:42:57,093 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Crowdsale__success
[2020-05-31 03:42:57,094 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale
[2020-05-31 03:42:57,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale
[2020-05-31 03:42:57,094 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale
[2020-05-31 03:42:57,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale
[2020-05-31 03:42:57,094 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale
[2020-05-31 03:42:57,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale
[2020-05-31 03:42:57,095 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale
[2020-05-31 03:42:57,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale
[2020-05-31 03:42:57,095 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale
[2020-05-31 03:42:57,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale
[2020-05-31 03:42:57,095 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale__success
[2020-05-31 03:42:57,095 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale_Crowdsale__success
[2020-05-31 03:42:57,095 INFO  L130     BoogieDeclarations]: Found specification of procedure _postValidatePurchase_Crowdsale__success
[2020-05-31 03:42:57,096 INFO  L130     BoogieDeclarations]: Found specification of procedure _deliverTokens_Crowdsale__success
[2020-05-31 03:42:57,096 INFO  L130     BoogieDeclarations]: Found specification of procedure _processPurchase_Crowdsale__success
[2020-05-31 03:42:57,096 INFO  L130     BoogieDeclarations]: Found specification of procedure _updatePurchasingState_Crowdsale__success
[2020-05-31 03:42:57,096 INFO  L130     BoogieDeclarations]: Found specification of procedure _getTokenAmount_Crowdsale__success
[2020-05-31 03:42:57,096 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_Crowdsale__success
[2020-05-31 03:42:57,096 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,097 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale
[2020-05-31 03:42:57,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale
[2020-05-31 03:42:57,097 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale
[2020-05-31 03:42:57,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale
[2020-05-31 03:42:57,097 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale
[2020-05-31 03:42:57,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale
[2020-05-31 03:42:57,098 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale
[2020-05-31 03:42:57,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale
[2020-05-31 03:42:57,098 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale
[2020-05-31 03:42:57,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale
[2020-05-31 03:42:57,098 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_TimedCrowdsale__success
[2020-05-31 03:42:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure _extendTime_TimedCrowdsale__success
[2020-05-31 03:42:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale
[2020-05-31 03:42:57,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale
[2020-05-31 03:42:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale
[2020-05-31 03:42:57,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale
[2020-05-31 03:42:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale
[2020-05-31 03:42:57,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale
[2020-05-31 03:42:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale__success
[2020-05-31 03:42:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 03:42:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale
[2020-05-31 03:42:57,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale
[2020-05-31 03:42:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale
[2020-05-31 03:42:57,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale
[2020-05-31 03:42:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale
[2020-05-31 03:42:57,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale
[2020-05-31 03:42:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale
[2020-05-31 03:42:57,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale
[2020-05-31 03:42:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_RefundableCrowdsale__success
[2020-05-31 03:42:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_RefundableCrowdsale__success
[2020-05-31 03:42:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 03:42:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 03:42:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 03:42:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPrimary_pre__success
[2020-05-31 03:42:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_pre__success
[2020-05-31 03:42:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyWhileOpen_pre__success
[2020-05-31 03:42:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_post__success
[2020-05-31 03:42:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-05-31 03:42:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-05-31 03:42:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Secondary
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Secondary
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Escrow
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Escrow
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ConditionalEscrow
[2020-05-31 03:42:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ConditionalEscrow
[2020-05-31 03:42:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RefundEscrow
[2020-05-31 03:42:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_RefundEscrow
[2020-05-31 03:42:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-05-31 03:42:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-05-31 03:42:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeERC20
[2020-05-31 03:42:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeERC20
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ReentrancyGuard
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ReentrancyGuard
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Crowdsale
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Crowdsale
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TimedCrowdsale
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TimedCrowdsale
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FinalizableCrowdsale
[2020-05-31 03:42:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FinalizableCrowdsale
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RefundableCrowdsale
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-05-31 03:42:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary_NoBaseCtor__fail
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary__success
[2020-05-31 03:42:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Secondary_Secondary__fail
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary__success
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure primary_Secondary__fail
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary__success
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transferPrimary_Secondary__fail
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow_NoBaseCtor__fail
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow__success
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Escrow_Escrow__fail
[2020-05-31 03:42:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow__success
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure depositsOf_Escrow__fail
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow__success
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow__fail
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_Escrow_Escrow__fail
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow__success
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow__fail
[2020-05-31 03:42:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_Escrow_Escrow__fail
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow__success
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ConditionalEscrow_ConditionalEscrow__fail
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow__success
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_ConditionalEscrow__fail
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow_NoBaseCtor__fail
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow__success
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundEscrow_RefundEscrow__fail
[2020-05-31 03:42:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow__success
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure state_RefundEscrow__fail
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow__success
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiary_RefundEscrow__fail
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow__success
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_RefundEscrow__fail
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow__success
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure close_RefundEscrow__fail
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow__success
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_RefundEscrow__fail
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow__success
[2020-05-31 03:42:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure beneficiaryWithdraw_RefundEscrow__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow__success
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawalAllowed_RefundEscrow__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20_NoBaseCtor__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20__success
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeERC20_SafeERC20__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransfer_SafeERC20__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure safeTransferFrom_SafeERC20__fail
[2020-05-31 03:42:57,113 INFO  L130     BoogieDeclarations]: Found specification of procedure safeApprove_SafeERC20__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure safeIncreaseAllowance_SafeERC20__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDecreaseAllowance_SafeERC20__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard__success
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ReentrancyGuard_ReentrancyGuard__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale__success
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure Crowdsale_Crowdsale__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Crowdsale__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale__success
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure token_Crowdsale__fail
[2020-05-31 03:42:57,114 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale__success
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure wallet_Crowdsale__fail
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale__success
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure rate_Crowdsale__fail
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale__success
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure weiRaised_Crowdsale__fail
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale__success
[2020-05-31 03:42:57,115 INFO  L130     BoogieDeclarations]: Found specification of procedure buyTokens_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_Crowdsale_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _postValidatePurchase_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _deliverTokens_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _processPurchase_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _updatePurchasingState_Crowdsale__fail
[2020-05-31 03:42:57,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _getTokenAmount_Crowdsale__fail
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_Crowdsale__fail
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale__success
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure TimedCrowdsale_TimedCrowdsale__fail
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale__success
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure openingTime_TimedCrowdsale__fail
[2020-05-31 03:42:57,117 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale__success
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure closingTime_TimedCrowdsale__fail
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale__success
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure isOpen_TimedCrowdsale__fail
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale__success
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure hasClosed_TimedCrowdsale__fail
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _preValidatePurchase_TimedCrowdsale__fail
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure _extendTime_TimedCrowdsale__fail
[2020-05-31 03:42:57,118 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 03:42:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale__success
[2020-05-31 03:42:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure finalized_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,119 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale__success
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure finalize_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale__success
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure RefundableCrowdsale_RefundableCrowdsale__fail
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale__success
[2020-05-31 03:42:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure goal_RefundableCrowdsale__fail
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale__success
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure claimRefund_RefundableCrowdsale__fail
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale__success
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure goalReached_RefundableCrowdsale__fail
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure _finalization_RefundableCrowdsale__fail
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure _forwardFunds_RefundableCrowdsale__fail
[2020-05-31 03:42:57,121 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 03:42:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 03:42:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 03:42:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPrimary_pre__fail
[2020-05-31 03:42:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_pre__fail
[2020-05-31 03:42:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyWhileOpen_pre__fail
[2020-05-31 03:42:57,122 INFO  L130     BoogieDeclarations]: Found specification of procedure nonReentrant_post__fail
[2020-05-31 03:42:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 03:42:57,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 03:42:57,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary_NoBaseCtor__fail
[2020-05-31 03:42:57,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary_NoBaseCtor__success
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary__fail
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure Secondary_Secondary__success
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary__fail
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure primary_Secondary__success
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary__fail
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferPrimary_Secondary__success
[2020-05-31 03:42:57,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow_NoBaseCtor__fail
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow_NoBaseCtor__success
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow__fail
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure Escrow_Escrow__success
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow__fail
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure depositsOf_Escrow__success
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow__fail
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow__success
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow_Escrow__fail
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_Escrow_Escrow__success
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow__fail
[2020-05-31 03:42:57,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow__success
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow_Escrow__fail
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_Escrow_Escrow__success
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow__fail
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ConditionalEscrow_ConditionalEscrow__success
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow__fail
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_ConditionalEscrow__success
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow_NoBaseCtor__fail
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow_NoBaseCtor__success
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow__fail
[2020-05-31 03:42:57,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundEscrow_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow__fail
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure state_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow__fail
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiary_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow__fail
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow__fail
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow__fail
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow__fail
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure beneficiaryWithdraw_RefundEscrow__success
[2020-05-31 03:42:57,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawalAllowed_RefundEscrow__success
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20_NoBaseCtor__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20_NoBaseCtor__success
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeERC20_SafeERC20__success
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransfer_SafeERC20__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransfer_SafeERC20__success
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransferFrom_SafeERC20__fail
[2020-05-31 03:42:57,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeTransferFrom_SafeERC20__success
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeApprove_SafeERC20__fail
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeApprove_SafeERC20__success
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeIncreaseAllowance_SafeERC20__fail
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeIncreaseAllowance_SafeERC20__success
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDecreaseAllowance_SafeERC20__fail
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDecreaseAllowance_SafeERC20__success
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard__fail
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure ReentrancyGuard_ReentrancyGuard__success
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale__fail
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure Crowdsale_Crowdsale__success
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Crowdsale__fail
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Crowdsale__success
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale__fail
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure token_Crowdsale__success
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale__fail
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure wallet_Crowdsale__success
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale__fail
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure rate_Crowdsale__success
[2020-05-31 03:42:57,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale__fail
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure weiRaised_Crowdsale__success
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale__fail
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyTokens_Crowdsale__success
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale__fail
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale__success
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale_Crowdsale__fail
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_Crowdsale_Crowdsale__success
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _postValidatePurchase_Crowdsale__fail
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _postValidatePurchase_Crowdsale__success
[2020-05-31 03:42:57,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure _deliverTokens_Crowdsale__fail
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _deliverTokens_Crowdsale__success
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _processPurchase_Crowdsale__fail
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _processPurchase_Crowdsale__success
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _updatePurchasingState_Crowdsale__fail
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _updatePurchasingState_Crowdsale__success
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getTokenAmount_Crowdsale__fail
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _getTokenAmount_Crowdsale__success
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_Crowdsale__fail
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_Crowdsale__success
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,133 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale__fail
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure TimedCrowdsale_TimedCrowdsale__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale__fail
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure openingTime_TimedCrowdsale__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale__fail
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure closingTime_TimedCrowdsale__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale__fail
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOpen_TimedCrowdsale__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale__fail
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasClosed_TimedCrowdsale__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_TimedCrowdsale__fail
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure _preValidatePurchase_TimedCrowdsale__success
[2020-05-31 03:42:57,134 INFO  L138     BoogieDeclarations]: Found implementation of procedure _extendTime_TimedCrowdsale__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _extendTime_TimedCrowdsale__success
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalized_FinalizableCrowdsale__success
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure finalize_FinalizableCrowdsale__success
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale__success
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__fail
[2020-05-31 03:42:57,135 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale__fail
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure RefundableCrowdsale_RefundableCrowdsale__success
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale__fail
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure goal_RefundableCrowdsale__success
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale__fail
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure claimRefund_RefundableCrowdsale__success
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale__fail
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure goalReached_RefundableCrowdsale__success
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_RefundableCrowdsale__fail
[2020-05-31 03:42:57,136 INFO  L138     BoogieDeclarations]: Found implementation of procedure _finalization_RefundableCrowdsale__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_RefundableCrowdsale__fail
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure _forwardFunds_RefundableCrowdsale__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPrimary_pre__fail
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPrimary_pre__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_pre__fail
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_pre__success
[2020-05-31 03:42:57,137 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyWhileOpen_pre__fail
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyWhileOpen_pre__success
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_post__fail
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure nonReentrant_post__success
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Secondary
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Secondary
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Escrow
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Escrow
[2020-05-31 03:42:57,138 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ConditionalEscrow
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ConditionalEscrow
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RefundEscrow
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_RefundEscrow
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeERC20
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeERC20
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ReentrancyGuard
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ReentrancyGuard
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Crowdsale
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Crowdsale
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TimedCrowdsale
[2020-05-31 03:42:57,139 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TimedCrowdsale
[2020-05-31 03:42:57,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FinalizableCrowdsale
[2020-05-31 03:42:57,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FinalizableCrowdsale
[2020-05-31 03:42:57,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RefundableCrowdsale
[2020-05-31 03:42:57,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 03:42:57,140 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 03:42:57,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 03:42:57,257 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 03:42:57,449 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 03:42:57,638 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 03:42:57,760 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 03:42:57,853 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 03:42:57,853 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-05-31 03:42:57,855 INFO  L202        PluginConnector]: Adding new model L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 03:42:57 BoogieIcfgContainer
[2020-05-31 03:42:57,855 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 03:42:57" (2/2) ...
[2020-05-31 03:42:57,855 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 03:42:57,855 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@49b9391d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 03:42:57, skipping insertion in model container
[2020-05-31 03:42:57,855 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 03:42:57,856 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 03:42:57,856 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 03:42:57,857 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 03:42:57,858 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/3) ...
[2020-05-31 03:42:57,858 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7ff641e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 03:42:57, skipping insertion in model container
[2020-05-31 03:42:57,858 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 03:42:57" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 03:42:57,907 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 03:42:57 NWAContainer
[2020-05-31 03:42:57,907 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 03:42:57,907 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 03:42:57,907 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 03:42:57,908 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 03:42:57,908 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 03:42:57" (3/4) ...
[2020-05-31 03:42:57,909 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@41899cdc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 03:42:57, skipping insertion in model container
[2020-05-31 03:42:57,909 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 03:42:57" (4/4) ...
[2020-05-31 03:42:57,912 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-31 03:42:57,917 INFO  L110   BuchiProductObserver]: Initial RCFG 3877 locations, 5267 edges
[2020-05-31 03:42:57,917 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 03:42:57,928 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 03:43:09,729 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 03:43:09,773 INFO  L110   BuchiProductObserver]: BuchiProgram size 38183 locations, 155382 edges
[2020-05-31 03:43:09,774 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 03:43:09 BoogieIcfgContainer
[2020-05-31 03:43:09,774 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 03:43:09,774 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 03:43:09,774 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 03:43:09,775 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 03:43:09,776 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 03:43:09" (1/1) ...
[2020-05-31 03:43:12,059 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,059 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,059 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,059 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,059 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,060 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,061 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,061 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,061 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,061 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,061 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,061 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,062 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,062 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,063 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,064 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,064 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,064 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,065 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,066 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,067 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,067 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,067 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,067 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,067 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,068 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,068 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,069 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__fail(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,070 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,071 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,072 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,072 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,072 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,072 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,072 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,072 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,073 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,073 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,073 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,073 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,073 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,073 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,074 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,075 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,075 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,075 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,076 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,076 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,076 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,076 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,076 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,076 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,078 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,078 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,078 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,078 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,078 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,078 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,083 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,083 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,083 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,083 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,083 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,083 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,084 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,084 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,084 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,084 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,084 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,084 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,088 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,088 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,088 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,088 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,088 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,088 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,089 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,089 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,089 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,089 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,089 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,090 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,092 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,092 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,092 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,092 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,092 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,093 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__success(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,096 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,098 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,098 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,098 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,098 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,098 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,098 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_40 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,107 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,108 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,112 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s605 := add_SafeMath__success(this, this, 0, __var_21, value_s606);
[2020-05-31 03:43:12,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,113 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,114 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,120 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeERC20_SafeERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,121 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,122 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call newAllowance_s636 := sub_SafeMath__fail(this, this, 0, __var_26, value_s637);
[2020-05-31 03:43:12,147 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,148 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,148 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,148 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,148 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,148 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 03:43:12,237 INFO  L313           BlockEncoder]: Initial Icfg 38183 locations, 155382 edges
[2020-05-31 03:43:12,238 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 03:43:12,238 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 03:43:12,238 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 03:43:12,239 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 03:43:12,311 INFO  L70    emoveInfeasibleEdges]: Removed 2573 edges and 116 locations because of local infeasibility
[2020-05-31 03:43:12,364 INFO  L70        RemoveSinkStates]: Removed 1584 edges and 468 locations by removing sink states
[2020-05-31 03:43:12,486 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 03:43:12,528 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 03:43:12,579 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 03:43:12,580 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 03:43:12,616 INFO  L313           BlockEncoder]: Encoded RCFG 37423 locations, 150650 edges
[2020-05-31 03:43:12,617 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 03:43:12 BasicIcfg
[2020-05-31 03:43:12,617 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 03:43:12,617 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 03:43:12,617 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 03:43:12,620 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 03:43:12,620 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 03:43:12,620 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 03:42:56" (1/6) ...
[2020-05-31 03:43:12,622 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@687bdfa and model type L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 03:43:12, skipping insertion in model container
[2020-05-31 03:43:12,622 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 03:43:12,622 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 03:42:57" (2/6) ...
[2020-05-31 03:43:12,622 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@687bdfa and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 03:43:12, skipping insertion in model container
[2020-05-31 03:43:12,622 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 03:43:12,622 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 03:42:57" (3/6) ...
[2020-05-31 03:43:12,622 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@687bdfa and model type L2-RefundableCrowdsale.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 03:43:12, skipping insertion in model container
[2020-05-31 03:43:12,623 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 03:43:12,623 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 03:42:57" (4/6) ...
[2020-05-31 03:43:12,623 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@687bdfa and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 03:43:12, skipping insertion in model container
[2020-05-31 03:43:12,623 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 03:43:12,623 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 03:43:09" (5/6) ...
[2020-05-31 03:43:12,623 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@687bdfa and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 03:43:12, skipping insertion in model container
[2020-05-31 03:43:12,623 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 03:43:12,623 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 03:43:12" (6/6) ...
[2020-05-31 03:43:12,624 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-RefundableCrowdsale.bpl_BEv2
[2020-05-31 03:43:12,661 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 03:43:12,661 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 03:43:12,661 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 03:43:12,661 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 03:43:12,661 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 03:43:12,661 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 03:43:12,661 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 03:43:12,661 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 03:43:12,661 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 03:43:12,974 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 37423 states.
[2020-05-31 03:43:13,254 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:13,254 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:13,254 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:13,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:13,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:13,264 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 03:43:13,264 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 37423 states.
[2020-05-31 03:43:13,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:13,413 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:13,413 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:13,416 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:13,416 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND TRUE   revert
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND TRUE   revert
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:13,431 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:13,432 INFO  L82        PathProgramCache]: Analyzing trace with hash 2068205584, now seen corresponding path program 1 times
[2020-05-31 03:43:13,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:13,451 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:13,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 03:43:13,494 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:13,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:13,497 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:13,507 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:13,507 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:13,508 INFO  L87              Difference]: Start difference. First operand 37423 states. Second operand 3 states.
[2020-05-31 03:43:15,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:15,213 INFO  L93              Difference]: Finished difference Result 20675 states and 51598 transitions.
[2020-05-31 03:43:15,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:15,215 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20675 states and 51598 transitions.
[2020-05-31 03:43:15,413 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:15,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20675 states to 20675 states and 51598 transitions.
[2020-05-31 03:43:15,670 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-31 03:43:15,672 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 151
[2020-05-31 03:43:15,673 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20675 states and 51598 transitions.
[2020-05-31 03:43:15,769 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:15,769 INFO  L728         BuchiCegarLoop]: Abstraction has 20675 states and 51598 transitions.
[2020-05-31 03:43:15,813 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20675 states and 51598 transitions.
[2020-05-31 03:43:16,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20675 to 20675.
[2020-05-31 03:43:16,388 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20675 states.
[2020-05-31 03:43:16,456 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20675 states to 20675 states and 51598 transitions.
[2020-05-31 03:43:16,457 INFO  L751         BuchiCegarLoop]: Abstraction has 20675 states and 51598 transitions.
[2020-05-31 03:43:16,457 INFO  L631         BuchiCegarLoop]: Abstraction has 20675 states and 51598 transitions.
[2020-05-31 03:43:16,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 03:43:16,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20675 states and 51598 transitions.
[2020-05-31 03:43:16,497 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:16,497 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:16,497 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:16,499 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:16,499 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND TRUE   revert
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND TRUE   revert
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7050]              revert := true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7050]              revert := true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:16,507 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:16,507 INFO  L82        PathProgramCache]: Analyzing trace with hash 1700136550, now seen corresponding path program 1 times
[2020-05-31 03:43:16,508 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:16,517 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:16,539 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 03:43:16,540 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:16,540 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:16,541 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:16,541 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:16,541 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:16,541 INFO  L87              Difference]: Start difference. First operand 20675 states and 51598 transitions. cyclomatic complexity: 30947 Second operand 3 states.
[2020-05-31 03:43:17,378 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:17,378 INFO  L93              Difference]: Finished difference Result 19745 states and 34318 transitions.
[2020-05-31 03:43:17,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:17,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19745 states and 34318 transitions.
[2020-05-31 03:43:17,428 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:17,521 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19745 states to 19745 states and 34318 transitions.
[2020-05-31 03:43:17,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 151
[2020-05-31 03:43:17,521 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 151
[2020-05-31 03:43:17,521 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19745 states and 34318 transitions.
[2020-05-31 03:43:17,543 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:17,543 INFO  L728         BuchiCegarLoop]: Abstraction has 19745 states and 34318 transitions.
[2020-05-31 03:43:17,564 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19745 states and 34318 transitions.
[2020-05-31 03:43:17,724 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19745 to 19745.
[2020-05-31 03:43:17,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19745 states.
[2020-05-31 03:43:17,762 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19745 states to 19745 states and 34318 transitions.
[2020-05-31 03:43:17,762 INFO  L751         BuchiCegarLoop]: Abstraction has 19745 states and 34318 transitions.
[2020-05-31 03:43:17,762 INFO  L631         BuchiCegarLoop]: Abstraction has 19745 states and 34318 transitions.
[2020-05-31 03:43:17,762 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 03:43:17,762 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19745 states and 34318 transitions.
[2020-05-31 03:43:17,786 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:17,786 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:17,786 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:17,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:17,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND TRUE   revert
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7050]              revert := true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:17,791 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:17,791 INFO  L82        PathProgramCache]: Analyzing trace with hash -806895919, now seen corresponding path program 1 times
[2020-05-31 03:43:17,791 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:17,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:17,814 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 03:43:17,814 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:17,815 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:17,815 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:17,815 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:17,815 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:17,815 INFO  L87              Difference]: Start difference. First operand 19745 states and 34318 transitions. cyclomatic complexity: 14597 Second operand 3 states.
[2020-05-31 03:43:18,241 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:18,241 INFO  L93              Difference]: Finished difference Result 19280 states and 23712 transitions.
[2020-05-31 03:43:18,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:18,242 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 19280 states and 23712 transitions.
[2020-05-31 03:43:18,275 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:18,329 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 19280 states to 19280 states and 23712 transitions.
[2020-05-31 03:43:18,330 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 151
[2020-05-31 03:43:18,330 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 151
[2020-05-31 03:43:18,330 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 19280 states and 23712 transitions.
[2020-05-31 03:43:18,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:18,343 INFO  L728         BuchiCegarLoop]: Abstraction has 19280 states and 23712 transitions.
[2020-05-31 03:43:18,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 19280 states and 23712 transitions.
[2020-05-31 03:43:18,468 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 19280 to 19280.
[2020-05-31 03:43:18,468 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19280 states.
[2020-05-31 03:43:18,492 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19280 states to 19280 states and 23712 transitions.
[2020-05-31 03:43:18,492 INFO  L751         BuchiCegarLoop]: Abstraction has 19280 states and 23712 transitions.
[2020-05-31 03:43:18,492 INFO  L631         BuchiCegarLoop]: Abstraction has 19280 states and 23712 transitions.
[2020-05-31 03:43:18,492 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 03:43:18,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19280 states and 23712 transitions.
[2020-05-31 03:43:18,510 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:18,510 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:18,510 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:18,512 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:18,512 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND TRUE   revert
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND TRUE   revert
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND TRUE   !_notEntered_ReentrancyGuard[this]
[L7828]              revert := true;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND TRUE   revert
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND TRUE   !!_finalized_FinalizableCrowdsale[this]
[L7050]              revert := true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND TRUE   !_notEntered_ReentrancyGuard[this]
[L7828]              revert := true;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND TRUE   revert
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:18,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:18,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 2015214918, now seen corresponding path program 1 times
[2020-05-31 03:43:18,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:18,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:18,557 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 03:43:18,557 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:18,557 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:18,557 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:18,557 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:18,558 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:18,558 INFO  L87              Difference]: Start difference. First operand 19280 states and 23712 transitions. cyclomatic complexity: 4456 Second operand 3 states.
[2020-05-31 03:43:18,912 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:18,912 INFO  L93              Difference]: Finished difference Result 22864 states and 27860 transitions.
[2020-05-31 03:43:18,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:18,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22864 states and 27860 transitions.
[2020-05-31 03:43:18,957 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:19,030 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22864 states to 21068 states and 24846 transitions.
[2020-05-31 03:43:19,030 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 158
[2020-05-31 03:43:19,030 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 168
[2020-05-31 03:43:19,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21068 states and 24846 transitions.
[2020-05-31 03:43:19,048 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:19,049 INFO  L728         BuchiCegarLoop]: Abstraction has 21068 states and 24846 transitions.
[2020-05-31 03:43:19,069 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21068 states and 24846 transitions.
[2020-05-31 03:43:19,235 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21068 to 20620.
[2020-05-31 03:43:19,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20620 states.
[2020-05-31 03:43:19,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20620 states to 20620 states and 24386 transitions.
[2020-05-31 03:43:19,278 INFO  L751         BuchiCegarLoop]: Abstraction has 20620 states and 24386 transitions.
[2020-05-31 03:43:19,278 INFO  L631         BuchiCegarLoop]: Abstraction has 20620 states and 24386 transitions.
[2020-05-31 03:43:19,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 03:43:19,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20620 states and 24386 transitions.
[2020-05-31 03:43:19,304 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:19,304 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:19,304 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:19,310 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:19,310 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND TRUE   __exception
[L2569]              __tmp__Balance := Balance;
[L2570]              __tmp__DType := DType;
[L2571]              __tmp__Alloc := Alloc;
[L2572]              __tmp__balance_ADDR := balance_ADDR;
[L2573]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2574]              __tmp__sum__deposits0 := sum__deposits0;
[L2575]              __tmp__Length := Length;
[L2576]              __tmp__now := now;
[L2577]              __tmp___primary_Secondary := _primary_Secondary;
[L2578]              __tmp___deposits_Escrow := _deposits_Escrow;
[L2579]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2580]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2581]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2582]              __tmp___token_Crowdsale := _token_Crowdsale;
[L2583]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2584]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2585]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2586]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2587]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2588]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2589]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2590]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2591]  CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7212]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L7212]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7213]  COND FALSE  !(revert)
[L7216]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L7216]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7217]  COND FALSE  !(revert)
[L7220]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6964]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L6964]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6965]  COND FALSE  !(revert)
[L6968]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L6968]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]  COND FALSE  !(revert)
[L6972]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6945]              assume msgsender_MSG != null;
[L6946]              __tmp__Balance[this] := 0;
[L6947]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6949]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6972]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6973]  COND FALSE  !(revert)
[L7220]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7221]  COND FALSE  !(revert)
[L7224]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7135]              assume msgsender_MSG != null;
[L7136]              __tmp__Balance[this] := 0;
[L7137]              __tmp___goal_RefundableCrowdsale[this] := 0;
[L7139]              assume goal_s1187 >= 0;
[L7140]  COND FALSE  !(!(goal_s1187 > 0))
[L7144]  CALL        call __var_43 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L7144]  RET         call __var_43 := FreshRefGenerator__fail();
[L7145]  COND FALSE  !(revert)
[L7148]  COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7149]  CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6000]              gas := gas - 3;
[L6001]              gas := gas - 244;
[L6002]              __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7149]  RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]  COND FALSE  !(revert)
[L7156]              assume __tmp__DType[__var_43] == RefundEscrow;
[L7157]  CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5201]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5201]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5202]  COND FALSE  !(revert)
[L5205]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5205]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5206]  COND FALSE  !(revert)
[L5209]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5209]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5062]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5066]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5070]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5213]  RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5168]              assume msgsender_MSG != null;
[L5169]              __tmp__Balance[this] := 0;
[L5170]              __tmp___beneficiary_RefundEscrow[this] := null;
[L5172]              __var_8 := null;
[L5173]  COND FALSE  !(!(beneficiary_s316 != null))
[L5177]              __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5178]              __tmp___state_RefundEscrow[this] := 0;
[L5217]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5218]  COND FALSE  !(revert)
[L7157]  RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7158]  COND FALSE  !(revert)
[L7161]              __var_42 := __var_43;
[L7162]              __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7163]              assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7164]              assume goal_s1187 >= 0;
[L7165]              __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7224]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7225]  COND FALSE  !(revert)
[L2591]  RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2592]              assume revert || gas < 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6349]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6349]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6350]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6373]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6373]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7111]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7112]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7112]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6459]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6460]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6460]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6461]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND TRUE   DType[this] == TimedCrowdsale
[L6378]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6378]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6379]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:19,320 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:19,321 INFO  L82        PathProgramCache]: Analyzing trace with hash 294458812, now seen corresponding path program 1 times
[2020-05-31 03:43:19,321 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:19,358 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:20,443 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 03:43:20,443 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:20,443 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:20,444 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:20,444 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:20,444 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:20,444 INFO  L87              Difference]: Start difference. First operand 20620 states and 24386 transitions. cyclomatic complexity: 3790 Second operand 3 states.
[2020-05-31 03:43:20,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:20,753 INFO  L93              Difference]: Finished difference Result 20868 states and 24682 transitions.
[2020-05-31 03:43:20,753 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:20,753 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20868 states and 24682 transitions.
[2020-05-31 03:43:20,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:20,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20868 states to 20868 states and 24682 transitions.
[2020-05-31 03:43:20,857 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 167
[2020-05-31 03:43:20,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 167
[2020-05-31 03:43:20,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20868 states and 24682 transitions.
[2020-05-31 03:43:20,872 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:20,872 INFO  L728         BuchiCegarLoop]: Abstraction has 20868 states and 24682 transitions.
[2020-05-31 03:43:20,890 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20868 states and 24682 transitions.
[2020-05-31 03:43:21,023 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20868 to 20828.
[2020-05-31 03:43:21,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20828 states.
[2020-05-31 03:43:21,047 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20828 states to 20828 states and 24602 transitions.
[2020-05-31 03:43:21,048 INFO  L751         BuchiCegarLoop]: Abstraction has 20828 states and 24602 transitions.
[2020-05-31 03:43:21,048 INFO  L631         BuchiCegarLoop]: Abstraction has 20828 states and 24602 transitions.
[2020-05-31 03:43:21,048 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 03:43:21,048 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20828 states and 24602 transitions.
[2020-05-31 03:43:21,068 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:21,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:21,068 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:21,071 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:21,071 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND TRUE   __exception
[L2569]              __tmp__Balance := Balance;
[L2570]              __tmp__DType := DType;
[L2571]              __tmp__Alloc := Alloc;
[L2572]              __tmp__balance_ADDR := balance_ADDR;
[L2573]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2574]              __tmp__sum__deposits0 := sum__deposits0;
[L2575]              __tmp__Length := Length;
[L2576]              __tmp__now := now;
[L2577]              __tmp___primary_Secondary := _primary_Secondary;
[L2578]              __tmp___deposits_Escrow := _deposits_Escrow;
[L2579]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2580]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2581]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2582]              __tmp___token_Crowdsale := _token_Crowdsale;
[L2583]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2584]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2585]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2586]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2587]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2588]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2589]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2590]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2591]  CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7212]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L7212]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7213]  COND FALSE  !(revert)
[L7216]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L7216]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7217]  COND FALSE  !(revert)
[L7220]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6964]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L6964]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6965]  COND FALSE  !(revert)
[L6968]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L6968]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]  COND FALSE  !(revert)
[L6972]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6945]              assume msgsender_MSG != null;
[L6946]              __tmp__Balance[this] := 0;
[L6947]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6949]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6972]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6973]  COND FALSE  !(revert)
[L7220]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7221]  COND FALSE  !(revert)
[L7224]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7135]              assume msgsender_MSG != null;
[L7136]              __tmp__Balance[this] := 0;
[L7137]              __tmp___goal_RefundableCrowdsale[this] := 0;
[L7139]              assume goal_s1187 >= 0;
[L7140]  COND FALSE  !(!(goal_s1187 > 0))
[L7144]  CALL        call __var_43 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L7144]  RET         call __var_43 := FreshRefGenerator__fail();
[L7145]  COND FALSE  !(revert)
[L7148]  COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7149]  CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6000]              gas := gas - 3;
[L6001]              gas := gas - 244;
[L6002]              __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7149]  RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]  COND FALSE  !(revert)
[L7156]              assume __tmp__DType[__var_43] == RefundEscrow;
[L7157]  CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5201]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5201]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5202]  COND FALSE  !(revert)
[L5205]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5205]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5206]  COND FALSE  !(revert)
[L5209]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5209]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5062]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5066]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5070]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5213]  RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5168]              assume msgsender_MSG != null;
[L5169]              __tmp__Balance[this] := 0;
[L5170]              __tmp___beneficiary_RefundEscrow[this] := null;
[L5172]              __var_8 := null;
[L5173]  COND FALSE  !(!(beneficiary_s316 != null))
[L5177]              __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5178]              __tmp___state_RefundEscrow[this] := 0;
[L5217]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5218]  COND FALSE  !(revert)
[L7157]  RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7158]  COND FALSE  !(revert)
[L7161]              __var_42 := __var_43;
[L7162]              __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7163]              assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7164]              assume goal_s1187 >= 0;
[L7165]              __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7224]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7225]  COND FALSE  !(revert)
[L2591]  RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2592]              assume revert || gas < 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6287]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6287]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6288]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6323]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6323]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6324]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6349]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6349]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6350]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6373]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6373]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6374]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6398]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6398]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6399]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7111]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7112]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7112]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6287]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6287]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6288]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND TRUE   DType[this] == TimedCrowdsale
[L6328]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6328]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6329]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6349]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6349]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6350]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND TRUE   DType[this] == TimedCrowdsale
[L6378]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6378]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6379]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6398]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6398]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6399]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:21,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:21,079 INFO  L82        PathProgramCache]: Analyzing trace with hash -2127368719, now seen corresponding path program 1 times
[2020-05-31 03:43:21,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:21,103 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:21,308 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 03:43:21,308 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:21,308 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:21,309 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:21,309 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:21,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:21,309 INFO  L87              Difference]: Start difference. First operand 20828 states and 24602 transitions. cyclomatic complexity: 3798 Second operand 3 states.
[2020-05-31 03:43:21,549 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:21,549 INFO  L93              Difference]: Finished difference Result 21116 states and 24938 transitions.
[2020-05-31 03:43:21,549 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:21,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21116 states and 24938 transitions.
[2020-05-31 03:43:21,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:21,653 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21116 states to 21116 states and 24938 transitions.
[2020-05-31 03:43:21,653 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 171
[2020-05-31 03:43:21,654 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 171
[2020-05-31 03:43:21,654 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21116 states and 24938 transitions.
[2020-05-31 03:43:21,668 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:21,668 INFO  L728         BuchiCegarLoop]: Abstraction has 21116 states and 24938 transitions.
[2020-05-31 03:43:21,686 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21116 states and 24938 transitions.
[2020-05-31 03:43:21,823 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21116 to 21076.
[2020-05-31 03:43:21,823 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21076 states.
[2020-05-31 03:43:21,860 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21076 states to 21076 states and 24858 transitions.
[2020-05-31 03:43:21,860 INFO  L751         BuchiCegarLoop]: Abstraction has 21076 states and 24858 transitions.
[2020-05-31 03:43:21,860 INFO  L631         BuchiCegarLoop]: Abstraction has 21076 states and 24858 transitions.
[2020-05-31 03:43:21,860 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 03:43:21,860 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21076 states and 24858 transitions.
[2020-05-31 03:43:21,895 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:21,895 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:21,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:21,900 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:21,900 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND TRUE   __exception
[L2569]              __tmp__Balance := Balance;
[L2570]              __tmp__DType := DType;
[L2571]              __tmp__Alloc := Alloc;
[L2572]              __tmp__balance_ADDR := balance_ADDR;
[L2573]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2574]              __tmp__sum__deposits0 := sum__deposits0;
[L2575]              __tmp__Length := Length;
[L2576]              __tmp__now := now;
[L2577]              __tmp___primary_Secondary := _primary_Secondary;
[L2578]              __tmp___deposits_Escrow := _deposits_Escrow;
[L2579]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2580]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2581]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2582]              __tmp___token_Crowdsale := _token_Crowdsale;
[L2583]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2584]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2585]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2586]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2587]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2588]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2589]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2590]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2591]  CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7212]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L7212]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7213]  COND FALSE  !(revert)
[L7216]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L7216]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7217]  COND FALSE  !(revert)
[L7220]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6964]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L6964]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6965]  COND FALSE  !(revert)
[L6968]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L6968]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]  COND FALSE  !(revert)
[L6972]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6945]              assume msgsender_MSG != null;
[L6946]              __tmp__Balance[this] := 0;
[L6947]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6949]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6972]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6973]  COND FALSE  !(revert)
[L7220]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7221]  COND FALSE  !(revert)
[L7224]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7135]              assume msgsender_MSG != null;
[L7136]              __tmp__Balance[this] := 0;
[L7137]              __tmp___goal_RefundableCrowdsale[this] := 0;
[L7139]              assume goal_s1187 >= 0;
[L7140]  COND FALSE  !(!(goal_s1187 > 0))
[L7144]  CALL        call __var_43 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L7144]  RET         call __var_43 := FreshRefGenerator__fail();
[L7145]  COND FALSE  !(revert)
[L7148]  COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7149]  CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6000]              gas := gas - 3;
[L6001]              gas := gas - 244;
[L6002]              __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7149]  RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]  COND FALSE  !(revert)
[L7156]              assume __tmp__DType[__var_43] == RefundEscrow;
[L7157]  CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5201]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5201]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5202]  COND FALSE  !(revert)
[L5205]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5205]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5206]  COND FALSE  !(revert)
[L5209]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5209]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5062]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5066]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5070]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5213]  RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5168]              assume msgsender_MSG != null;
[L5169]              __tmp__Balance[this] := 0;
[L5170]              __tmp___beneficiary_RefundEscrow[this] := null;
[L5172]              __var_8 := null;
[L5173]  COND FALSE  !(!(beneficiary_s316 != null))
[L5177]              __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5178]              __tmp___state_RefundEscrow[this] := 0;
[L5217]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5218]  COND FALSE  !(revert)
[L7157]  RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7158]  COND FALSE  !(revert)
[L7161]              __var_42 := __var_43;
[L7162]              __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7163]              assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7164]              assume goal_s1187 >= 0;
[L7165]              __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7224]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7225]  COND FALSE  !(revert)
[L2591]  RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2592]              assume revert || gas < 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND TRUE   DType[this] == TimedCrowdsale
[L6292]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6292]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6293]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND TRUE   DType[this] == TimedCrowdsale
[L6328]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6328]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6329]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND TRUE   DType[this] == TimedCrowdsale
[L6378]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6378]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6379]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND TRUE   DType[this] == TimedCrowdsale
[L6403]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6403]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6404]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND TRUE   DType[this] == TimedCrowdsale
[L6292]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6292]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6293]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND TRUE   DType[this] == TimedCrowdsale
[L6328]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6328]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6329]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND TRUE   DType[this] == TimedCrowdsale
[L6354]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6354]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6355]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND TRUE   DType[this] == TimedCrowdsale
[L6378]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6378]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6379]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:21,908 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:21,908 INFO  L82        PathProgramCache]: Analyzing trace with hash 668836811, now seen corresponding path program 1 times
[2020-05-31 03:43:21,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:21,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:22,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 03:43:22,151 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:22,151 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:22,152 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:22,152 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:22,152 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:22,152 INFO  L87              Difference]: Start difference. First operand 21076 states and 24858 transitions. cyclomatic complexity: 3806 Second operand 3 states.
[2020-05-31 03:43:22,349 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:22,349 INFO  L93              Difference]: Finished difference Result 21404 states and 25234 transitions.
[2020-05-31 03:43:22,349 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:22,350 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21404 states and 25234 transitions.
[2020-05-31 03:43:22,389 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:22,442 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21404 states to 21404 states and 25234 transitions.
[2020-05-31 03:43:22,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 176
[2020-05-31 03:43:22,442 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 176
[2020-05-31 03:43:22,442 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21404 states and 25234 transitions.
[2020-05-31 03:43:22,456 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:22,456 INFO  L728         BuchiCegarLoop]: Abstraction has 21404 states and 25234 transitions.
[2020-05-31 03:43:22,473 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21404 states and 25234 transitions.
[2020-05-31 03:43:22,585 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21404 to 21364.
[2020-05-31 03:43:22,585 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21364 states.
[2020-05-31 03:43:22,613 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21364 states to 21364 states and 25154 transitions.
[2020-05-31 03:43:22,613 INFO  L751         BuchiCegarLoop]: Abstraction has 21364 states and 25154 transitions.
[2020-05-31 03:43:22,613 INFO  L631         BuchiCegarLoop]: Abstraction has 21364 states and 25154 transitions.
[2020-05-31 03:43:22,613 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 03:43:22,613 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21364 states and 25154 transitions.
[2020-05-31 03:43:22,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:22,635 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:22,635 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:22,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:22,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND TRUE   __exception
[L2569]              __tmp__Balance := Balance;
[L2570]              __tmp__DType := DType;
[L2571]              __tmp__Alloc := Alloc;
[L2572]              __tmp__balance_ADDR := balance_ADDR;
[L2573]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2574]              __tmp__sum__deposits0 := sum__deposits0;
[L2575]              __tmp__Length := Length;
[L2576]              __tmp__now := now;
[L2577]              __tmp___primary_Secondary := _primary_Secondary;
[L2578]              __tmp___deposits_Escrow := _deposits_Escrow;
[L2579]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2580]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2581]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2582]              __tmp___token_Crowdsale := _token_Crowdsale;
[L2583]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2584]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2585]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2586]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2587]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2588]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2589]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2590]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2591]  CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7212]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L7212]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7213]  COND FALSE  !(revert)
[L7216]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L7216]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7217]  COND FALSE  !(revert)
[L7220]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6964]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L6964]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6965]  COND FALSE  !(revert)
[L6968]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L6968]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]  COND FALSE  !(revert)
[L6972]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6945]              assume msgsender_MSG != null;
[L6946]              __tmp__Balance[this] := 0;
[L6947]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6949]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6972]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6973]  COND FALSE  !(revert)
[L7220]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7221]  COND FALSE  !(revert)
[L7224]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7135]              assume msgsender_MSG != null;
[L7136]              __tmp__Balance[this] := 0;
[L7137]              __tmp___goal_RefundableCrowdsale[this] := 0;
[L7139]              assume goal_s1187 >= 0;
[L7140]  COND FALSE  !(!(goal_s1187 > 0))
[L7144]  CALL        call __var_43 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L7144]  RET         call __var_43 := FreshRefGenerator__fail();
[L7145]  COND FALSE  !(revert)
[L7148]  COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7149]  CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6000]              gas := gas - 3;
[L6001]              gas := gas - 244;
[L6002]              __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7149]  RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]  COND FALSE  !(revert)
[L7156]              assume __tmp__DType[__var_43] == RefundEscrow;
[L7157]  CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5201]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5201]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5202]  COND FALSE  !(revert)
[L5205]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5205]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5206]  COND FALSE  !(revert)
[L5209]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5209]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5062]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5066]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5070]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5213]  RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5168]              assume msgsender_MSG != null;
[L5169]              __tmp__Balance[this] := 0;
[L5170]              __tmp___beneficiary_RefundEscrow[this] := null;
[L5172]              __var_8 := null;
[L5173]  COND FALSE  !(!(beneficiary_s316 != null))
[L5177]              __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5178]              __tmp___state_RefundEscrow[this] := 0;
[L5217]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5218]  COND FALSE  !(revert)
[L7157]  RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7158]  COND FALSE  !(revert)
[L7161]              __var_42 := __var_43;
[L7162]              __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7163]              assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7164]              assume goal_s1187 >= 0;
[L7165]              __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7224]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7225]  COND FALSE  !(revert)
[L2591]  RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2592]              assume revert || gas < 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND TRUE   revert
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:22,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:22,646 INFO  L82        PathProgramCache]: Analyzing trace with hash 1193736689, now seen corresponding path program 1 times
[2020-05-31 03:43:22,646 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:22,671 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:22,863 INFO  L134       CoverageAnalysis]: Checked inductivity of 672 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 672 trivial. 0 not checked.
[2020-05-31 03:43:22,863 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:22,863 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:43:22,864 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:22,864 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:43:22,864 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:43:22,864 INFO  L87              Difference]: Start difference. First operand 21364 states and 25154 transitions. cyclomatic complexity: 3814 Second operand 4 states.
[2020-05-31 03:43:29,761 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:29,761 INFO  L93              Difference]: Finished difference Result 21799 states and 24875 transitions.
[2020-05-31 03:43:29,761 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:43:29,761 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21799 states and 24875 transitions.
[2020-05-31 03:43:29,810 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:29,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21799 states to 21799 states and 24875 transitions.
[2020-05-31 03:43:29,868 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 165
[2020-05-31 03:43:29,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 165
[2020-05-31 03:43:29,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21799 states and 24875 transitions.
[2020-05-31 03:43:29,884 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:29,884 INFO  L728         BuchiCegarLoop]: Abstraction has 21799 states and 24875 transitions.
[2020-05-31 03:43:29,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21799 states and 24875 transitions.
[2020-05-31 03:43:30,023 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21799 to 21186.
[2020-05-31 03:43:30,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21186 states.
[2020-05-31 03:43:30,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21186 states to 21186 states and 24207 transitions.
[2020-05-31 03:43:30,055 INFO  L751         BuchiCegarLoop]: Abstraction has 21186 states and 24207 transitions.
[2020-05-31 03:43:30,055 INFO  L631         BuchiCegarLoop]: Abstraction has 21186 states and 24207 transitions.
[2020-05-31 03:43:30,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 03:43:30,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21186 states and 24207 transitions.
[2020-05-31 03:43:30,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:30,078 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:30,078 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:30,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:30,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:30,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:30,090 INFO  L82        PathProgramCache]: Analyzing trace with hash -1074351150, now seen corresponding path program 1 times
[2020-05-31 03:43:30,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:30,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:30,295 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 03:43:30,295 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:30,296 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:43:30,296 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:30,296 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:43:30,296 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:43:30,296 INFO  L87              Difference]: Start difference. First operand 21186 states and 24207 transitions. cyclomatic complexity: 3045 Second operand 3 states.
[2020-05-31 03:43:30,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:30,556 INFO  L93              Difference]: Finished difference Result 21234 states and 24255 transitions.
[2020-05-31 03:43:30,557 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:43:30,557 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21234 states and 24255 transitions.
[2020-05-31 03:43:30,593 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:30,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21234 states to 21234 states and 24255 transitions.
[2020-05-31 03:43:30,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 161
[2020-05-31 03:43:30,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 161
[2020-05-31 03:43:30,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21234 states and 24255 transitions.
[2020-05-31 03:43:30,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:30,662 INFO  L728         BuchiCegarLoop]: Abstraction has 21234 states and 24255 transitions.
[2020-05-31 03:43:30,681 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21234 states and 24255 transitions.
[2020-05-31 03:43:30,796 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21234 to 21210.
[2020-05-31 03:43:30,796 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21210 states.
[2020-05-31 03:43:30,825 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21210 states to 21210 states and 24231 transitions.
[2020-05-31 03:43:30,825 INFO  L751         BuchiCegarLoop]: Abstraction has 21210 states and 24231 transitions.
[2020-05-31 03:43:30,825 INFO  L631         BuchiCegarLoop]: Abstraction has 21210 states and 24231 transitions.
[2020-05-31 03:43:30,825 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 03:43:30,825 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21210 states and 24231 transitions.
[2020-05-31 03:43:30,848 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:30,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:30,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:30,851 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:30,851 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7058]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7059]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7059]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7111]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7112]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7112]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:30,858 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:30,858 INFO  L82        PathProgramCache]: Analyzing trace with hash 410337285, now seen corresponding path program 1 times
[2020-05-31 03:43:30,859 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:30,872 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:31,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 702 backedges. 0 proven. 39 refuted. 0 times theorem prover too weak. 663 trivial. 0 not checked.
[2020-05-31 03:43:31,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:43:31,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 03:43:31,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:31,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 03:43:31,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 03:43:31,202 INFO  L87              Difference]: Start difference. First operand 21210 states and 24231 transitions. cyclomatic complexity: 3045 Second operand 6 states.
[2020-05-31 03:43:31,566 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:31,567 INFO  L93              Difference]: Finished difference Result 21232 states and 24257 transitions.
[2020-05-31 03:43:31,567 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 03:43:31,567 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21232 states and 24257 transitions.
[2020-05-31 03:43:31,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:31,657 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21232 states to 21219 states and 24241 transitions.
[2020-05-31 03:43:31,657 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 161
[2020-05-31 03:43:31,657 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 161
[2020-05-31 03:43:31,657 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21219 states and 24241 transitions.
[2020-05-31 03:43:31,670 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:31,671 INFO  L728         BuchiCegarLoop]: Abstraction has 21219 states and 24241 transitions.
[2020-05-31 03:43:31,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21219 states and 24241 transitions.
[2020-05-31 03:43:31,804 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21219 to 21219.
[2020-05-31 03:43:31,804 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21219 states.
[2020-05-31 03:43:31,834 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21219 states to 21219 states and 24241 transitions.
[2020-05-31 03:43:31,834 INFO  L751         BuchiCegarLoop]: Abstraction has 21219 states and 24241 transitions.
[2020-05-31 03:43:31,834 INFO  L631         BuchiCegarLoop]: Abstraction has 21219 states and 24241 transitions.
[2020-05-31 03:43:31,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 03:43:31,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21219 states and 24241 transitions.
[2020-05-31 03:43:31,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:31,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:31,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:31,860 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:31,860 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7058]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7059]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7059]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7111]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7112]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7112]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7113]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:31,867 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:31,867 INFO  L82        PathProgramCache]: Analyzing trace with hash 890763363, now seen corresponding path program 1 times
[2020-05-31 03:43:31,868 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:31,890 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:32,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 03:43:32,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:32,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:43:32,059 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:32,059 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:43:32,059 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:43:32,060 INFO  L87              Difference]: Start difference. First operand 21219 states and 24241 transitions. cyclomatic complexity: 3046 Second operand 4 states.
[2020-05-31 03:43:32,154 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:32,154 INFO  L93              Difference]: Finished difference Result 21299 states and 24333 transitions.
[2020-05-31 03:43:32,154 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:43:32,154 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21299 states and 24333 transitions.
[2020-05-31 03:43:32,194 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:32,252 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21299 states to 21283 states and 24317 transitions.
[2020-05-31 03:43:32,252 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-05-31 03:43:32,253 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 166
[2020-05-31 03:43:32,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21283 states and 24317 transitions.
[2020-05-31 03:43:32,268 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:32,268 INFO  L728         BuchiCegarLoop]: Abstraction has 21283 states and 24317 transitions.
[2020-05-31 03:43:32,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21283 states and 24317 transitions.
[2020-05-31 03:43:32,406 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21283 to 21283.
[2020-05-31 03:43:32,406 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21283 states.
[2020-05-31 03:43:32,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21283 states to 21283 states and 24317 transitions.
[2020-05-31 03:43:32,437 INFO  L751         BuchiCegarLoop]: Abstraction has 21283 states and 24317 transitions.
[2020-05-31 03:43:32,438 INFO  L631         BuchiCegarLoop]: Abstraction has 21283 states and 24317 transitions.
[2020-05-31 03:43:32,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 03:43:32,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21283 states and 24317 transitions.
[2020-05-31 03:43:32,460 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:32,461 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:32,461 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:32,463 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:32,464 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7058]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7059]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7059]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:32,470 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:32,470 INFO  L82        PathProgramCache]: Analyzing trace with hash -338394417, now seen corresponding path program 1 times
[2020-05-31 03:43:32,471 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:32,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:32,687 INFO  L134       CoverageAnalysis]: Checked inductivity of 687 backedges. 9 proven. 33 refuted. 0 times theorem prover too weak. 645 trivial. 0 not checked.
[2020-05-31 03:43:32,687 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:43:32,687 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-05-31 03:43:32,687 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:32,688 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 03:43:32,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 03:43:32,688 INFO  L87              Difference]: Start difference. First operand 21283 states and 24317 transitions. cyclomatic complexity: 3058 Second operand 7 states.
[2020-05-31 03:43:33,060 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:33,060 INFO  L93              Difference]: Finished difference Result 21300 states and 24337 transitions.
[2020-05-31 03:43:33,060 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 03:43:33,060 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21300 states and 24337 transitions.
[2020-05-31 03:43:33,096 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:33,151 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21300 states to 21290 states and 24325 transitions.
[2020-05-31 03:43:33,151 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-05-31 03:43:33,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 166
[2020-05-31 03:43:33,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21290 states and 24325 transitions.
[2020-05-31 03:43:33,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:33,166 INFO  L728         BuchiCegarLoop]: Abstraction has 21290 states and 24325 transitions.
[2020-05-31 03:43:33,185 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21290 states and 24325 transitions.
[2020-05-31 03:43:33,302 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21290 to 21290.
[2020-05-31 03:43:33,302 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21290 states.
[2020-05-31 03:43:33,332 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21290 states to 21290 states and 24325 transitions.
[2020-05-31 03:43:33,332 INFO  L751         BuchiCegarLoop]: Abstraction has 21290 states and 24325 transitions.
[2020-05-31 03:43:33,332 INFO  L631         BuchiCegarLoop]: Abstraction has 21290 states and 24325 transitions.
[2020-05-31 03:43:33,332 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 03:43:33,332 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21290 states and 24325 transitions.
[2020-05-31 03:43:33,354 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:33,354 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:33,355 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:33,357 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:33,357 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND FALSE  !(DType[this] == RefundEscrow)
[L4632]  COND TRUE   DType[this] == ConditionalEscrow
[L4633]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4633]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4634]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7058]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7059]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7059]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:33,364 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:33,364 INFO  L82        PathProgramCache]: Analyzing trace with hash -1586906462, now seen corresponding path program 1 times
[2020-05-31 03:43:33,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:33,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:33,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 684 backedges. 34 proven. 0 refuted. 0 times theorem prover too weak. 650 trivial. 0 not checked.
[2020-05-31 03:43:33,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:33,561 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 03:43:33,561 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:33,562 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 03:43:33,562 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 03:43:33,562 INFO  L87              Difference]: Start difference. First operand 21290 states and 24325 transitions. cyclomatic complexity: 3059 Second operand 8 states.
[2020-05-31 03:43:33,954 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:33,954 INFO  L93              Difference]: Finished difference Result 21322 states and 24363 transitions.
[2020-05-31 03:43:33,954 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-31 03:43:33,954 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21322 states and 24363 transitions.
[2020-05-31 03:43:33,990 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:34,045 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21322 states to 21259 states and 24286 transitions.
[2020-05-31 03:43:34,046 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-05-31 03:43:34,046 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 166
[2020-05-31 03:43:34,046 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21259 states and 24286 transitions.
[2020-05-31 03:43:34,061 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:34,061 INFO  L728         BuchiCegarLoop]: Abstraction has 21259 states and 24286 transitions.
[2020-05-31 03:43:34,080 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21259 states and 24286 transitions.
[2020-05-31 03:43:34,195 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21259 to 21259.
[2020-05-31 03:43:34,196 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21259 states.
[2020-05-31 03:43:34,225 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21259 states to 21259 states and 24286 transitions.
[2020-05-31 03:43:34,226 INFO  L751         BuchiCegarLoop]: Abstraction has 21259 states and 24286 transitions.
[2020-05-31 03:43:34,226 INFO  L631         BuchiCegarLoop]: Abstraction has 21259 states and 24286 transitions.
[2020-05-31 03:43:34,226 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 03:43:34,226 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21259 states and 24286 transitions.
[2020-05-31 03:43:34,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:34,249 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:34,249 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:34,252 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:34,252 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7058]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7059]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7059]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:34,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:34,259 INFO  L82        PathProgramCache]: Analyzing trace with hash 689502591, now seen corresponding path program 1 times
[2020-05-31 03:43:34,259 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:34,281 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:34,524 INFO  L134       CoverageAnalysis]: Checked inductivity of 696 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 696 trivial. 0 not checked.
[2020-05-31 03:43:34,525 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:34,525 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 03:43:34,525 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:34,526 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 03:43:34,526 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 03:43:34,526 INFO  L87              Difference]: Start difference. First operand 21259 states and 24286 transitions. cyclomatic complexity: 3051 Second operand 6 states.
[2020-05-31 03:43:35,159 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:35,159 INFO  L93              Difference]: Finished difference Result 21499 states and 24602 transitions.
[2020-05-31 03:43:35,159 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 03:43:35,160 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21499 states and 24602 transitions.
[2020-05-31 03:43:35,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:35,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21499 states to 21299 states and 24358 transitions.
[2020-05-31 03:43:35,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 171
[2020-05-31 03:43:35,245 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 171
[2020-05-31 03:43:35,245 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21299 states and 24358 transitions.
[2020-05-31 03:43:35,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:35,260 INFO  L728         BuchiCegarLoop]: Abstraction has 21299 states and 24358 transitions.
[2020-05-31 03:43:35,278 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21299 states and 24358 transitions.
[2020-05-31 03:43:35,391 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21299 to 21299.
[2020-05-31 03:43:35,391 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21299 states.
[2020-05-31 03:43:35,420 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21299 states to 21299 states and 24358 transitions.
[2020-05-31 03:43:35,420 INFO  L751         BuchiCegarLoop]: Abstraction has 21299 states and 24358 transitions.
[2020-05-31 03:43:35,420 INFO  L631         BuchiCegarLoop]: Abstraction has 21299 states and 24358 transitions.
[2020-05-31 03:43:35,421 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 03:43:35,421 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21299 states and 24358 transitions.
[2020-05-31 03:43:35,443 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:35,443 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:35,443 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:35,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:35,445 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7058]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7059]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7059]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7076]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7077]  CALL        call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7106]  COND TRUE   DType[this] == RefundableCrowdsale
[L7107]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7107]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7108]  COND FALSE  !(revert)
[L7077]  RET         call _finalization_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7078]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7870]  COND TRUE   DType[this] == FinalizableCrowdsale
[L7871]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7871]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7872]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:35,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:35,451 INFO  L82        PathProgramCache]: Analyzing trace with hash -923803135, now seen corresponding path program 1 times
[2020-05-31 03:43:35,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:35,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:35,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 717 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 717 trivial. 0 not checked.
[2020-05-31 03:43:35,691 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:35,691 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 03:43:35,691 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:35,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 03:43:35,692 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-05-31 03:43:35,692 INFO  L87              Difference]: Start difference. First operand 21299 states and 24358 transitions. cyclomatic complexity: 3083 Second operand 6 states.
[2020-05-31 03:43:36,135 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:36,136 INFO  L93              Difference]: Finished difference Result 21539 states and 24642 transitions.
[2020-05-31 03:43:36,136 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 03:43:36,136 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21539 states and 24642 transitions.
[2020-05-31 03:43:36,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:36,232 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21539 states to 21099 states and 24110 transitions.
[2020-05-31 03:43:36,233 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 171
[2020-05-31 03:43:36,233 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 171
[2020-05-31 03:43:36,233 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21099 states and 24110 transitions.
[2020-05-31 03:43:36,248 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:36,248 INFO  L728         BuchiCegarLoop]: Abstraction has 21099 states and 24110 transitions.
[2020-05-31 03:43:36,266 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21099 states and 24110 transitions.
[2020-05-31 03:43:36,385 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21099 to 21099.
[2020-05-31 03:43:36,385 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21099 states.
[2020-05-31 03:43:36,416 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21099 states to 21099 states and 24110 transitions.
[2020-05-31 03:43:36,416 INFO  L751         BuchiCegarLoop]: Abstraction has 21099 states and 24110 transitions.
[2020-05-31 03:43:36,416 INFO  L631         BuchiCegarLoop]: Abstraction has 21099 states and 24110 transitions.
[2020-05-31 03:43:36,416 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 03:43:36,416 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21099 states and 24110 transitions.
[2020-05-31 03:43:36,439 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:36,439 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:36,439 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:36,441 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:36,441 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6854]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6855]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6855]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6856]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND TRUE   DType[this] == ConditionalEscrow
[L4860]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4860]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4861]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:36,447 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:36,448 INFO  L82        PathProgramCache]: Analyzing trace with hash -1835973602, now seen corresponding path program 1 times
[2020-05-31 03:43:36,448 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:36,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:36,759 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:43:36,759 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:36,759 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 03:43:36,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:36,760 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 03:43:36,760 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 03:43:36,760 INFO  L87              Difference]: Start difference. First operand 21099 states and 24110 transitions. cyclomatic complexity: 3035 Second operand 7 states.
[2020-05-31 03:43:37,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:37,354 INFO  L93              Difference]: Finished difference Result 21203 states and 24222 transitions.
[2020-05-31 03:43:37,354 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:43:37,354 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21203 states and 24222 transitions.
[2020-05-31 03:43:37,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:37,446 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21203 states to 21203 states and 24222 transitions.
[2020-05-31 03:43:37,446 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 171
[2020-05-31 03:43:37,446 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 171
[2020-05-31 03:43:37,446 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21203 states and 24222 transitions.
[2020-05-31 03:43:37,461 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:37,461 INFO  L728         BuchiCegarLoop]: Abstraction has 21203 states and 24222 transitions.
[2020-05-31 03:43:37,480 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21203 states and 24222 transitions.
[2020-05-31 03:43:37,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21203 to 21171.
[2020-05-31 03:43:37,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21171 states.
[2020-05-31 03:43:37,624 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21171 states to 21171 states and 24190 transitions.
[2020-05-31 03:43:37,624 INFO  L751         BuchiCegarLoop]: Abstraction has 21171 states and 24190 transitions.
[2020-05-31 03:43:37,624 INFO  L631         BuchiCegarLoop]: Abstraction has 21171 states and 24190 transitions.
[2020-05-31 03:43:37,624 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 03:43:37,624 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21171 states and 24190 transitions.
[2020-05-31 03:43:37,647 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:37,647 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:37,647 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:37,649 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:37,649 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:37,655 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:37,655 INFO  L82        PathProgramCache]: Analyzing trace with hash -1609774122, now seen corresponding path program 1 times
[2020-05-31 03:43:37,656 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:37,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:37,912 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:43:37,912 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:37,912 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-05-31 03:43:37,912 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:37,913 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 03:43:37,913 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 03:43:37,913 INFO  L87              Difference]: Start difference. First operand 21171 states and 24190 transitions. cyclomatic complexity: 3043 Second operand 7 states.
[2020-05-31 03:43:38,788 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:38,788 INFO  L93              Difference]: Finished difference Result 21291 states and 24310 transitions.
[2020-05-31 03:43:38,788 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:43:38,788 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21291 states and 24310 transitions.
[2020-05-31 03:43:38,832 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:38,887 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21291 states to 21291 states and 24310 transitions.
[2020-05-31 03:43:38,888 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 171
[2020-05-31 03:43:38,888 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 171
[2020-05-31 03:43:38,888 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21291 states and 24310 transitions.
[2020-05-31 03:43:38,903 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:38,903 INFO  L728         BuchiCegarLoop]: Abstraction has 21291 states and 24310 transitions.
[2020-05-31 03:43:38,922 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21291 states and 24310 transitions.
[2020-05-31 03:43:39,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21291 to 21227.
[2020-05-31 03:43:39,041 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21227 states.
[2020-05-31 03:43:39,071 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21227 states to 21227 states and 24246 transitions.
[2020-05-31 03:43:39,071 INFO  L751         BuchiCegarLoop]: Abstraction has 21227 states and 24246 transitions.
[2020-05-31 03:43:39,071 INFO  L631         BuchiCegarLoop]: Abstraction has 21227 states and 24246 transitions.
[2020-05-31 03:43:39,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 03:43:39,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21227 states and 24246 transitions.
[2020-05-31 03:43:39,095 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:39,095 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:39,095 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:39,097 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:39,097 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L7870]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L7875]  COND TRUE   DType[this] == TimedCrowdsale
[L7876]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7876]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7877]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND TRUE   DType[this] == RefundEscrow
[L4855]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4855]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4856]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:39,103 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:39,104 INFO  L82        PathProgramCache]: Analyzing trace with hash -829577550, now seen corresponding path program 1 times
[2020-05-31 03:43:39,104 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:39,126 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:39,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:43:39,492 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:39,492 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-31 03:43:39,493 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:39,493 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 03:43:39,493 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 03:43:39,493 INFO  L87              Difference]: Start difference. First operand 21227 states and 24246 transitions. cyclomatic complexity: 3043 Second operand 8 states.
[2020-05-31 03:43:40,157 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:40,157 INFO  L93              Difference]: Finished difference Result 21331 states and 24350 transitions.
[2020-05-31 03:43:40,157 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-05-31 03:43:40,157 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21331 states and 24350 transitions.
[2020-05-31 03:43:40,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:40,253 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21331 states to 21331 states and 24350 transitions.
[2020-05-31 03:43:40,253 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 171
[2020-05-31 03:43:40,253 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 171
[2020-05-31 03:43:40,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21331 states and 24350 transitions.
[2020-05-31 03:43:40,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:40,269 INFO  L728         BuchiCegarLoop]: Abstraction has 21331 states and 24350 transitions.
[2020-05-31 03:43:40,287 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21331 states and 24350 transitions.
[2020-05-31 03:43:40,407 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21331 to 21267.
[2020-05-31 03:43:40,407 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21267 states.
[2020-05-31 03:43:40,436 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21267 states to 21267 states and 24286 transitions.
[2020-05-31 03:43:40,436 INFO  L751         BuchiCegarLoop]: Abstraction has 21267 states and 24286 transitions.
[2020-05-31 03:43:40,436 INFO  L631         BuchiCegarLoop]: Abstraction has 21267 states and 24286 transitions.
[2020-05-31 03:43:40,436 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 03:43:40,436 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21267 states and 24286 transitions.
[2020-05-31 03:43:40,459 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:40,459 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:40,459 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:40,461 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:40,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7513]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND TRUE   DType[this] == ConditionalEscrow
[L4860]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4860]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4861]  COND FALSE  !(revert)
[L7513]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7514]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:40,467 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:40,468 INFO  L82        PathProgramCache]: Analyzing trace with hash -1211473120, now seen corresponding path program 1 times
[2020-05-31 03:43:40,468 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:40,493 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:40,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:43:40,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:40,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 03:43:40,716 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:40,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 03:43:40,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 03:43:40,716 INFO  L87              Difference]: Start difference. First operand 21267 states and 24286 transitions. cyclomatic complexity: 3043 Second operand 5 states.
[2020-05-31 03:43:41,059 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:43:41,060 INFO  L93              Difference]: Finished difference Result 21467 states and 24542 transitions.
[2020-05-31 03:43:41,060 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:43:41,060 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21467 states and 24542 transitions.
[2020-05-31 03:43:41,098 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:41,157 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21467 states to 21467 states and 24542 transitions.
[2020-05-31 03:43:41,157 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 182
[2020-05-31 03:43:41,157 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 182
[2020-05-31 03:43:41,157 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21467 states and 24542 transitions.
[2020-05-31 03:43:41,174 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:43:41,174 INFO  L728         BuchiCegarLoop]: Abstraction has 21467 states and 24542 transitions.
[2020-05-31 03:43:41,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21467 states and 24542 transitions.
[2020-05-31 03:43:41,318 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21467 to 21451.
[2020-05-31 03:43:41,318 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21451 states.
[2020-05-31 03:43:41,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21451 states to 21451 states and 24518 transitions.
[2020-05-31 03:43:41,350 INFO  L751         BuchiCegarLoop]: Abstraction has 21451 states and 24518 transitions.
[2020-05-31 03:43:41,350 INFO  L631         BuchiCegarLoop]: Abstraction has 21451 states and 24518 transitions.
[2020-05-31 03:43:41,350 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 03:43:41,350 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21451 states and 24518 transitions.
[2020-05-31 03:43:41,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-31 03:43:41,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:43:41,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:43:41,376 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:43:41,376 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:43:41,382 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:43:41,382 INFO  L82        PathProgramCache]: Analyzing trace with hash -1228725019, now seen corresponding path program 1 times
[2020-05-31 03:43:41,383 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:43:41,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:43:41,669 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:43:41,669 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:43:41,669 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 03:43:41,670 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:43:41,670 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 03:43:41,670 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 03:43:41,670 INFO  L87              Difference]: Start difference. First operand 21451 states and 24518 transitions. cyclomatic complexity: 3091 Second operand 8 states.
[2020-05-31 03:44:11,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:11,091 INFO  L93              Difference]: Finished difference Result 42875 states and 49370 transitions.
[2020-05-31 03:44:11,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-31 03:44:11,092 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42875 states and 49370 transitions.
[2020-05-31 03:44:11,199 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:11,336 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42875 states to 42843 states and 49338 transitions.
[2020-05-31 03:44:11,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 384
[2020-05-31 03:44:11,336 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 384
[2020-05-31 03:44:11,337 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42843 states and 49338 transitions.
[2020-05-31 03:44:11,369 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:11,370 INFO  L728         BuchiCegarLoop]: Abstraction has 42843 states and 49338 transitions.
[2020-05-31 03:44:11,401 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42843 states and 49338 transitions.
[2020-05-31 03:44:11,653 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42843 to 42803.
[2020-05-31 03:44:11,653 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42803 states.
[2020-05-31 03:44:11,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42803 states to 42803 states and 49290 transitions.
[2020-05-31 03:44:11,715 INFO  L751         BuchiCegarLoop]: Abstraction has 42803 states and 49290 transitions.
[2020-05-31 03:44:11,715 INFO  L631         BuchiCegarLoop]: Abstraction has 42803 states and 49290 transitions.
[2020-05-31 03:44:11,715 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 03:44:11,716 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42803 states and 49290 transitions.
[2020-05-31 03:44:11,762 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:11,762 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:11,762 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:11,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:11,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND TRUE   DType[this] == RefundEscrow
[L4855]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4855]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4856]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:11,770 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:11,770 INFO  L82        PathProgramCache]: Analyzing trace with hash -2119120604, now seen corresponding path program 1 times
[2020-05-31 03:44:11,771 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:11,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:12,000 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:12,001 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:12,001 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:44:12,001 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:12,001 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:44:12,001 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:44:12,001 INFO  L87              Difference]: Start difference. First operand 42803 states and 49290 transitions. cyclomatic complexity: 6535 Second operand 4 states.
[2020-05-31 03:44:13,079 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:13,079 INFO  L93              Difference]: Finished difference Result 42851 states and 49322 transitions.
[2020-05-31 03:44:13,079 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:44:13,080 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42851 states and 49322 transitions.
[2020-05-31 03:44:13,310 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:13,415 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42851 states to 42755 states and 49178 transitions.
[2020-05-31 03:44:13,415 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 378
[2020-05-31 03:44:13,415 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 378
[2020-05-31 03:44:13,415 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42755 states and 49178 transitions.
[2020-05-31 03:44:13,446 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:13,447 INFO  L728         BuchiCegarLoop]: Abstraction has 42755 states and 49178 transitions.
[2020-05-31 03:44:13,474 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42755 states and 49178 transitions.
[2020-05-31 03:44:13,726 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42755 to 42739.
[2020-05-31 03:44:13,727 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42739 states.
[2020-05-31 03:44:13,789 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42739 states to 42739 states and 49162 transitions.
[2020-05-31 03:44:13,789 INFO  L751         BuchiCegarLoop]: Abstraction has 42739 states and 49162 transitions.
[2020-05-31 03:44:13,789 INFO  L631         BuchiCegarLoop]: Abstraction has 42739 states and 49162 transitions.
[2020-05-31 03:44:13,789 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 03:44:13,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42739 states and 49162 transitions.
[2020-05-31 03:44:13,835 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:13,835 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:13,835 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:13,837 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:13,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND TRUE   DType[this] == ConditionalEscrow
[L4860]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4860]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4861]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:13,906 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:13,906 INFO  L82        PathProgramCache]: Analyzing trace with hash 1488159132, now seen corresponding path program 1 times
[2020-05-31 03:44:13,907 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:13,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:14,136 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:14,137 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:14,137 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:44:14,137 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:14,137 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:44:14,137 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:44:14,137 INFO  L87              Difference]: Start difference. First operand 42739 states and 49162 transitions. cyclomatic complexity: 6471 Second operand 4 states.
[2020-05-31 03:44:14,410 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:14,411 INFO  L93              Difference]: Finished difference Result 42771 states and 49202 transitions.
[2020-05-31 03:44:14,411 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:44:14,411 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 42771 states and 49202 transitions.
[2020-05-31 03:44:14,497 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:14,627 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 42771 states to 42771 states and 49202 transitions.
[2020-05-31 03:44:14,627 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 380
[2020-05-31 03:44:14,627 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 380
[2020-05-31 03:44:14,628 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 42771 states and 49202 transitions.
[2020-05-31 03:44:14,659 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:14,660 INFO  L728         BuchiCegarLoop]: Abstraction has 42771 states and 49202 transitions.
[2020-05-31 03:44:14,690 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 42771 states and 49202 transitions.
[2020-05-31 03:44:14,941 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 42771 to 42755.
[2020-05-31 03:44:14,941 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 42755 states.
[2020-05-31 03:44:15,005 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 42755 states to 42755 states and 49178 transitions.
[2020-05-31 03:44:15,005 INFO  L751         BuchiCegarLoop]: Abstraction has 42755 states and 49178 transitions.
[2020-05-31 03:44:15,005 INFO  L631         BuchiCegarLoop]: Abstraction has 42755 states and 49178 transitions.
[2020-05-31 03:44:15,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 03:44:15,005 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 42755 states and 49178 transitions.
[2020-05-31 03:44:15,051 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:15,051 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:15,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:15,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:15,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND TRUE   DType[this] == ConditionalEscrow
[L7790]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7790]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7791]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7513]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND TRUE   DType[this] == ConditionalEscrow
[L7790]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7790]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7791]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7513]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7514]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:15,060 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:15,060 INFO  L82        PathProgramCache]: Analyzing trace with hash -262152588, now seen corresponding path program 1 times
[2020-05-31 03:44:15,060 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:15,081 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:15,335 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:15,335 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:15,335 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-05-31 03:44:15,335 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:15,336 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 03:44:15,336 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 03:44:15,336 INFO  L87              Difference]: Start difference. First operand 42755 states and 49178 transitions. cyclomatic complexity: 6471 Second operand 14 states.
[2020-05-31 03:44:16,530 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:16,530 INFO  L93              Difference]: Finished difference Result 43575 states and 50226 transitions.
[2020-05-31 03:44:16,530 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 03:44:16,530 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 43575 states and 50226 transitions.
[2020-05-31 03:44:16,618 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:44:16,754 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 43575 states to 43575 states and 50226 transitions.
[2020-05-31 03:44:16,754 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 406
[2020-05-31 03:44:16,755 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 406
[2020-05-31 03:44:16,755 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 43575 states and 50226 transitions.
[2020-05-31 03:44:16,789 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:16,789 INFO  L728         BuchiCegarLoop]: Abstraction has 43575 states and 50226 transitions.
[2020-05-31 03:44:16,820 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 43575 states and 50226 transitions.
[2020-05-31 03:44:17,082 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 43575 to 43575.
[2020-05-31 03:44:17,082 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 43575 states.
[2020-05-31 03:44:17,147 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 43575 states to 43575 states and 50226 transitions.
[2020-05-31 03:44:17,148 INFO  L751         BuchiCegarLoop]: Abstraction has 43575 states and 50226 transitions.
[2020-05-31 03:44:17,148 INFO  L631         BuchiCegarLoop]: Abstraction has 43575 states and 50226 transitions.
[2020-05-31 03:44:17,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 03:44:17,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 43575 states and 50226 transitions.
[2020-05-31 03:44:17,195 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:44:17,195 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:17,195 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:17,197 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:17,197 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7513]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND TRUE   DType[this] == ConditionalEscrow
[L7790]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7790]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7791]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7513]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7514]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:17,203 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:17,203 INFO  L82        PathProgramCache]: Analyzing trace with hash 1385965963, now seen corresponding path program 1 times
[2020-05-31 03:44:17,203 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:17,226 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:17,429 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:17,429 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:17,429 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:44:17,429 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:17,429 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:44:17,429 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:44:17,430 INFO  L87              Difference]: Start difference. First operand 43575 states and 50226 transitions. cyclomatic complexity: 6715 Second operand 4 states.
[2020-05-31 03:44:17,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:17,722 INFO  L93              Difference]: Finished difference Result 43607 states and 50242 transitions.
[2020-05-31 03:44:17,722 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:44:17,722 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 43607 states and 50242 transitions.
[2020-05-31 03:44:17,812 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:44:17,965 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 43607 states to 43551 states and 50170 transitions.
[2020-05-31 03:44:17,965 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 406
[2020-05-31 03:44:17,966 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 406
[2020-05-31 03:44:17,966 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 43551 states and 50170 transitions.
[2020-05-31 03:44:18,001 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:18,001 INFO  L728         BuchiCegarLoop]: Abstraction has 43551 states and 50170 transitions.
[2020-05-31 03:44:18,032 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 43551 states and 50170 transitions.
[2020-05-31 03:44:18,300 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 43551 to 43359.
[2020-05-31 03:44:18,300 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 43359 states.
[2020-05-31 03:44:18,365 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 43359 states to 43359 states and 49962 transitions.
[2020-05-31 03:44:18,365 INFO  L751         BuchiCegarLoop]: Abstraction has 43359 states and 49962 transitions.
[2020-05-31 03:44:18,365 INFO  L631         BuchiCegarLoop]: Abstraction has 43359 states and 49962 transitions.
[2020-05-31 03:44:18,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-31 03:44:18,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 43359 states and 49962 transitions.
[2020-05-31 03:44:18,412 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:44:18,413 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:18,413 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:18,415 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:18,415 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND TRUE   DType[this] == ConditionalEscrow
[L7790]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7790]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7791]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:18,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:18,421 INFO  L82        PathProgramCache]: Analyzing trace with hash -1911556294, now seen corresponding path program 1 times
[2020-05-31 03:44:18,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:18,444 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:18,712 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:18,712 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:18,712 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 03:44:18,713 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:18,713 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 03:44:18,713 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-05-31 03:44:18,713 INFO  L87              Difference]: Start difference. First operand 43359 states and 49962 transitions. cyclomatic complexity: 6667 Second operand 8 states.
[2020-05-31 03:44:46,681 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:46,681 INFO  L93              Difference]: Finished difference Result 43527 states and 50138 transitions.
[2020-05-31 03:44:46,681 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 03:44:46,681 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 43527 states and 50138 transitions.
[2020-05-31 03:44:46,793 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:44:46,948 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 43527 states to 43527 states and 50138 transitions.
[2020-05-31 03:44:46,948 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 402
[2020-05-31 03:44:46,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 402
[2020-05-31 03:44:46,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 43527 states and 50138 transitions.
[2020-05-31 03:44:46,984 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:46,984 INFO  L728         BuchiCegarLoop]: Abstraction has 43527 states and 50138 transitions.
[2020-05-31 03:44:47,017 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 43527 states and 50138 transitions.
[2020-05-31 03:44:47,276 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 43527 to 43199.
[2020-05-31 03:44:47,276 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 43199 states.
[2020-05-31 03:44:47,340 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 43199 states to 43199 states and 49778 transitions.
[2020-05-31 03:44:47,341 INFO  L751         BuchiCegarLoop]: Abstraction has 43199 states and 49778 transitions.
[2020-05-31 03:44:47,341 INFO  L631         BuchiCegarLoop]: Abstraction has 43199 states and 49778 transitions.
[2020-05-31 03:44:47,341 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-31 03:44:47,341 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 43199 states and 49778 transitions.
[2020-05-31 03:44:47,387 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:44:47,387 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:47,387 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:47,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:47,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND TRUE   __exception
[L2569]              __tmp__Balance := Balance;
[L2570]              __tmp__DType := DType;
[L2571]              __tmp__Alloc := Alloc;
[L2572]              __tmp__balance_ADDR := balance_ADDR;
[L2573]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L2574]              __tmp__sum__deposits0 := sum__deposits0;
[L2575]              __tmp__Length := Length;
[L2576]              __tmp__now := now;
[L2577]              __tmp___primary_Secondary := _primary_Secondary;
[L2578]              __tmp___deposits_Escrow := _deposits_Escrow;
[L2579]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L2580]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L2581]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L2582]              __tmp___token_Crowdsale := _token_Crowdsale;
[L2583]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L2584]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L2585]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L2586]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L2587]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L2588]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L2589]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L2590]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L2591]  CALL        call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7212]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L7212]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7213]  COND FALSE  !(revert)
[L7216]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L7216]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L7217]  COND FALSE  !(revert)
[L7220]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6964]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L6964]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6965]  COND FALSE  !(revert)
[L6968]  CALL        call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L5748]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]              assume msgsender_MSG != null;
[L5730]              __tmp__Balance[this] := 0;
[L5731]              __tmp___notEntered_ReentrancyGuard[this] := false;
[L5733]              __tmp___notEntered_ReentrancyGuard[this] := true;
[L5748]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5749]  COND FALSE  !(revert)
[L6968]  RET         call ReentrancyGuard_ReentrancyGuard__fail(this, msgsender_MSG, msgvalue_MSG);
[L6969]  COND FALSE  !(revert)
[L6972]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6945]              assume msgsender_MSG != null;
[L6946]              __tmp__Balance[this] := 0;
[L6947]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6949]              __tmp___finalized_FinalizableCrowdsale[this] := false;
[L6972]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6973]  COND FALSE  !(revert)
[L7220]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7221]  COND FALSE  !(revert)
[L7224]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7135]              assume msgsender_MSG != null;
[L7136]              __tmp__Balance[this] := 0;
[L7137]              __tmp___goal_RefundableCrowdsale[this] := 0;
[L7139]              assume goal_s1187 >= 0;
[L7140]  COND FALSE  !(!(goal_s1187 > 0))
[L7144]  CALL        call __var_43 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L7144]  RET         call __var_43 := FreshRefGenerator__fail();
[L7145]  COND FALSE  !(revert)
[L7148]  COND TRUE   __tmp__DType[this] == RefundableCrowdsale
[L7149]  CALL        call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L6000]              gas := gas - 3;
[L6001]              gas := gas - 244;
[L6002]              __ret_0_ := __tmp___wallet_Crowdsale[this];
[L7149]  RET         call __var_44 := wallet_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L7150]  COND FALSE  !(revert)
[L7156]              assume __tmp__DType[__var_43] == RefundEscrow;
[L7157]  CALL        call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L5201]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5201]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5202]  COND FALSE  !(revert)
[L5205]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5205]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5206]  COND FALSE  !(revert)
[L5209]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5209]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5210]  COND FALSE  !(revert)
[L5213]  CALL        call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L5058]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L5062]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L4770]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4770]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4771]  COND FALSE  !(revert)
[L4774]  CALL        call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4658]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4438]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4423]              assume msgsender_MSG != null;
[L4424]              __tmp__Balance[this] := 0;
[L4438]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4439]  COND FALSE  !(revert)
[L4658]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4659]  COND FALSE  !(revert)
[L4662]  CALL        call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4588]              assume msgsender_MSG != null;
[L4589]              __tmp__Balance[this] := 0;
[L4590]              __tmp___primary_Secondary[this] := null;
[L4592]  COND TRUE   __tmp__DType[this] == RefundEscrow
[L4593]  CALL        call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4454]              gas := gas - 9;
[L4455]              gas := gas - 21;
[L4456]              __ret_0_ := msgsender_MSG;
[L4593]  RET         call msgSender_s90 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4594]  COND FALSE  !(revert)
[L4615]              msgSender_s90 := msgSender_s90;
[L4616]              __tmp___primary_Secondary[this] := msgSender_s90;
[L4662]  RET         call Secondary_Secondary_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4663]  COND FALSE  !(revert)
[L4774]  RET         call Secondary_Secondary__fail(this, msgsender_MSG, msgvalue_MSG);
[L4775]  COND FALSE  !(revert)
[L4778]  CALL        call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4736]              assume msgsender_MSG != null;
[L4737]              __tmp__Balance[this] := 0;
[L4739]  CALL        call __var_3 := FreshRefGenerator__fail();
[L4406]              havoc newRef;
[L4407]              assume __tmp__Alloc[newRef] == false;
[L4408]              __tmp__Alloc[newRef] := true;
[L4409]              assume newRef != null;
[L4739]  RET         call __var_3 := FreshRefGenerator__fail();
[L4740]  COND FALSE  !(revert)
[L4743]              __tmp___deposits_Escrow[this] := __var_3;
[L4745]              __tmp__M_Ref_int__deposits0[__tmp___deposits_Escrow[this]] := zeroRefIntArr();
[L4746]              __tmp__sum__deposits0[__tmp___deposits_Escrow[this]] := 0;
[L4778]  RET         call Escrow_Escrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4779]  COND FALSE  !(revert)
[L5066]  RET         call Escrow_Escrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]              assume msgsender_MSG != null;
[L5044]              __tmp__Balance[this] := 0;
[L5070]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L5213]  RET         call ConditionalEscrow_ConditionalEscrow__fail(this, msgsender_MSG, msgvalue_MSG);
[L5214]  COND FALSE  !(revert)
[L5217]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5168]              assume msgsender_MSG != null;
[L5169]              __tmp__Balance[this] := 0;
[L5170]              __tmp___beneficiary_RefundEscrow[this] := null;
[L5172]              __var_8 := null;
[L5173]  COND FALSE  !(!(beneficiary_s316 != null))
[L5177]              __tmp___beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5178]              __tmp___state_RefundEscrow[this] := 0;
[L5217]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5218]  COND FALSE  !(revert)
[L7157]  RET         call RefundEscrow_RefundEscrow__fail(__var_43, this, 0, __var_44);
[L7158]  COND FALSE  !(revert)
[L7161]              __var_42 := __var_43;
[L7162]              __tmp___escrow_RefundableCrowdsale[this] := __var_42;
[L7163]              assume __tmp___goal_RefundableCrowdsale[this] >= 0;
[L7164]              assume goal_s1187 >= 0;
[L7165]              __tmp___goal_RefundableCrowdsale[this] := goal_s1187;
[L7224]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7225]  COND FALSE  !(revert)
[L2591]  RET         call RefundableCrowdsale_RefundableCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2592]              assume revert || gas < 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:47,396 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:47,397 INFO  L82        PathProgramCache]: Analyzing trace with hash 1836056549, now seen corresponding path program 1 times
[2020-05-31 03:44:47,397 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:47,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:47,624 INFO  L134       CoverageAnalysis]: Checked inductivity of 688 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 688 trivial. 0 not checked.
[2020-05-31 03:44:47,624 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:47,624 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:44:47,625 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:47,625 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:44:47,625 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:44:47,625 INFO  L87              Difference]: Start difference. First operand 43199 states and 49778 transitions. cyclomatic complexity: 6643 Second operand 4 states.
[2020-05-31 03:44:51,841 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:51,841 INFO  L93              Difference]: Finished difference Result 47932 states and 54909 transitions.
[2020-05-31 03:44:51,841 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:44:51,842 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 47932 states and 54909 transitions.
[2020-05-31 03:44:52,059 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 03:44:52,195 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 47932 states to 46911 states and 53716 transitions.
[2020-05-31 03:44:52,195 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 398
[2020-05-31 03:44:52,196 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1202
[2020-05-31 03:44:52,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 46911 states and 53716 transitions.
[2020-05-31 03:44:52,232 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:52,232 INFO  L728         BuchiCegarLoop]: Abstraction has 46911 states and 53716 transitions.
[2020-05-31 03:44:52,261 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 46911 states and 53716 transitions.
[2020-05-31 03:44:52,540 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 46911 to 45108.
[2020-05-31 03:44:52,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 45108 states.
[2020-05-31 03:44:52,605 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 45108 states to 45108 states and 51708 transitions.
[2020-05-31 03:44:52,605 INFO  L751         BuchiCegarLoop]: Abstraction has 45108 states and 51708 transitions.
[2020-05-31 03:44:52,605 INFO  L631         BuchiCegarLoop]: Abstraction has 45108 states and 51708 transitions.
[2020-05-31 03:44:52,605 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-31 03:44:52,605 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 45108 states and 51708 transitions.
[2020-05-31 03:44:52,654 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:52,654 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:52,654 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:52,657 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:52,657 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:52,735 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:52,735 INFO  L82        PathProgramCache]: Analyzing trace with hash -15642538, now seen corresponding path program 1 times
[2020-05-31 03:44:52,735 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:52,755 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:52,966 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:52,966 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:52,966 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 03:44:52,967 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:52,967 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 03:44:52,967 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 03:44:52,967 INFO  L87              Difference]: Start difference. First operand 45108 states and 51708 transitions. cyclomatic complexity: 6648 Second operand 5 states.
[2020-05-31 03:44:53,301 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:44:53,301 INFO  L93              Difference]: Finished difference Result 45476 states and 52124 transitions.
[2020-05-31 03:44:53,301 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:44:53,301 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 45476 states and 52124 transitions.
[2020-05-31 03:44:53,385 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:53,523 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 45476 states to 45476 states and 52124 transitions.
[2020-05-31 03:44:53,523 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1146
[2020-05-31 03:44:53,524 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1146
[2020-05-31 03:44:53,524 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 45476 states and 52124 transitions.
[2020-05-31 03:44:53,560 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:44:53,560 INFO  L728         BuchiCegarLoop]: Abstraction has 45476 states and 52124 transitions.
[2020-05-31 03:44:53,592 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 45476 states and 52124 transitions.
[2020-05-31 03:44:53,854 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 45476 to 45292.
[2020-05-31 03:44:53,854 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 45292 states.
[2020-05-31 03:44:53,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 45292 states to 45292 states and 51916 transitions.
[2020-05-31 03:44:53,924 INFO  L751         BuchiCegarLoop]: Abstraction has 45292 states and 51916 transitions.
[2020-05-31 03:44:53,924 INFO  L631         BuchiCegarLoop]: Abstraction has 45292 states and 51916 transitions.
[2020-05-31 03:44:53,925 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-31 03:44:53,925 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 45292 states and 51916 transitions.
[2020-05-31 03:44:53,976 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:44:53,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:44:53,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:44:53,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:44:53,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:44:53,984 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:44:53,984 INFO  L82        PathProgramCache]: Analyzing trace with hash 1924229676, now seen corresponding path program 1 times
[2020-05-31 03:44:53,985 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:44:54,008 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:44:54,241 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:44:54,241 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:44:54,241 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-31 03:44:54,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:44:54,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 03:44:54,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 03:44:54,242 INFO  L87              Difference]: Start difference. First operand 45292 states and 51916 transitions. cyclomatic complexity: 6672 Second operand 10 states.
[2020-05-31 03:45:37,718 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:45:37,718 INFO  L93              Difference]: Finished difference Result 46540 states and 53611 transitions.
[2020-05-31 03:45:37,718 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 03:45:37,718 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 46540 states and 53611 transitions.
[2020-05-31 03:45:37,797 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:45:37,898 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 46540 states to 33900 states and 38783 transitions.
[2020-05-31 03:45:37,898 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1143
[2020-05-31 03:45:37,899 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1241
[2020-05-31 03:45:37,899 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 33900 states and 38783 transitions.
[2020-05-31 03:45:37,922 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:45:37,923 INFO  L728         BuchiCegarLoop]: Abstraction has 33900 states and 38783 transitions.
[2020-05-31 03:45:37,946 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 33900 states and 38783 transitions.
[2020-05-31 03:45:38,135 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 33900 to 33862.
[2020-05-31 03:45:38,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 33862 states.
[2020-05-31 03:45:38,185 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 33862 states to 33862 states and 38736 transitions.
[2020-05-31 03:45:38,185 INFO  L751         BuchiCegarLoop]: Abstraction has 33862 states and 38736 transitions.
[2020-05-31 03:45:38,185 INFO  L631         BuchiCegarLoop]: Abstraction has 33862 states and 38736 transitions.
[2020-05-31 03:45:38,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-31 03:45:38,185 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 33862 states and 38736 transitions.
[2020-05-31 03:45:38,223 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:45:38,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:45:38,223 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:45:38,225 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:45:38,226 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:45:38,231 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:45:38,231 INFO  L82        PathProgramCache]: Analyzing trace with hash -1891163439, now seen corresponding path program 1 times
[2020-05-31 03:45:38,231 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:45:38,253 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:45:38,466 INFO  L134       CoverageAnalysis]: Checked inductivity of 737 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 737 trivial. 0 not checked.
[2020-05-31 03:45:38,466 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:45:38,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-31 03:45:38,467 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:45:38,467 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-31 03:45:38,467 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-05-31 03:45:38,467 INFO  L87              Difference]: Start difference. First operand 33862 states and 38736 transitions. cyclomatic complexity: 4910 Second operand 7 states.
[2020-05-31 03:45:38,680 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:45:38,680 INFO  L93              Difference]: Finished difference Result 33838 states and 38696 transitions.
[2020-05-31 03:45:38,680 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-05-31 03:45:38,680 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 33838 states and 38696 transitions.
[2020-05-31 03:45:38,742 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:45:38,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 33838 states to 33306 states and 38108 transitions.
[2020-05-31 03:45:38,840 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1139
[2020-05-31 03:45:38,841 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1139
[2020-05-31 03:45:38,841 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 33306 states and 38108 transitions.
[2020-05-31 03:45:38,865 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:45:38,866 INFO  L728         BuchiCegarLoop]: Abstraction has 33306 states and 38108 transitions.
[2020-05-31 03:45:38,887 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 33306 states and 38108 transitions.
[2020-05-31 03:45:39,071 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 33306 to 33294.
[2020-05-31 03:45:39,071 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 33294 states.
[2020-05-31 03:45:39,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 33294 states to 33294 states and 38092 transitions.
[2020-05-31 03:45:39,119 INFO  L751         BuchiCegarLoop]: Abstraction has 33294 states and 38092 transitions.
[2020-05-31 03:45:39,119 INFO  L631         BuchiCegarLoop]: Abstraction has 33294 states and 38092 transitions.
[2020-05-31 03:45:39,119 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-31 03:45:39,120 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 33294 states and 38092 transitions.
[2020-05-31 03:45:39,156 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:45:39,156 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:45:39,156 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:45:39,159 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:45:39,159 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND FALSE  !(gas >= 0)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:45:39,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:45:39,165 INFO  L82        PathProgramCache]: Analyzing trace with hash -2017860829, now seen corresponding path program 1 times
[2020-05-31 03:45:39,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:45:39,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:45:39,439 INFO  L134       CoverageAnalysis]: Checked inductivity of 712 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 712 trivial. 0 not checked.
[2020-05-31 03:45:39,440 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:45:39,440 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:45:39,440 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:45:39,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:45:39,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:45:39,441 INFO  L87              Difference]: Start difference. First operand 33294 states and 38092 transitions. cyclomatic complexity: 4834 Second operand 4 states.
[2020-05-31 03:45:39,791 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:45:39,791 INFO  L93              Difference]: Finished difference Result 34499 states and 39189 transitions.
[2020-05-31 03:45:39,791 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:45:39,792 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34499 states and 39189 transitions.
[2020-05-31 03:45:39,856 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:45:39,954 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34499 states to 34499 states and 39189 transitions.
[2020-05-31 03:45:39,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1187
[2020-05-31 03:45:39,955 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-05-31 03:45:39,955 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34499 states and 39189 transitions.
[2020-05-31 03:45:39,981 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:45:39,981 INFO  L728         BuchiCegarLoop]: Abstraction has 34499 states and 39189 transitions.
[2020-05-31 03:45:40,003 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34499 states and 39189 transitions.
[2020-05-31 03:45:40,271 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34499 to 33810.
[2020-05-31 03:45:40,271 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 33810 states.
[2020-05-31 03:45:40,320 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 33810 states to 33810 states and 38392 transitions.
[2020-05-31 03:45:40,320 INFO  L751         BuchiCegarLoop]: Abstraction has 33810 states and 38392 transitions.
[2020-05-31 03:45:40,320 INFO  L631         BuchiCegarLoop]: Abstraction has 33810 states and 38392 transitions.
[2020-05-31 03:45:40,320 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-31 03:45:40,320 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 33810 states and 38392 transitions.
[2020-05-31 03:45:40,358 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:45:40,358 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:45:40,358 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:45:40,361 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:45:40,361 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7512]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7517]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7518]  CALL        call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L4849]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L4850]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L4851]              Balance[this] := Balance[this] + msgvalue_MSG;
[L4853]              gas := gas - 7;
[L4854]  COND FALSE  !(DType[this] == RefundEscrow)
[L4859]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4864]  COND TRUE   DType[this] == Escrow
[L4865]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L4865]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s180);
[L4866]  COND FALSE  !(revert)
[L7518]  RET         call deposit_Escrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7519]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:45:40,368 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:45:40,368 INFO  L82        PathProgramCache]: Analyzing trace with hash 1139309660, now seen corresponding path program 1 times
[2020-05-31 03:45:40,369 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:45:40,396 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:45:40,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 712 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 712 trivial. 0 not checked.
[2020-05-31 03:45:40,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:45:40,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-31 03:45:40,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:45:40,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 03:45:40,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 03:45:40,700 INFO  L87              Difference]: Start difference. First operand 33810 states and 38392 transitions. cyclomatic complexity: 4618 Second operand 14 states.
[2020-05-31 03:46:15,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:46:15,109 INFO  L93              Difference]: Finished difference Result 34504 states and 39341 transitions.
[2020-05-31 03:46:15,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-31 03:46:15,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34504 states and 39341 transitions.
[2020-05-31 03:46:15,195 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:46:15,301 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34504 states to 34200 states and 38966 transitions.
[2020-05-31 03:46:15,301 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1289
[2020-05-31 03:46:15,302 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1289
[2020-05-31 03:46:15,302 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34200 states and 38966 transitions.
[2020-05-31 03:46:15,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:46:15,329 INFO  L728         BuchiCegarLoop]: Abstraction has 34200 states and 38966 transitions.
[2020-05-31 03:46:15,353 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34200 states and 38966 transitions.
[2020-05-31 03:46:15,555 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34200 to 33930.
[2020-05-31 03:46:15,555 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 33930 states.
[2020-05-31 03:46:15,604 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 33930 states to 33930 states and 38492 transitions.
[2020-05-31 03:46:15,604 INFO  L751         BuchiCegarLoop]: Abstraction has 33930 states and 38492 transitions.
[2020-05-31 03:46:15,604 INFO  L631         BuchiCegarLoop]: Abstraction has 33930 states and 38492 transitions.
[2020-05-31 03:46:15,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-31 03:46:15,605 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 33930 states and 38492 transitions.
[2020-05-31 03:46:15,641 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:46:15,642 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:46:15,642 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:46:15,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:46:15,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND TRUE   gas >= 0
[L9007]              assume msgvalue_MSG == 0;
[L9008]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1669]              havoc __exception;
[L1670]              revert := false;
[L1671]  COND TRUE   __exception
[L1672]              __tmp__Balance := Balance;
[L1673]              __tmp__DType := DType;
[L1674]              __tmp__Alloc := Alloc;
[L1675]              __tmp__balance_ADDR := balance_ADDR;
[L1676]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1677]              __tmp__sum__deposits0 := sum__deposits0;
[L1678]              __tmp__Length := Length;
[L1679]              __tmp__now := now;
[L1680]              __tmp___primary_Secondary := _primary_Secondary;
[L1681]              __tmp___deposits_Escrow := _deposits_Escrow;
[L1682]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1683]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1684]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1685]              __tmp___token_Crowdsale := _token_Crowdsale;
[L1686]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1687]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1688]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1689]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1690]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1691]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1692]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1693]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1694]  CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]              gas := gas - 3;
[L5985]              gas := gas - 294;
[L5986]              __ret_0_ := __tmp___token_Crowdsale[this];
[L1694]  RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1695]              assume revert || gas < 0;
[L9008]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:46:15,650 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:46:15,650 INFO  L82        PathProgramCache]: Analyzing trace with hash -2085068249, now seen corresponding path program 1 times
[2020-05-31 03:46:15,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:46:15,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:46:16,175 INFO  L134       CoverageAnalysis]: Checked inductivity of 712 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 712 trivial. 0 not checked.
[2020-05-31 03:46:16,175 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:46:16,175 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-05-31 03:46:16,176 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:46:16,176 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 03:46:16,176 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 03:46:16,176 INFO  L87              Difference]: Start difference. First operand 33930 states and 38492 transitions. cyclomatic complexity: 4598 Second operand 14 states.
[2020-05-31 03:46:30,847 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:46:30,848 INFO  L93              Difference]: Finished difference Result 35329 states and 40285 transitions.
[2020-05-31 03:46:30,848 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-05-31 03:46:30,848 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35329 states and 40285 transitions.
[2020-05-31 03:46:30,924 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:31,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35329 states to 34802 states and 39637 transitions.
[2020-05-31 03:46:31,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1395
[2020-05-31 03:46:31,027 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1395
[2020-05-31 03:46:31,027 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34802 states and 39637 transitions.
[2020-05-31 03:46:31,052 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:46:31,052 INFO  L728         BuchiCegarLoop]: Abstraction has 34802 states and 39637 transitions.
[2020-05-31 03:46:31,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34802 states and 39637 transitions.
[2020-05-31 03:46:31,280 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34802 to 34593.
[2020-05-31 03:46:31,280 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 34593 states.
[2020-05-31 03:46:31,331 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 34593 states to 34593 states and 39349 transitions.
[2020-05-31 03:46:31,331 INFO  L751         BuchiCegarLoop]: Abstraction has 34593 states and 39349 transitions.
[2020-05-31 03:46:31,331 INFO  L631         BuchiCegarLoop]: Abstraction has 34593 states and 39349 transitions.
[2020-05-31 03:46:31,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-31 03:46:31,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 34593 states and 39349 transitions.
[2020-05-31 03:46:31,370 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:31,370 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:46:31,370 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:46:31,372 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:46:31,372 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND TRUE   gas >= 0
[L9007]              assume msgvalue_MSG == 0;
[L9008]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1669]              havoc __exception;
[L1670]              revert := false;
[L1671]  COND TRUE   __exception
[L1672]              __tmp__Balance := Balance;
[L1673]              __tmp__DType := DType;
[L1674]              __tmp__Alloc := Alloc;
[L1675]              __tmp__balance_ADDR := balance_ADDR;
[L1676]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1677]              __tmp__sum__deposits0 := sum__deposits0;
[L1678]              __tmp__Length := Length;
[L1679]              __tmp__now := now;
[L1680]              __tmp___primary_Secondary := _primary_Secondary;
[L1681]              __tmp___deposits_Escrow := _deposits_Escrow;
[L1682]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1683]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1684]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1685]              __tmp___token_Crowdsale := _token_Crowdsale;
[L1686]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1687]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1688]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1689]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1690]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1691]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1692]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1693]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1694]  CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]              gas := gas - 3;
[L5985]              gas := gas - 294;
[L5986]              __ret_0_ := __tmp___token_Crowdsale[this];
[L1694]  RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1695]              assume revert || gas < 0;
[L9008]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:46:31,377 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:46:31,377 INFO  L82        PathProgramCache]: Analyzing trace with hash 1614309481, now seen corresponding path program 1 times
[2020-05-31 03:46:31,378 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:46:31,403 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:46:31,668 INFO  L134       CoverageAnalysis]: Checked inductivity of 752 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 752 trivial. 0 not checked.
[2020-05-31 03:46:31,668 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:46:31,668 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 03:46:31,669 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:46:31,669 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 03:46:31,669 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-05-31 03:46:31,669 INFO  L87              Difference]: Start difference. First operand 34593 states and 39349 transitions. cyclomatic complexity: 4794 Second operand 11 states.
[2020-05-31 03:46:33,474 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:46:33,474 INFO  L93              Difference]: Finished difference Result 35299 states and 40202 transitions.
[2020-05-31 03:46:33,474 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 03:46:33,474 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35299 states and 40202 transitions.
[2020-05-31 03:46:33,557 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:33,666 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35299 states to 35299 states and 40202 transitions.
[2020-05-31 03:46:33,666 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1400
[2020-05-31 03:46:33,667 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1400
[2020-05-31 03:46:33,667 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 35299 states and 40202 transitions.
[2020-05-31 03:46:33,695 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:46:33,695 INFO  L728         BuchiCegarLoop]: Abstraction has 35299 states and 40202 transitions.
[2020-05-31 03:46:33,721 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 35299 states and 40202 transitions.
[2020-05-31 03:46:33,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 35299 to 34607.
[2020-05-31 03:46:33,924 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 34607 states.
[2020-05-31 03:46:33,975 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 34607 states to 34607 states and 39357 transitions.
[2020-05-31 03:46:33,975 INFO  L751         BuchiCegarLoop]: Abstraction has 34607 states and 39357 transitions.
[2020-05-31 03:46:33,975 INFO  L631         BuchiCegarLoop]: Abstraction has 34607 states and 39357 transitions.
[2020-05-31 03:46:33,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-05-31 03:46:33,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 34607 states and 39357 transitions.
[2020-05-31 03:46:34,014 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:34,014 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:46:34,014 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:46:34,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:46:34,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND TRUE   DType[this] == ConditionalEscrow
[L7790]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7790]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7791]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND TRUE   gas >= 0
[L9007]              assume msgvalue_MSG == 0;
[L9008]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1669]              havoc __exception;
[L1670]              revert := false;
[L1671]  COND TRUE   __exception
[L1672]              __tmp__Balance := Balance;
[L1673]              __tmp__DType := DType;
[L1674]              __tmp__Alloc := Alloc;
[L1675]              __tmp__balance_ADDR := balance_ADDR;
[L1676]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1677]              __tmp__sum__deposits0 := sum__deposits0;
[L1678]              __tmp__Length := Length;
[L1679]              __tmp__now := now;
[L1680]              __tmp___primary_Secondary := _primary_Secondary;
[L1681]              __tmp___deposits_Escrow := _deposits_Escrow;
[L1682]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1683]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1684]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1685]              __tmp___token_Crowdsale := _token_Crowdsale;
[L1686]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1687]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1688]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1689]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1690]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1691]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1692]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1693]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1694]  CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]              gas := gas - 3;
[L5985]              gas := gas - 294;
[L5986]              __ret_0_ := __tmp___token_Crowdsale[this];
[L1694]  RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1695]              assume revert || gas < 0;
[L9008]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:46:34,022 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:46:34,023 INFO  L82        PathProgramCache]: Analyzing trace with hash -1688601835, now seen corresponding path program 1 times
[2020-05-31 03:46:34,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:46:34,045 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:46:34,364 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 734 trivial. 0 not checked.
[2020-05-31 03:46:34,364 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:46:34,364 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 03:46:34,365 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:46:34,365 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 03:46:34,365 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 03:46:34,365 INFO  L87              Difference]: Start difference. First operand 34607 states and 39357 transitions. cyclomatic complexity: 4788 Second operand 5 states.
[2020-05-31 03:46:34,634 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:46:34,634 INFO  L93              Difference]: Finished difference Result 34877 states and 39633 transitions.
[2020-05-31 03:46:34,634 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:46:34,634 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 34877 states and 39633 transitions.
[2020-05-31 03:46:34,699 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:34,802 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 34877 states to 34637 states and 39381 transitions.
[2020-05-31 03:46:34,802 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1368
[2020-05-31 03:46:34,803 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1368
[2020-05-31 03:46:34,803 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 34637 states and 39381 transitions.
[2020-05-31 03:46:34,828 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:46:34,829 INFO  L728         BuchiCegarLoop]: Abstraction has 34637 states and 39381 transitions.
[2020-05-31 03:46:34,851 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 34637 states and 39381 transitions.
[2020-05-31 03:46:35,048 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 34637 to 34637.
[2020-05-31 03:46:35,048 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 34637 states.
[2020-05-31 03:46:35,099 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 34637 states to 34637 states and 39381 transitions.
[2020-05-31 03:46:35,099 INFO  L751         BuchiCegarLoop]: Abstraction has 34637 states and 39381 transitions.
[2020-05-31 03:46:35,099 INFO  L631         BuchiCegarLoop]: Abstraction has 34637 states and 39381 transitions.
[2020-05-31 03:46:35,100 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-05-31 03:46:35,100 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 34637 states and 39381 transitions.
[2020-05-31 03:46:35,138 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:35,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:46:35,139 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:46:35,141 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:46:35,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND TRUE   gas >= 0
[L9007]              assume msgvalue_MSG == 0;
[L9008]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1669]              havoc __exception;
[L1670]              revert := false;
[L1671]  COND TRUE   __exception
[L1672]              __tmp__Balance := Balance;
[L1673]              __tmp__DType := DType;
[L1674]              __tmp__Alloc := Alloc;
[L1675]              __tmp__balance_ADDR := balance_ADDR;
[L1676]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1677]              __tmp__sum__deposits0 := sum__deposits0;
[L1678]              __tmp__Length := Length;
[L1679]              __tmp__now := now;
[L1680]              __tmp___primary_Secondary := _primary_Secondary;
[L1681]              __tmp___deposits_Escrow := _deposits_Escrow;
[L1682]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1683]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1684]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1685]              __tmp___token_Crowdsale := _token_Crowdsale;
[L1686]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1687]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1688]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1689]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1690]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1691]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1692]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1693]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1694]  CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]              gas := gas - 3;
[L5985]              gas := gas - 294;
[L5986]              __ret_0_ := __tmp___token_Crowdsale[this];
[L1694]  RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1695]              assume revert || gas < 0;
[L9008]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:46:35,146 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:46:35,147 INFO  L82        PathProgramCache]: Analyzing trace with hash 198047070, now seen corresponding path program 1 times
[2020-05-31 03:46:35,147 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:46:35,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:46:35,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 734 trivial. 0 not checked.
[2020-05-31 03:46:35,503 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:46:35,503 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-05-31 03:46:35,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:46:35,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-05-31 03:46:35,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-05-31 03:46:35,504 INFO  L87              Difference]: Start difference. First operand 34637 states and 39381 transitions. cyclomatic complexity: 4782 Second operand 16 states.
[2020-05-31 03:46:59,098 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:46:59,098 INFO  L93              Difference]: Finished difference Result 35468 states and 40387 transitions.
[2020-05-31 03:46:59,098 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-05-31 03:46:59,098 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 35468 states and 40387 transitions.
[2020-05-31 03:46:59,162 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:46:59,227 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 35468 states to 23708 states and 26995 transitions.
[2020-05-31 03:46:59,227 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1372
[2020-05-31 03:46:59,228 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1372
[2020-05-31 03:46:59,228 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23708 states and 26995 transitions.
[2020-05-31 03:46:59,244 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:46:59,244 INFO  L728         BuchiCegarLoop]: Abstraction has 23708 states and 26995 transitions.
[2020-05-31 03:46:59,256 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23708 states and 26995 transitions.
[2020-05-31 03:46:59,386 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23708 to 22682.
[2020-05-31 03:46:59,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22682 states.
[2020-05-31 03:46:59,417 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22682 states to 22682 states and 25730 transitions.
[2020-05-31 03:46:59,417 INFO  L751         BuchiCegarLoop]: Abstraction has 22682 states and 25730 transitions.
[2020-05-31 03:46:59,417 INFO  L631         BuchiCegarLoop]: Abstraction has 22682 states and 25730 transitions.
[2020-05-31 03:46:59,417 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-05-31 03:46:59,417 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22682 states and 25730 transitions.
[2020-05-31 03:46:59,442 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:46:59,442 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:46:59,442 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:46:59,444 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:46:59,444 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND TRUE   gas >= 0
[L9007]              assume msgvalue_MSG == 0;
[L9008]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1669]              havoc __exception;
[L1670]              revert := false;
[L1671]  COND TRUE   __exception
[L1672]              __tmp__Balance := Balance;
[L1673]              __tmp__DType := DType;
[L1674]              __tmp__Alloc := Alloc;
[L1675]              __tmp__balance_ADDR := balance_ADDR;
[L1676]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1677]              __tmp__sum__deposits0 := sum__deposits0;
[L1678]              __tmp__Length := Length;
[L1679]              __tmp__now := now;
[L1680]              __tmp___primary_Secondary := _primary_Secondary;
[L1681]              __tmp___deposits_Escrow := _deposits_Escrow;
[L1682]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1683]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1684]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1685]              __tmp___token_Crowdsale := _token_Crowdsale;
[L1686]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1687]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1688]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1689]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1690]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1691]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1692]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1693]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1694]  CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]              gas := gas - 3;
[L5985]              gas := gas - 294;
[L5986]              __ret_0_ := __tmp___token_Crowdsale[this];
[L1694]  RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1695]              assume revert || gas < 0;
[L9008]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND TRUE   choice == 14
[L9005]              gas := gas - 21000;
[L9006]  COND TRUE   gas >= 0
[L9007]              assume msgvalue_MSG == 0;
[L9008]  CALL        call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L1669]              havoc __exception;
[L1670]              revert := false;
[L1671]  COND TRUE   __exception
[L1672]              __tmp__Balance := Balance;
[L1673]              __tmp__DType := DType;
[L1674]              __tmp__Alloc := Alloc;
[L1675]              __tmp__balance_ADDR := balance_ADDR;
[L1676]              __tmp__M_Ref_int__deposits0 := M_Ref_int__deposits0;
[L1677]              __tmp__sum__deposits0 := sum__deposits0;
[L1678]              __tmp__Length := Length;
[L1679]              __tmp__now := now;
[L1680]              __tmp___primary_Secondary := _primary_Secondary;
[L1681]              __tmp___deposits_Escrow := _deposits_Escrow;
[L1682]              __tmp___state_RefundEscrow := _state_RefundEscrow;
[L1683]              __tmp___beneficiary_RefundEscrow := _beneficiary_RefundEscrow;
[L1684]              __tmp___notEntered_ReentrancyGuard := _notEntered_ReentrancyGuard;
[L1685]              __tmp___token_Crowdsale := _token_Crowdsale;
[L1686]              __tmp___wallet_Crowdsale := _wallet_Crowdsale;
[L1687]              __tmp___rate_Crowdsale := _rate_Crowdsale;
[L1688]              __tmp___weiRaised_Crowdsale := _weiRaised_Crowdsale;
[L1689]              __tmp___openingTime_TimedCrowdsale := _openingTime_TimedCrowdsale;
[L1690]              __tmp___closingTime_TimedCrowdsale := _closingTime_TimedCrowdsale;
[L1691]              __tmp___finalized_FinalizableCrowdsale := _finalized_FinalizableCrowdsale;
[L1692]              __tmp___goal_RefundableCrowdsale := _goal_RefundableCrowdsale;
[L1693]              __tmp___escrow_RefundableCrowdsale := _escrow_RefundableCrowdsale;
[L1694]  CALL        call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L5984]              gas := gas - 3;
[L5985]              gas := gas - 294;
[L5986]              __ret_0_ := __tmp___token_Crowdsale[this];
[L1694]  RET         call __ret_0_ := token_Crowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
[L1695]              assume revert || gas < 0;
[L9008]  RET         call __ret_0_token := token_Crowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:46:59,450 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:46:59,450 INFO  L82        PathProgramCache]: Analyzing trace with hash -98890588, now seen corresponding path program 1 times
[2020-05-31 03:46:59,450 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:46:59,477 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:46:59,763 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 780 trivial. 0 not checked.
[2020-05-31 03:46:59,763 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:46:59,763 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 03:46:59,764 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:46:59,764 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 03:46:59,764 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=64, Unknown=0, NotChecked=0, Total=90
[2020-05-31 03:46:59,764 INFO  L87              Difference]: Start difference. First operand 22682 states and 25730 transitions. cyclomatic complexity: 3074 Second operand 10 states.
[2020-05-31 03:47:03,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:47:03,550 INFO  L93              Difference]: Finished difference Result 24311 states and 27544 transitions.
[2020-05-31 03:47:03,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-05-31 03:47:03,550 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24311 states and 27544 transitions.
[2020-05-31 03:47:03,606 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 03:47:03,670 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24311 states to 21479 states and 24664 transitions.
[2020-05-31 03:47:03,670 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 771
[2020-05-31 03:47:03,671 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 887
[2020-05-31 03:47:03,671 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21479 states and 24664 transitions.
[2020-05-31 03:47:03,687 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:47:03,687 INFO  L728         BuchiCegarLoop]: Abstraction has 21479 states and 24664 transitions.
[2020-05-31 03:47:03,698 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21479 states and 24664 transitions.
[2020-05-31 03:47:03,824 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21479 to 19949.
[2020-05-31 03:47:03,824 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19949 states.
[2020-05-31 03:47:03,854 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19949 states to 19949 states and 22857 transitions.
[2020-05-31 03:47:03,854 INFO  L751         BuchiCegarLoop]: Abstraction has 19949 states and 22857 transitions.
[2020-05-31 03:47:03,854 INFO  L631         BuchiCegarLoop]: Abstraction has 19949 states and 22857 transitions.
[2020-05-31 03:47:03,854 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-05-31 03:47:03,854 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19949 states and 22857 transitions.
[2020-05-31 03:47:03,876 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:03,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:47:03,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:47:03,878 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:47:03,878 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND FALSE  !(__var_49)
[L7448]  CALL        call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L5374]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5374]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5378]              gas := gas - 956;
[L5379]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5383]              gas := gas - 20287;
[L5384]              _state_RefundEscrow[this] := 1;
[L5385]              assert { :EventEmitted "RefundsEnabled_RefundEscrow" } true;
[L7448]  RET         call enableRefunds_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_52);
[L7449]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:47:03,883 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:47:03,884 INFO  L82        PathProgramCache]: Analyzing trace with hash 1497520928, now seen corresponding path program 1 times
[2020-05-31 03:47:03,884 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:47:03,910 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:47:04,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 18 proven. 0 refuted. 0 times theorem prover too weak. 771 trivial. 0 not checked.
[2020-05-31 03:47:04,342 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:47:04,343 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-05-31 03:47:04,343 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:47:04,343 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 03:47:04,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=264, Unknown=0, NotChecked=0, Total=306
[2020-05-31 03:47:04,344 INFO  L87              Difference]: Start difference. First operand 19949 states and 22857 transitions. cyclomatic complexity: 2934 Second operand 18 states.
[2020-05-31 03:47:24,693 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:47:24,693 INFO  L93              Difference]: Finished difference Result 21730 states and 25084 transitions.
[2020-05-31 03:47:24,693 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-05-31 03:47:24,694 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21730 states and 25084 transitions.
[2020-05-31 03:47:24,747 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-05-31 03:47:24,820 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21730 states to 21730 states and 25082 transitions.
[2020-05-31 03:47:24,820 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1022
[2020-05-31 03:47:24,820 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1022
[2020-05-31 03:47:24,821 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21730 states and 25082 transitions.
[2020-05-31 03:47:24,837 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:47:24,837 INFO  L728         BuchiCegarLoop]: Abstraction has 21730 states and 25082 transitions.
[2020-05-31 03:47:24,849 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21730 states and 25082 transitions.
[2020-05-31 03:47:25,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21730 to 20993.
[2020-05-31 03:47:25,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20993 states.
[2020-05-31 03:47:25,104 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20993 states to 20993 states and 24180 transitions.
[2020-05-31 03:47:25,104 INFO  L751         BuchiCegarLoop]: Abstraction has 20993 states and 24180 transitions.
[2020-05-31 03:47:25,104 INFO  L631         BuchiCegarLoop]: Abstraction has 20993 states and 24180 transitions.
[2020-05-31 03:47:25,104 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-05-31 03:47:25,104 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20993 states and 24180 transitions.
[2020-05-31 03:47:25,125 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:25,125 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:47:25,125 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:47:25,127 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:47:25,127 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND FALSE  !(gas > 2300)
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND FALSE  !(Balance[from] >= amount)
[L7741]              success := false;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:47:25,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:47:25,191 INFO  L82        PathProgramCache]: Analyzing trace with hash -1933185593, now seen corresponding path program 1 times
[2020-05-31 03:47:25,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:47:25,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:47:25,475 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 03:47:25,475 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:47:25,475 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:47:25,476 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:47:25,477 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:47:25,477 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:47:25,477 INFO  L87              Difference]: Start difference. First operand 20993 states and 24180 transitions. cyclomatic complexity: 3213 Second operand 4 states.
[2020-05-31 03:47:25,536 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:47:25,536 INFO  L93              Difference]: Finished difference Result 20997 states and 24182 transitions.
[2020-05-31 03:47:25,536 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:47:25,537 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20997 states and 24182 transitions.
[2020-05-31 03:47:25,574 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:25,629 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20997 states to 20993 states and 24178 transitions.
[2020-05-31 03:47:25,630 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 911
[2020-05-31 03:47:25,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 911
[2020-05-31 03:47:25,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20993 states and 24178 transitions.
[2020-05-31 03:47:25,644 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:47:25,644 INFO  L728         BuchiCegarLoop]: Abstraction has 20993 states and 24178 transitions.
[2020-05-31 03:47:25,654 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20993 states and 24178 transitions.
[2020-05-31 03:47:25,775 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20993 to 20993.
[2020-05-31 03:47:25,775 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20993 states.
[2020-05-31 03:47:25,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20993 states to 20993 states and 24178 transitions.
[2020-05-31 03:47:25,805 INFO  L751         BuchiCegarLoop]: Abstraction has 20993 states and 24178 transitions.
[2020-05-31 03:47:25,805 INFO  L631         BuchiCegarLoop]: Abstraction has 20993 states and 24178 transitions.
[2020-05-31 03:47:25,805 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-05-31 03:47:25,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20993 states and 24178 transitions.
[2020-05-31 03:47:25,828 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:25,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:47:25,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:47:25,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:47:25,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND FALSE  !(gas > 2300)
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:47:25,836 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:47:25,836 INFO  L82        PathProgramCache]: Analyzing trace with hash -22694574, now seen corresponding path program 1 times
[2020-05-31 03:47:25,836 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:47:25,864 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:47:26,173 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 789 trivial. 0 not checked.
[2020-05-31 03:47:26,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:47:26,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-05-31 03:47:26,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:47:26,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-05-31 03:47:26,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=205, Unknown=0, NotChecked=0, Total=306
[2020-05-31 03:47:26,174 INFO  L87              Difference]: Start difference. First operand 20993 states and 24178 transitions. cyclomatic complexity: 3211 Second operand 18 states.
[2020-05-31 03:47:33,230 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:47:33,231 INFO  L93              Difference]: Finished difference Result 24879 states and 29016 transitions.
[2020-05-31 03:47:33,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-05-31 03:47:33,231 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24879 states and 29016 transitions.
[2020-05-31 03:47:33,351 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 03:47:33,419 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24879 states to 24467 states and 28532 transitions.
[2020-05-31 03:47:33,419 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1028
[2020-05-31 03:47:33,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1028
[2020-05-31 03:47:33,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24467 states and 28532 transitions.
[2020-05-31 03:47:33,437 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:47:33,437 INFO  L728         BuchiCegarLoop]: Abstraction has 24467 states and 28532 transitions.
[2020-05-31 03:47:33,447 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24467 states and 28532 transitions.
[2020-05-31 03:47:33,591 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24467 to 21055.
[2020-05-31 03:47:33,592 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21055 states.
[2020-05-31 03:47:33,622 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21055 states to 21055 states and 24237 transitions.
[2020-05-31 03:47:33,622 INFO  L751         BuchiCegarLoop]: Abstraction has 21055 states and 24237 transitions.
[2020-05-31 03:47:33,622 INFO  L631         BuchiCegarLoop]: Abstraction has 21055 states and 24237 transitions.
[2020-05-31 03:47:33,622 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-05-31 03:47:33,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21055 states and 24237 transitions.
[2020-05-31 03:47:33,645 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:33,645 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:47:33,645 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:47:33,648 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:47:33,648 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5939]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5940]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5940]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5941]  COND FALSE  !(revert)
[L5957]  COND TRUE   DType[this] == RefundableCrowdsale
[L5958]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6584]  COND TRUE   DType[this] == TimedCrowdsale
[L6585]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6585]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6586]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5958]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5959]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:47:33,673 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:47:33,674 INFO  L82        PathProgramCache]: Analyzing trace with hash 186121940, now seen corresponding path program 1 times
[2020-05-31 03:47:33,674 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:47:33,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:47:34,077 INFO  L134       CoverageAnalysis]: Checked inductivity of 811 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 03:47:34,077 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:47:34,077 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:47:34,078 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:47:34,078 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:47:34,078 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:47:34,078 INFO  L87              Difference]: Start difference. First operand 21055 states and 24237 transitions. cyclomatic complexity: 3208 Second operand 3 states.
[2020-05-31 03:47:34,175 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:47:34,175 INFO  L93              Difference]: Finished difference Result 21079 states and 24265 transitions.
[2020-05-31 03:47:34,175 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:47:34,175 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21079 states and 24265 transitions.
[2020-05-31 03:47:34,213 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:34,267 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21079 states to 21079 states and 24265 transitions.
[2020-05-31 03:47:34,267 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 915
[2020-05-31 03:47:34,268 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 915
[2020-05-31 03:47:34,268 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21079 states and 24265 transitions.
[2020-05-31 03:47:34,282 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:47:34,282 INFO  L728         BuchiCegarLoop]: Abstraction has 21079 states and 24265 transitions.
[2020-05-31 03:47:34,293 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21079 states and 24265 transitions.
[2020-05-31 03:47:34,412 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21079 to 21063.
[2020-05-31 03:47:34,412 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21063 states.
[2020-05-31 03:47:34,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21063 states to 21063 states and 24245 transitions.
[2020-05-31 03:47:34,443 INFO  L751         BuchiCegarLoop]: Abstraction has 21063 states and 24245 transitions.
[2020-05-31 03:47:34,443 INFO  L631         BuchiCegarLoop]: Abstraction has 21063 states and 24245 transitions.
[2020-05-31 03:47:34,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-05-31 03:47:34,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21063 states and 24245 transitions.
[2020-05-31 03:47:34,466 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:34,466 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:47:34,466 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:47:34,469 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:47:34,469 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND TRUE   DType[this] == RefundableCrowdsale
[L5935]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5935]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5936]  COND FALSE  !(revert)
[L5957]  COND TRUE   DType[this] == RefundableCrowdsale
[L5958]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5958]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5959]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:47:34,475 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:47:34,476 INFO  L82        PathProgramCache]: Analyzing trace with hash -271140729, now seen corresponding path program 1 times
[2020-05-31 03:47:34,476 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:47:34,510 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:47:34,936 INFO  L134       CoverageAnalysis]: Checked inductivity of 811 backedges. 11 proven. 0 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 03:47:34,936 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:47:34,936 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 03:47:34,937 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:47:34,937 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 03:47:34,937 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 03:47:34,938 INFO  L87              Difference]: Start difference. First operand 21063 states and 24245 transitions. cyclomatic complexity: 3208 Second operand 10 states.
[2020-05-31 03:47:35,198 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:47:35,199 INFO  L93              Difference]: Finished difference Result 21639 states and 24955 transitions.
[2020-05-31 03:47:35,199 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 03:47:35,199 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21639 states and 24955 transitions.
[2020-05-31 03:47:35,239 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:35,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21639 states to 21639 states and 24955 transitions.
[2020-05-31 03:47:35,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 971
[2020-05-31 03:47:35,300 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 971
[2020-05-31 03:47:35,300 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21639 states and 24955 transitions.
[2020-05-31 03:47:35,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:47:35,317 INFO  L728         BuchiCegarLoop]: Abstraction has 21639 states and 24955 transitions.
[2020-05-31 03:47:35,328 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21639 states and 24955 transitions.
[2020-05-31 03:47:35,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21639 to 21511.
[2020-05-31 03:47:35,460 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21511 states.
[2020-05-31 03:47:35,491 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21511 states to 21511 states and 24771 transitions.
[2020-05-31 03:47:35,491 INFO  L751         BuchiCegarLoop]: Abstraction has 21511 states and 24771 transitions.
[2020-05-31 03:47:35,491 INFO  L631         BuchiCegarLoop]: Abstraction has 21511 states and 24771 transitions.
[2020-05-31 03:47:35,491 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-05-31 03:47:35,491 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21511 states and 24771 transitions.
[2020-05-31 03:47:35,514 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:47:35,514 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:47:35,514 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:47:35,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:47:35,517 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:47:35,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:47:35,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 1777511425, now seen corresponding path program 1 times
[2020-05-31 03:47:35,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:47:35,552 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:47:36,241 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 3 proven. 30 refuted. 0 times theorem prover too weak. 756 trivial. 0 not checked.
[2020-05-31 03:47:36,241 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:47:36,241 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-05-31 03:47:36,242 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:47:36,242 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-05-31 03:47:36,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=94, Invalid=1546, Unknown=0, NotChecked=0, Total=1640
[2020-05-31 03:47:36,242 INFO  L87              Difference]: Start difference. First operand 21511 states and 24771 transitions. cyclomatic complexity: 3286 Second operand 41 states.
[2020-05-31 03:48:13,020 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:13,020 INFO  L93              Difference]: Finished difference Result 23571 states and 27382 transitions.
[2020-05-31 03:48:13,021 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 50 states. 
[2020-05-31 03:48:13,021 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23571 states and 27382 transitions.
[2020-05-31 03:48:13,078 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:13,148 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23571 states to 23558 states and 27366 transitions.
[2020-05-31 03:48:13,148 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1169
[2020-05-31 03:48:13,148 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1169
[2020-05-31 03:48:13,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23558 states and 27366 transitions.
[2020-05-31 03:48:13,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:13,166 INFO  L728         BuchiCegarLoop]: Abstraction has 23558 states and 27366 transitions.
[2020-05-31 03:48:13,178 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23558 states and 27366 transitions.
[2020-05-31 03:48:13,333 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23558 to 22790.
[2020-05-31 03:48:13,333 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22790 states.
[2020-05-31 03:48:13,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22790 states to 22790 states and 26372 transitions.
[2020-05-31 03:48:13,368 INFO  L751         BuchiCegarLoop]: Abstraction has 22790 states and 26372 transitions.
[2020-05-31 03:48:13,368 INFO  L631         BuchiCegarLoop]: Abstraction has 22790 states and 26372 transitions.
[2020-05-31 03:48:13,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-05-31 03:48:13,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22790 states and 26372 transitions.
[2020-05-31 03:48:13,394 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:13,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:13,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:13,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:13,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7347]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7348]  CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L4952]              gas := gas - 7;
[L4953]  COND FALSE  !(DType[this] == RefundEscrow)
[L4958]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4963]  COND TRUE   DType[this] == Escrow
[L4964]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L4964]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L4965]  COND FALSE  !(revert)
[L7348]  RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7349]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:13,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:13,404 INFO  L82        PathProgramCache]: Analyzing trace with hash 1211692978, now seen corresponding path program 1 times
[2020-05-31 03:48:13,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:13,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:13,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 03:48:13,897 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:48:13,898 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-05-31 03:48:13,899 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:13,899 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 03:48:13,899 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 03:48:13,900 INFO  L87              Difference]: Start difference. First operand 22790 states and 26372 transitions. cyclomatic complexity: 3613 Second operand 5 states.
[2020-05-31 03:48:14,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:14,089 INFO  L93              Difference]: Finished difference Result 23082 states and 26778 transitions.
[2020-05-31 03:48:14,089 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:48:14,089 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23082 states and 26778 transitions.
[2020-05-31 03:48:14,132 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:14,196 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23082 states to 23082 states and 26778 transitions.
[2020-05-31 03:48:14,196 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-05-31 03:48:14,197 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-05-31 03:48:14,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23082 states and 26778 transitions.
[2020-05-31 03:48:14,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:14,215 INFO  L728         BuchiCegarLoop]: Abstraction has 23082 states and 26778 transitions.
[2020-05-31 03:48:14,226 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23082 states and 26778 transitions.
[2020-05-31 03:48:14,372 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23082 to 23048.
[2020-05-31 03:48:14,372 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23048 states.
[2020-05-31 03:48:14,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23048 states to 23048 states and 26740 transitions.
[2020-05-31 03:48:14,406 INFO  L751         BuchiCegarLoop]: Abstraction has 23048 states and 26740 transitions.
[2020-05-31 03:48:14,406 INFO  L631         BuchiCegarLoop]: Abstraction has 23048 states and 26740 transitions.
[2020-05-31 03:48:14,407 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-05-31 03:48:14,407 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23048 states and 26740 transitions.
[2020-05-31 03:48:14,432 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:14,432 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:14,432 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:14,434 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:14,434 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7347]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7348]  CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L4952]              gas := gas - 7;
[L4953]  COND FALSE  !(DType[this] == RefundEscrow)
[L4958]  COND TRUE   DType[this] == ConditionalEscrow
[L4959]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L4959]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L4960]  COND FALSE  !(revert)
[L7348]  RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7349]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:14,440 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:14,440 INFO  L82        PathProgramCache]: Analyzing trace with hash -1563113689, now seen corresponding path program 1 times
[2020-05-31 03:48:14,441 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:14,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:14,813 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 820 trivial. 0 not checked.
[2020-05-31 03:48:14,813 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:48:14,813 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:48:14,814 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:14,814 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:48:14,814 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:48:14,814 INFO  L87              Difference]: Start difference. First operand 23048 states and 26740 transitions. cyclomatic complexity: 3723 Second operand 4 states.
[2020-05-31 03:48:14,944 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:14,944 INFO  L93              Difference]: Finished difference Result 23116 states and 26795 transitions.
[2020-05-31 03:48:14,944 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:48:14,944 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23116 states and 26795 transitions.
[2020-05-31 03:48:14,987 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:15,050 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23116 states to 23032 states and 26678 transitions.
[2020-05-31 03:48:15,051 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-05-31 03:48:15,051 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-05-31 03:48:15,051 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23032 states and 26678 transitions.
[2020-05-31 03:48:15,068 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:15,069 INFO  L728         BuchiCegarLoop]: Abstraction has 23032 states and 26678 transitions.
[2020-05-31 03:48:15,080 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23032 states and 26678 transitions.
[2020-05-31 03:48:15,220 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23032 to 22998.
[2020-05-31 03:48:15,220 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22998 states.
[2020-05-31 03:48:15,254 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22998 states to 22998 states and 26640 transitions.
[2020-05-31 03:48:15,254 INFO  L751         BuchiCegarLoop]: Abstraction has 22998 states and 26640 transitions.
[2020-05-31 03:48:15,254 INFO  L631         BuchiCegarLoop]: Abstraction has 22998 states and 26640 transitions.
[2020-05-31 03:48:15,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-05-31 03:48:15,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22998 states and 26640 transitions.
[2020-05-31 03:48:15,279 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:15,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:15,279 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:15,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:15,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7347]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7348]  CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L4952]              gas := gas - 7;
[L4953]  COND TRUE   DType[this] == RefundEscrow
[L4954]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L4954]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L4955]  COND FALSE  !(revert)
[L7348]  RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7349]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5939]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5940]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5940]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5941]  COND FALSE  !(revert)
[L5957]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5962]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5963]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5963]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5964]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:15,289 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:15,289 INFO  L82        PathProgramCache]: Analyzing trace with hash -129763785, now seen corresponding path program 1 times
[2020-05-31 03:48:15,289 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:15,319 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:15,848 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 918 trivial. 0 not checked.
[2020-05-31 03:48:15,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:48:15,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 03:48:15,849 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:15,849 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:48:15,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:48:15,850 INFO  L87              Difference]: Start difference. First operand 22998 states and 26640 transitions. cyclomatic complexity: 3673 Second operand 4 states.
[2020-05-31 03:48:15,973 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:15,973 INFO  L93              Difference]: Finished difference Result 23066 states and 26695 transitions.
[2020-05-31 03:48:15,973 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:48:15,973 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23066 states and 26695 transitions.
[2020-05-31 03:48:16,016 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:16,080 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23066 states to 22982 states and 26578 transitions.
[2020-05-31 03:48:16,080 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-05-31 03:48:16,080 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-05-31 03:48:16,080 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22982 states and 26578 transitions.
[2020-05-31 03:48:16,098 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:16,098 INFO  L728         BuchiCegarLoop]: Abstraction has 22982 states and 26578 transitions.
[2020-05-31 03:48:16,110 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22982 states and 26578 transitions.
[2020-05-31 03:48:16,243 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22982 to 22948.
[2020-05-31 03:48:16,243 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22948 states.
[2020-05-31 03:48:16,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22948 states to 22948 states and 26540 transitions.
[2020-05-31 03:48:16,277 INFO  L751         BuchiCegarLoop]: Abstraction has 22948 states and 26540 transitions.
[2020-05-31 03:48:16,277 INFO  L631         BuchiCegarLoop]: Abstraction has 22948 states and 26540 transitions.
[2020-05-31 03:48:16,278 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-05-31 03:48:16,278 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22948 states and 26540 transitions.
[2020-05-31 03:48:16,302 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:16,303 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:16,303 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:16,305 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:16,306 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7343]  CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5133]              gas := gas - 666;
[L5134]  COND FALSE  !(DType[this] == RefundEscrow)
[L5139]  COND TRUE   DType[this] == ConditionalEscrow
[L5144]  COND FALSE  !(!__var_7)
[L5148]              gas := gas - 7;
[L5149]  COND TRUE   DType[this] == RefundEscrow
[L5150]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5150]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5151]  COND FALSE  !(revert)
[L7343]  RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7344]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:16,312 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:16,312 INFO  L82        PathProgramCache]: Analyzing trace with hash 1188063238, now seen corresponding path program 1 times
[2020-05-31 03:48:16,312 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:16,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:16,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-05-31 03:48:16,730 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 03:48:16,730 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 03:48:16,731 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:16,731 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 03:48:16,731 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 03:48:16,731 INFO  L87              Difference]: Start difference. First operand 22948 states and 26540 transitions. cyclomatic complexity: 3623 Second operand 3 states.
[2020-05-31 03:48:16,835 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:16,835 INFO  L93              Difference]: Finished difference Result 23006 states and 26623 transitions.
[2020-05-31 03:48:16,835 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 03:48:16,835 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23006 states and 26623 transitions.
[2020-05-31 03:48:16,877 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:16,940 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23006 states to 23006 states and 26623 transitions.
[2020-05-31 03:48:16,940 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-05-31 03:48:16,941 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-05-31 03:48:16,941 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23006 states and 26623 transitions.
[2020-05-31 03:48:16,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:16,958 INFO  L728         BuchiCegarLoop]: Abstraction has 23006 states and 26623 transitions.
[2020-05-31 03:48:16,969 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23006 states and 26623 transitions.
[2020-05-31 03:48:17,107 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23006 to 22972.
[2020-05-31 03:48:17,107 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22972 states.
[2020-05-31 03:48:17,141 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22972 states to 22972 states and 26564 transitions.
[2020-05-31 03:48:17,141 INFO  L751         BuchiCegarLoop]: Abstraction has 22972 states and 26564 transitions.
[2020-05-31 03:48:17,141 INFO  L631         BuchiCegarLoop]: Abstraction has 22972 states and 26564 transitions.
[2020-05-31 03:48:17,141 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-05-31 03:48:17,141 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22972 states and 26564 transitions.
[2020-05-31 03:48:17,166 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:17,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:17,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:17,168 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:17,169 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7347]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7348]  CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L4952]              gas := gas - 7;
[L4953]  COND FALSE  !(DType[this] == RefundEscrow)
[L4958]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4963]  COND TRUE   DType[this] == Escrow
[L4964]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L4964]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L4965]  COND FALSE  !(revert)
[L7348]  RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7349]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:17,174 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:17,174 INFO  L82        PathProgramCache]: Analyzing trace with hash -1316343180, now seen corresponding path program 1 times
[2020-05-31 03:48:17,175 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:17,207 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:17,553 INFO  L134       CoverageAnalysis]: Checked inductivity of 829 backedges. 13 proven. 2 refuted. 0 times theorem prover too weak. 814 trivial. 0 not checked.
[2020-05-31 03:48:17,553 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:17,553 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-05-31 03:48:17,554 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:17,554 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-05-31 03:48:17,554 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-05-31 03:48:17,554 INFO  L87              Difference]: Start difference. First operand 22972 states and 26564 transitions. cyclomatic complexity: 3623 Second operand 9 states.
[2020-05-31 03:48:17,732 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:17,732 INFO  L93              Difference]: Finished difference Result 23175 states and 26784 transitions.
[2020-05-31 03:48:17,733 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-05-31 03:48:17,733 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23175 states and 26784 transitions.
[2020-05-31 03:48:17,776 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:17,846 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23175 states to 23175 states and 26784 transitions.
[2020-05-31 03:48:17,847 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1013
[2020-05-31 03:48:17,847 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1013
[2020-05-31 03:48:17,847 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23175 states and 26784 transitions.
[2020-05-31 03:48:17,865 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:17,865 INFO  L728         BuchiCegarLoop]: Abstraction has 23175 states and 26784 transitions.
[2020-05-31 03:48:17,877 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23175 states and 26784 transitions.
[2020-05-31 03:48:18,021 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23175 to 23040.
[2020-05-31 03:48:18,021 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23040 states.
[2020-05-31 03:48:18,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23040 states to 23040 states and 26627 transitions.
[2020-05-31 03:48:18,055 INFO  L751         BuchiCegarLoop]: Abstraction has 23040 states and 26627 transitions.
[2020-05-31 03:48:18,055 INFO  L631         BuchiCegarLoop]: Abstraction has 23040 states and 26627 transitions.
[2020-05-31 03:48:18,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-05-31 03:48:18,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23040 states and 26627 transitions.
[2020-05-31 03:48:18,080 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:18,080 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:18,080 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:18,083 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:18,083 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7338]  CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5133]              gas := gas - 666;
[L5134]  COND TRUE   DType[this] == RefundEscrow
[L5135]  CALL        call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5450]              gas := gas - 3;
[L5451]              gas := gas - 302;
[L5452]              __ret_0_ := _state_RefundEscrow[this] == 1;
[L5135]  RET         call __var_7 := withdrawalAllowed_RefundEscrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5136]  COND FALSE  !(revert)
[L5144]  COND FALSE  !(!__var_7)
[L5148]              gas := gas - 7;
[L5149]  COND TRUE   DType[this] == RefundEscrow
[L5150]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND TRUE   DType[this] == ConditionalEscrow
[L7790]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7790]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7791]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5150]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5151]  COND FALSE  !(revert)
[L7338]  RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7339]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5939]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5940]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5940]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5941]  COND FALSE  !(revert)
[L5957]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5962]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5963]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6584]  COND TRUE   DType[this] == TimedCrowdsale
[L6585]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6585]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6586]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5963]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5964]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:18,090 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:18,090 INFO  L82        PathProgramCache]: Analyzing trace with hash -275904511, now seen corresponding path program 1 times
[2020-05-31 03:48:18,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:18,121 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:18,686 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 1 proven. 3 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-05-31 03:48:18,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:18,686 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [5] total 5
[2020-05-31 03:48:18,687 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:18,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 03:48:18,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 03:48:18,687 INFO  L87              Difference]: Start difference. First operand 23040 states and 26627 transitions. cyclomatic complexity: 3618 Second operand 5 states.
[2020-05-31 03:48:18,852 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:18,852 INFO  L93              Difference]: Finished difference Result 23320 states and 26970 transitions.
[2020-05-31 03:48:18,852 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:48:18,852 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23320 states and 26970 transitions.
[2020-05-31 03:48:18,895 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:18,962 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23320 states to 23320 states and 26970 transitions.
[2020-05-31 03:48:18,962 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-05-31 03:48:18,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-05-31 03:48:18,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23320 states and 26970 transitions.
[2020-05-31 03:48:18,981 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:18,981 INFO  L728         BuchiCegarLoop]: Abstraction has 23320 states and 26970 transitions.
[2020-05-31 03:48:18,993 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23320 states and 26970 transitions.
[2020-05-31 03:48:19,135 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23320 to 23286.
[2020-05-31 03:48:19,135 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23286 states.
[2020-05-31 03:48:19,170 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23286 states to 23286 states and 26911 transitions.
[2020-05-31 03:48:19,170 INFO  L751         BuchiCegarLoop]: Abstraction has 23286 states and 26911 transitions.
[2020-05-31 03:48:19,170 INFO  L631         BuchiCegarLoop]: Abstraction has 23286 states and 26911 transitions.
[2020-05-31 03:48:19,170 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-05-31 03:48:19,170 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23286 states and 26911 transitions.
[2020-05-31 03:48:19,195 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:19,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:19,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:19,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:19,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND TRUE   DType[this] == RefundableCrowdsale
[L5935]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5935]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5936]  COND FALSE  !(revert)
[L5957]  COND TRUE   DType[this] == RefundableCrowdsale
[L5958]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5958]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5959]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:19,204 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:19,205 INFO  L82        PathProgramCache]: Analyzing trace with hash -449972321, now seen corresponding path program 1 times
[2020-05-31 03:48:19,205 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:19,240 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:19,627 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 3 refuted. 0 times theorem prover too weak. 800 trivial. 0 not checked.
[2020-05-31 03:48:19,627 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:19,627 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 03:48:19,627 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:19,628 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:48:19,628 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:48:19,628 INFO  L87              Difference]: Start difference. First operand 23286 states and 26911 transitions. cyclomatic complexity: 3656 Second operand 4 states.
[2020-05-31 03:48:19,763 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:19,763 INFO  L93              Difference]: Finished difference Result 23318 states and 26927 transitions.
[2020-05-31 03:48:19,763 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:48:19,763 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23318 states and 26927 transitions.
[2020-05-31 03:48:19,806 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:19,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23318 states to 23230 states and 26811 transitions.
[2020-05-31 03:48:19,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 999
[2020-05-31 03:48:19,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 999
[2020-05-31 03:48:19,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23230 states and 26811 transitions.
[2020-05-31 03:48:19,889 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:19,890 INFO  L728         BuchiCegarLoop]: Abstraction has 23230 states and 26811 transitions.
[2020-05-31 03:48:19,901 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23230 states and 26811 transitions.
[2020-05-31 03:48:20,042 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23230 to 23214.
[2020-05-31 03:48:20,042 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23214 states.
[2020-05-31 03:48:20,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23214 states to 23214 states and 26795 transitions.
[2020-05-31 03:48:20,076 INFO  L751         BuchiCegarLoop]: Abstraction has 23214 states and 26795 transitions.
[2020-05-31 03:48:20,076 INFO  L631         BuchiCegarLoop]: Abstraction has 23214 states and 26795 transitions.
[2020-05-31 03:48:20,076 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-05-31 03:48:20,076 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23214 states and 26795 transitions.
[2020-05-31 03:48:20,102 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:20,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:20,102 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:20,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:20,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5939]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5940]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5940]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5941]  COND FALSE  !(revert)
[L5957]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5962]  COND TRUE   DType[this] == FinalizableCrowdsale
[L5963]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5963]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5964]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:20,111 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:20,111 INFO  L82        PathProgramCache]: Analyzing trace with hash 1535758802, now seen corresponding path program 1 times
[2020-05-31 03:48:20,111 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:20,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:20,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 814 backedges. 11 proven. 2 refuted. 0 times theorem prover too weak. 801 trivial. 0 not checked.
[2020-05-31 03:48:20,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:20,561 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 03:48:20,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:20,562 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 03:48:20,562 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 03:48:20,562 INFO  L87              Difference]: Start difference. First operand 23214 states and 26795 transitions. cyclomatic complexity: 3612 Second operand 4 states.
[2020-05-31 03:48:20,684 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:20,684 INFO  L93              Difference]: Finished difference Result 23262 states and 26835 transitions.
[2020-05-31 03:48:20,684 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 03:48:20,684 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23262 states and 26835 transitions.
[2020-05-31 03:48:20,726 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:20,789 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23262 states to 23166 states and 26703 transitions.
[2020-05-31 03:48:20,789 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 995
[2020-05-31 03:48:20,790 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 995
[2020-05-31 03:48:20,790 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23166 states and 26703 transitions.
[2020-05-31 03:48:20,807 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:20,807 INFO  L728         BuchiCegarLoop]: Abstraction has 23166 states and 26703 transitions.
[2020-05-31 03:48:20,819 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23166 states and 26703 transitions.
[2020-05-31 03:48:20,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23166 to 23150.
[2020-05-31 03:48:20,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23150 states.
[2020-05-31 03:48:20,992 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23150 states to 23150 states and 26687 transitions.
[2020-05-31 03:48:20,992 INFO  L751         BuchiCegarLoop]: Abstraction has 23150 states and 26687 transitions.
[2020-05-31 03:48:20,992 INFO  L631         BuchiCegarLoop]: Abstraction has 23150 states and 26687 transitions.
[2020-05-31 03:48:20,992 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-05-31 03:48:20,992 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23150 states and 26687 transitions.
[2020-05-31 03:48:21,017 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:21,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:21,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:21,020 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:21,020 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow
[L7343]  CALL        call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L5133]              gas := gas - 666;
[L5134]  COND FALSE  !(DType[this] == RefundEscrow)
[L5139]  COND TRUE   DType[this] == ConditionalEscrow
[L5144]  COND FALSE  !(!__var_7)
[L5148]              gas := gas - 7;
[L5149]  COND FALSE  !(DType[this] == RefundEscrow)
[L5154]  COND TRUE   DType[this] == ConditionalEscrow
[L5155]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND FALSE  !(DType[this] == Escrow)
[L7799]  COND TRUE   DType[this] == Secondary
[L7800]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7800]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7801]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L5155]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s277);
[L5156]  COND FALSE  !(revert)
[L7343]  RET         call withdraw_ConditionalEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7344]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5939]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L5944]  COND TRUE   DType[this] == TimedCrowdsale
[L5945]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5945]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5946]  COND FALSE  !(revert)
[L5957]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5962]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L5967]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L5972]  COND TRUE   DType[this] == Crowdsale
[L5973]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6584]  COND TRUE   DType[this] == TimedCrowdsale
[L6585]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6585]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6586]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5973]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5974]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:21,027 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:21,027 INFO  L82        PathProgramCache]: Analyzing trace with hash -1076559096, now seen corresponding path program 1 times
[2020-05-31 03:48:21,027 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:21,057 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:21,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 1 proven. 3 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-05-31 03:48:21,613 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:21,613 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [5] total 5
[2020-05-31 03:48:21,613 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:21,614 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-05-31 03:48:21,614 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-05-31 03:48:21,614 INFO  L87              Difference]: Start difference. First operand 23150 states and 26687 transitions. cyclomatic complexity: 3568 Second operand 5 states.
[2020-05-31 03:48:21,771 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:21,771 INFO  L93              Difference]: Finished difference Result 23430 states and 27017 transitions.
[2020-05-31 03:48:21,771 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 03:48:21,772 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23430 states and 27017 transitions.
[2020-05-31 03:48:21,814 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:21,883 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23430 states to 23136 states and 26684 transitions.
[2020-05-31 03:48:21,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 991
[2020-05-31 03:48:21,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 991
[2020-05-31 03:48:21,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23136 states and 26684 transitions.
[2020-05-31 03:48:21,901 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:21,901 INFO  L728         BuchiCegarLoop]: Abstraction has 23136 states and 26684 transitions.
[2020-05-31 03:48:21,912 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23136 states and 26684 transitions.
[2020-05-31 03:48:22,061 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23136 to 23102.
[2020-05-31 03:48:22,061 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23102 states.
[2020-05-31 03:48:22,097 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23102 states to 23102 states and 26625 transitions.
[2020-05-31 03:48:22,097 INFO  L751         BuchiCegarLoop]: Abstraction has 23102 states and 26625 transitions.
[2020-05-31 03:48:22,097 INFO  L631         BuchiCegarLoop]: Abstraction has 23102 states and 26625 transitions.
[2020-05-31 03:48:22,097 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-05-31 03:48:22,098 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23102 states and 26625 transitions.
[2020-05-31 03:48:22,124 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:22,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:22,124 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:22,127 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:22,127 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND TRUE   choice == 2
[L9077]              gas := gas - 21000;
[L9078]  COND TRUE   gas >= 0
[L9079]              assume msgvalue_MSG == 0;
[L9080]  CALL        call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2692]              havoc __exception;
[L2693]              revert := false;
[L2694]  COND FALSE  !(__exception)
[L2720]  CALL        call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L7317]  COND TRUE   DType[this] == RefundableCrowdsale
[L7318]  CALL        call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L7318]  RET         call __var_45 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7319]  COND FALSE  !(revert)
[L7325]  COND FALSE  !(!__var_45)
[L7329]  CALL        call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7329]  RET         call __var_46 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7330]  COND FALSE  !(revert)
[L7333]  COND FALSE  !(!!__var_46)
[L7337]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow)
[L7342]  COND FALSE  !(DType[_escrow_RefundableCrowdsale[this]] == ConditionalEscrow)
[L7347]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == Escrow
[L7348]  CALL        call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L4952]              gas := gas - 7;
[L4953]  COND FALSE  !(DType[this] == RefundEscrow)
[L4958]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L4963]  COND TRUE   DType[this] == Escrow
[L4964]  CALL        call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L5011]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND FALSE  !(DType[this] == RefundEscrow)
[L7789]  COND FALSE  !(DType[this] == ConditionalEscrow)
[L7794]  COND TRUE   DType[this] == Escrow
[L7795]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7795]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7796]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5011]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5012]  COND FALSE  !(revert)
[L5015]              gas := gas - 614;
[L5016]              assume payment_s249 >= 0;
[L5017]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5018]              payment_s249 := M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5019]              gas := gas - 10208;
[L5020]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] >= 0;
[L5021]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5022]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250] := 0;
[L5023]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s250];
[L5024]              gas := gas - 71574;
[L5025]              __var_5 := gas;
[L5026]  COND FALSE  !(gas > 2300)
[L5029]              __var_5 := __var_5 - gas;
[L5030]              assume payment_s249 >= 0;
[L5031]  CALL        call __var_6 := send__success(this, payee_s250, payment_s249);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5031]  RET         call __var_6 := send__success(this, payee_s250, payment_s249);
[L5032]  COND FALSE  !(!__var_6)
[L5036]              gas := __var_5 + gas;
[L5037]              assert { :EventEmitted "Withdrawn_Escrow" } true;
[L4964]  RET         call withdraw_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, payee_s219);
[L4965]  COND FALSE  !(revert)
[L7348]  RET         call withdraw_Escrow__success(_escrow_RefundableCrowdsale[this], this, __var_47, refundee_s1220);
[L7349]  COND FALSE  !(revert)
[L2720]  RET         call claimRefund_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L2721]              assume !revert && gas >= 0;
[L9080]  RET         call claimRefund_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, refundee_s1220);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND TRUE   DType[to] == Crowdsale
[L7571]  CALL        call FallbackMethod_Crowdsale__success(to, from, amount);
[L5929]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5930]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5931]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5933]              gas := gas - 8;
[L5934]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5939]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L5944]  COND TRUE   DType[this] == TimedCrowdsale
[L5945]  CALL        call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L5945]  RET         call __var_34 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5946]  COND FALSE  !(revert)
[L5957]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L5962]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L5967]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L5972]  COND TRUE   DType[this] == Crowdsale
[L5973]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6260]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6265]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6270]  COND TRUE   DType[this] == Crowdsale
[L6271]  CALL        call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6452]              gas := gas - 10;
[L6453]              assume weiAmount_s851 >= 0;
[L6454]  COND TRUE   DType[this] == RefundableCrowdsale
[L6455]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6455]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s851, weiAmount_s851);
[L6456]  COND FALSE  !(revert)
[L6271]  RET         call _preValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6272]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6286]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6291]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6296]  COND TRUE   DType[this] == Crowdsale
[L6297]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6297]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6298]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6322]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6327]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6332]  COND TRUE   DType[this] == Crowdsale
[L6333]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6579]  COND TRUE   DType[this] == FinalizableCrowdsale
[L6580]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6580]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6581]  COND FALSE  !(revert)
[L6333]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6334]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6348]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6353]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6358]  COND TRUE   DType[this] == Crowdsale
[L6359]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6359]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6360]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6372]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6377]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6382]  COND TRUE   DType[this] == Crowdsale
[L6383]  CALL        call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6648]              gas := gas - 36028;
[L6649]              __var_37 := gas;
[L6650]  COND FALSE  !(gas > 2300)
[L6653]              __var_37 := __var_37 - gas;
[L6654]              assume msgvalue_MSG >= 0;
[L6655]  CALL        call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L6655]  RET         call __var_38 := send__success(this, _wallet_Crowdsale[this], msgvalue_MSG);
[L6656]  COND FALSE  !(!__var_38)
[L6660]              gas := __var_37 + gas;
[L6383]  RET         call _forwardFunds_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6384]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND FALSE  !(DType[this] == RefundableCrowdsale)
[L6397]  COND FALSE  !(DType[this] == FinalizableCrowdsale)
[L6402]  COND FALSE  !(DType[this] == TimedCrowdsale)
[L6407]  COND TRUE   DType[this] == Crowdsale
[L6408]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6408]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6409]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L5973]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, __var_34);
[L5974]  COND FALSE  !(revert)
[L7571]  RET         call FallbackMethod_Crowdsale__success(to, from, amount);
[L7572]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:22,133 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:22,134 INFO  L82        PathProgramCache]: Analyzing trace with hash -222884179, now seen corresponding path program 1 times
[2020-05-31 03:48:22,134 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:22,165 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:22,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 919 backedges. 1 proven. 51 refuted. 0 times theorem prover too weak. 867 trivial. 0 not checked.
[2020-05-31 03:48:22,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:22,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-31 03:48:22,716 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:22,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-05-31 03:48:22,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=131, Unknown=0, NotChecked=0, Total=156
[2020-05-31 03:48:22,716 INFO  L87              Difference]: Start difference. First operand 23102 states and 26625 transitions. cyclomatic complexity: 3554 Second operand 13 states.
[2020-05-31 03:48:28,712 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:48:28,713 INFO  L93              Difference]: Finished difference Result 15507 states and 17717 transitions.
[2020-05-31 03:48:28,713 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 03:48:28,713 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15507 states and 17717 transitions.
[2020-05-31 03:48:28,751 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:28,783 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15507 states to 12695 states and 14464 transitions.
[2020-05-31 03:48:28,783 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 892
[2020-05-31 03:48:28,784 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 892
[2020-05-31 03:48:28,784 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12695 states and 14464 transitions.
[2020-05-31 03:48:28,792 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:48:28,792 INFO  L728         BuchiCegarLoop]: Abstraction has 12695 states and 14464 transitions.
[2020-05-31 03:48:28,799 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12695 states and 14464 transitions.
[2020-05-31 03:48:28,868 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12695 to 12400.
[2020-05-31 03:48:28,868 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12400 states.
[2020-05-31 03:48:28,884 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12400 states to 12400 states and 14107 transitions.
[2020-05-31 03:48:28,884 INFO  L751         BuchiCegarLoop]: Abstraction has 12400 states and 14107 transitions.
[2020-05-31 03:48:28,884 INFO  L631         BuchiCegarLoop]: Abstraction has 12400 states and 14107 transitions.
[2020-05-31 03:48:28,884 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-05-31 03:48:28,884 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12400 states and 14107 transitions.
[2020-05-31 03:48:28,897 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:48:28,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:48:28,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:48:28,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:48:28,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:48:28,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:48:28,903 INFO  L82        PathProgramCache]: Analyzing trace with hash -1141611303, now seen corresponding path program 1 times
[2020-05-31 03:48:28,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:48:28,944 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:48:30,784 INFO  L134       CoverageAnalysis]: Checked inductivity of 789 backedges. 237 proven. 60 refuted. 0 times theorem prover too weak. 492 trivial. 0 not checked.
[2020-05-31 03:48:30,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:48:30,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [61] total 61
[2020-05-31 03:48:30,785 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:48:30,785 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 62 interpolants.
[2020-05-31 03:48:30,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=199, Invalid=3583, Unknown=0, NotChecked=0, Total=3782
[2020-05-31 03:48:30,786 INFO  L87              Difference]: Start difference. First operand 12400 states and 14107 transitions. cyclomatic complexity: 1725 Second operand 62 states.
[2020-05-31 03:49:15,723 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:49:15,724 INFO  L93              Difference]: Finished difference Result 14449 states and 16428 transitions.
[2020-05-31 03:49:15,724 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 90 states. 
[2020-05-31 03:49:15,724 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14449 states and 16428 transitions.
[2020-05-31 03:49:15,748 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:49:15,776 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14449 states to 14096 states and 15982 transitions.
[2020-05-31 03:49:15,776 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 929
[2020-05-31 03:49:15,776 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 929
[2020-05-31 03:49:15,776 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14096 states and 15982 transitions.
[2020-05-31 03:49:15,784 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:49:15,784 INFO  L728         BuchiCegarLoop]: Abstraction has 14096 states and 15982 transitions.
[2020-05-31 03:49:15,789 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14096 states and 15982 transitions.
[2020-05-31 03:49:15,857 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14096 to 13627.
[2020-05-31 03:49:15,857 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13627 states.
[2020-05-31 03:49:15,874 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13627 states to 13627 states and 15409 transitions.
[2020-05-31 03:49:15,874 INFO  L751         BuchiCegarLoop]: Abstraction has 13627 states and 15409 transitions.
[2020-05-31 03:49:15,874 INFO  L631         BuchiCegarLoop]: Abstraction has 13627 states and 15409 transitions.
[2020-05-31 03:49:15,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-05-31 03:49:15,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13627 states and 15409 transitions.
[2020-05-31 03:49:15,888 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:49:15,888 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:49:15,888 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:49:15,891 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:49:15,891 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND TRUE   DType[to] == RefundableCrowdsale
[L7565]              assume amount == 0;
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:49:15,895 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:49:15,896 INFO  L82        PathProgramCache]: Analyzing trace with hash -2010386483, now seen corresponding path program 1 times
[2020-05-31 03:49:15,896 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:49:15,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:49:17,155 INFO  L134       CoverageAnalysis]: Checked inductivity of 1206 backedges. 12 proven. 94 refuted. 0 times theorem prover too weak. 1100 trivial. 0 not checked.
[2020-05-31 03:49:17,155 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:49:17,155 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-05-31 03:49:17,156 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:49:17,156 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-05-31 03:49:17,156 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=132, Invalid=2318, Unknown=0, NotChecked=0, Total=2450
[2020-05-31 03:49:17,156 INFO  L87              Difference]: Start difference. First operand 13627 states and 15409 transitions. cyclomatic complexity: 1799 Second operand 50 states.
[2020-05-31 03:49:53,445 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:49:53,445 INFO  L93              Difference]: Finished difference Result 14630 states and 16660 transitions.
[2020-05-31 03:49:53,445 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 52 states. 
[2020-05-31 03:49:53,446 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14630 states and 16660 transitions.
[2020-05-31 03:49:53,479 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:49:53,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14630 states to 14617 states and 16644 transitions.
[2020-05-31 03:49:53,515 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 943
[2020-05-31 03:49:53,516 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 943
[2020-05-31 03:49:53,516 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 14617 states and 16644 transitions.
[2020-05-31 03:49:53,525 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:49:53,525 INFO  L728         BuchiCegarLoop]: Abstraction has 14617 states and 16644 transitions.
[2020-05-31 03:49:53,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 14617 states and 16644 transitions.
[2020-05-31 03:49:53,611 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 14617 to 14342.
[2020-05-31 03:49:53,611 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14342 states.
[2020-05-31 03:49:53,630 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14342 states to 14342 states and 16313 transitions.
[2020-05-31 03:49:53,630 INFO  L751         BuchiCegarLoop]: Abstraction has 14342 states and 16313 transitions.
[2020-05-31 03:49:53,630 INFO  L631         BuchiCegarLoop]: Abstraction has 14342 states and 16313 transitions.
[2020-05-31 03:49:53,630 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-05-31 03:49:53,630 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14342 states and 16313 transitions.
[2020-05-31 03:49:53,645 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 03:49:53,645 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 03:49:53,645 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 03:49:53,648 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 03:49:53,648 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := 0;
[L4]                 success_send__success0 := false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]     CALL        call main();
[L4]                 havoc ben;
[L9097]              assume null == 0;
[L9098]  CALL        call this := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L9098]  RET         call this := FreshRefGenerator__success();
[L9099]              assume now >= 0;
[L9100]              assume DType[this] == RefundableCrowdsale;
[L9101]              gas := gas - 53000;
[L9102]  CALL        call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2566]              havoc __exception;
[L2567]              revert := false;
[L2568]  COND FALSE  !(__exception)
[L2594]  CALL        call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7235]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L7235]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7236]  COND FALSE  !(revert)
[L7239]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L7239]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L7240]  COND FALSE  !(revert)
[L7243]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6980]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L6980]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6981]  COND FALSE  !(revert)
[L6984]  CALL        call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L5756]  CALL        call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5739]              assume msgsender_MSG != null;
[L5740]              Balance[this] := 0;
[L5741]              _notEntered_ReentrancyGuard[this] := false;
[L5743]              _notEntered_ReentrancyGuard[this] := true;
[L5756]  RET         call ReentrancyGuard_ReentrancyGuard_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5757]  COND FALSE  !(revert)
[L6984]  RET         call ReentrancyGuard_ReentrancyGuard__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]  COND FALSE  !(revert)
[L6988]  CALL        call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6955]              assume msgsender_MSG != null;
[L6956]              Balance[this] := 0;
[L6957]              _finalized_FinalizableCrowdsale[this] := false;
[L6959]              _finalized_FinalizableCrowdsale[this] := false;
[L6988]  RET         call FinalizableCrowdsale_FinalizableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]  COND FALSE  !(revert)
[L7243]  RET         call FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7244]  COND FALSE  !(revert)
[L7247]  CALL        call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7174]              assume msgsender_MSG != null;
[L7175]              Balance[this] := 0;
[L7176]              _goal_RefundableCrowdsale[this] := 0;
[L7178]              assume goal_s1187 >= 0;
[L7179]  COND FALSE  !(!(goal_s1187 > 0))
[L7183]  CALL        call __var_43 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L7183]  RET         call __var_43 := FreshRefGenerator__success();
[L7184]  COND FALSE  !(revert)
[L7187]  COND TRUE   DType[this] == RefundableCrowdsale
[L7188]  CALL        call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L7188]  RET         call __var_44 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]  COND FALSE  !(revert)
[L7195]              assume DType[__var_43] == RefundEscrow;
[L7196]  CALL        call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L5226]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5226]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5227]  COND FALSE  !(revert)
[L5230]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5230]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5231]  COND FALSE  !(revert)
[L5234]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5234]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5235]  COND FALSE  !(revert)
[L5238]  CALL        call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5078]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L5078]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  COND FALSE  !(revert)
[L5082]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L5082]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L5083]  COND FALSE  !(revert)
[L5086]  CALL        call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L4786]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4786]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4787]  COND FALSE  !(revert)
[L4790]  CALL        call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4671]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4446]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4431]              assume msgsender_MSG != null;
[L4432]              Balance[this] := 0;
[L4446]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4447]  COND FALSE  !(revert)
[L4671]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4672]  COND FALSE  !(revert)
[L4675]  CALL        call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4623]              assume msgsender_MSG != null;
[L4624]              Balance[this] := 0;
[L4625]              _primary_Secondary[this] := null;
[L4627]  COND TRUE   DType[this] == RefundEscrow
[L4628]  CALL        call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L4628]  RET         call msgSender_s90 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4629]  COND FALSE  !(revert)
[L4650]              msgSender_s90 := msgSender_s90;
[L4651]              _primary_Secondary[this] := msgSender_s90;
[L4652]              assert { :EventEmitted "PrimaryTransferred_Secondary" } true;
[L4675]  RET         call Secondary_Secondary_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4676]  COND FALSE  !(revert)
[L4790]  RET         call Secondary_Secondary__success(this, msgsender_MSG, msgvalue_MSG);
[L4791]  COND FALSE  !(revert)
[L4794]  CALL        call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]              assume msgsender_MSG != null;
[L4755]              Balance[this] := 0;
[L4757]  CALL        call __var_3 := FreshRefGenerator__success();
[L4414]              havoc newRef;
[L4415]              assume Alloc[newRef] == false;
[L4416]              Alloc[newRef] := true;
[L4417]              assume newRef != null;
[L4757]  RET         call __var_3 := FreshRefGenerator__success();
[L4758]  COND FALSE  !(revert)
[L4761]              _deposits_Escrow[this] := __var_3;
[L4763]              M_Ref_int__deposits0[_deposits_Escrow[this]] := zeroRefIntArr();
[L4764]              sum__deposits0[_deposits_Escrow[this]] := 0;
[L4794]  RET         call Escrow_Escrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4795]  COND FALSE  !(revert)
[L5086]  RET         call Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5087]  COND FALSE  !(revert)
[L5090]  CALL        call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5051]              assume msgsender_MSG != null;
[L5052]              Balance[this] := 0;
[L5090]  RET         call ConditionalEscrow_ConditionalEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5091]  COND FALSE  !(revert)
[L5238]  RET         call ConditionalEscrow_ConditionalEscrow__success(this, msgsender_MSG, msgvalue_MSG);
[L5239]  COND FALSE  !(revert)
[L5242]  CALL        call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5185]              assume msgsender_MSG != null;
[L5186]              Balance[this] := 0;
[L5187]              _beneficiary_RefundEscrow[this] := null;
[L5189]              __var_8 := null;
[L5190]  COND FALSE  !(!(beneficiary_s316 != null))
[L5194]              _beneficiary_RefundEscrow[this] := beneficiary_s316;
[L5195]              _state_RefundEscrow[this] := 0;
[L5242]  RET         call RefundEscrow_RefundEscrow_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s316);
[L5243]  COND FALSE  !(revert)
[L7196]  RET         call RefundEscrow_RefundEscrow__success(__var_43, this, 0, __var_44);
[L7197]  COND FALSE  !(revert)
[L7200]              __var_42 := __var_43;
[L7201]              _escrow_RefundableCrowdsale[this] := __var_42;
[L7202]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7203]              assume goal_s1187 >= 0;
[L7204]              _goal_RefundableCrowdsale[this] := goal_s1187;
[L7247]  RET         call RefundableCrowdsale_RefundableCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L7248]  COND FALSE  !(revert)
[L2594]  RET         call RefundableCrowdsale_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L2595]              assume !revert && gas >= 0;
[L9102]  RET         call RefundableCrowdsale_RefundableCrowdsale(this, msgsender_MSG, msgvalue_MSG, goal_s1187);
[L9103]              assume !revert && gas >= 0;
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND TRUE   choice == 10
[L9029]              gas := gas - 21000;
[L9030]  COND TRUE   gas >= 0
[L9031]              assume msgvalue_MSG >= 0;
[L9032]  CALL        call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1918]              havoc __exception;
[L1919]              revert := false;
[L1920]  COND FALSE  !(__exception)
[L1946]  CALL        call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L6241]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L6242]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L6243]              Balance[this] := Balance[this] + msgvalue_MSG;
[L6245]  CALL        call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7826]              gas := gas - 891;
[L7827]  COND FALSE  !(!_notEntered_ReentrancyGuard[this])
[L7831]              gas := gas - 20267;
[L7832]              _notEntered_ReentrancyGuard[this] := false;
[L6245]  RET         call nonReentrant_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6246]  COND FALSE  !(revert)
[L6249]              gas := gas - 10;
[L6250]              assume weiAmount_s837 >= 0;
[L6251]              assume msgvalue_MSG >= 0;
[L6252]              weiAmount_s837 := msgvalue_MSG;
[L6253]              gas := gas - 10;
[L6254]              assume weiAmount_s837 >= 0;
[L6255]  COND TRUE   DType[this] == RefundableCrowdsale
[L6256]  CALL        call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6844]  CALL        call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7865]  COND TRUE   DType[this] == RefundableCrowdsale
[L7866]  CALL        call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6791]              assume now >= 0;
[L6792]              assume _openingTime_TimedCrowdsale[this] >= 0;
[L6793]              assume now >= 0;
[L6794]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6795]              __ret_0_ := now >= _openingTime_TimedCrowdsale[this] && now <= _closingTime_TimedCrowdsale[this];
[L7866]  RET         call __var_39 := isOpen_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7867]  COND FALSE  !(revert)
[L7883]  COND FALSE  !(!__var_39)
[L6844]  RET         call onlyWhileOpen_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6845]  COND FALSE  !(revert)
[L6848]              assume weiAmount_s1058 >= 0;
[L6849]  COND TRUE   DType[this] == RefundableCrowdsale
[L6850]  CALL        call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6499]              gas := gas - 683;
[L6500]              __var_36 := null;
[L6501]  COND FALSE  !(!(beneficiary_s877 != null))
[L6505]              gas := gas - 664;
[L6506]              assume weiAmount_s877 >= 0;
[L6507]  COND FALSE  !(!(weiAmount_s877 != 0))
[L6850]  RET         call _preValidatePurchase_Crowdsale_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s1058, weiAmount_s1058);
[L6851]  COND FALSE  !(revert)
[L6256]  RET         call _preValidatePurchase_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6257]  COND FALSE  !(revert)
[L6278]              gas := gas - 15;
[L6279]              assume tokens_s837 >= 0;
[L6280]              assume weiAmount_s837 >= 0;
[L6281]  COND TRUE   DType[this] == RefundableCrowdsale
[L6282]  CALL        call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6618]              gas := gas - 3;
[L6619]              gas := gas - 8;
[L6620]              assume weiAmount_s932 >= 0;
[L6621]              __ret_0_ := weiAmount_s932;
[L6282]  RET         call tokens_s837 := _getTokenAmount_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, weiAmount_s837);
[L6283]  COND FALSE  !(revert)
[L6304]              tokens_s837 := tokens_s837;
[L6305]              gas := gas - 20247;
[L6306]              assume _weiRaised_Crowdsale[this] >= 0;
[L6307]              assume _weiRaised_Crowdsale[this] >= 0;
[L6308]              assume weiAmount_s837 >= 0;
[L6309]  CALL        call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L6309]  RET         call __var_35 := add_SafeMath__success(this, this, 0, _weiRaised_Crowdsale[this], weiAmount_s837);
[L6310]  COND FALSE  !(revert)
[L6313]              _weiRaised_Crowdsale[this] := __var_35;
[L6314]              assume __var_35 >= 0;
[L6315]              gas := gas - 10;
[L6316]              assume tokens_s837 >= 0;
[L6317]  COND TRUE   DType[this] == RefundableCrowdsale
[L6318]  CALL        call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6572]              gas := gas - 10;
[L6573]              assume tokenAmount_s914 >= 0;
[L6574]  COND TRUE   DType[this] == RefundableCrowdsale
[L6575]  CALL        call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6533]              gas := gas - 299;
[L6534]              assume tokenAmount_s901 >= 0;
[L6535]  CALL        call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L5537]              gas := gas - 37240;
[L5538]              assume value_s517 >= 0;
[L5540]  COND FALSE  !(!__var_12)
[L6535]  RET         call safeTransfer_SafeERC20__success(this, this, msgvalue_MSG, _token_Crowdsale[this], beneficiary_s901, tokenAmount_s901);
[L6536]  COND FALSE  !(revert)
[L6575]  RET         call _deliverTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s914, tokenAmount_s914);
[L6576]  COND FALSE  !(revert)
[L6318]  RET         call _processPurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, tokens_s837);
[L6319]  COND FALSE  !(revert)
[L6340]              assert { :EventEmitted "TokensPurchased_Crowdsale" } true;
[L6341]              gas := gas - 10;
[L6342]              assume weiAmount_s837 >= 0;
[L6343]  COND TRUE   DType[this] == RefundableCrowdsale
[L6344]  CALL        call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6344]  RET         call _updatePurchasingState_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6345]  COND FALSE  !(revert)
[L6366]              gas := gas - 4;
[L6367]  COND TRUE   DType[this] == RefundableCrowdsale
[L6368]  CALL        call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]              assume msgvalue_MSG >= 0;
[L7499]  COND TRUE   DType[this] == RefundableCrowdsale
[L7500]  CALL        call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7500]  RET         call __var_53 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7501]  COND FALSE  !(revert)
[L7507]  COND TRUE   DType[_escrow_RefundableCrowdsale[this]] == RefundEscrow
[L7508]  CALL        call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L5306]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L5307]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L5308]              Balance[this] := Balance[this] + msgvalue_MSG;
[L5310]              gas := gas - 956;
[L5311]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5315]              gas := gas - 7;
[L5316]  COND TRUE   DType[this] == RefundEscrow
[L5317]  CALL        call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L4904]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L4904]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4905]  COND FALSE  !(revert)
[L4908]              gas := gas - 20;
[L4909]              assume amount_s208 >= 0;
[L4910]              assume msgvalue_MSG >= 0;
[L4911]              amount_s208 := msgvalue_MSG;
[L4912]              gas := gas - 40878;
[L4913]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4914]              assume M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] >= 0;
[L4915]              assume amount_s208 >= 0;
[L4916]  CALL        call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4526]              gas := gas - 9;
[L4527]              gas := gas - 51;
[L4528]              assume c_s39 >= 0;
[L4529]              assume a_s40 >= 0;
[L4530]              assume b_s40 >= 0;
[L4531]              assume a_s40 + b_s40 >= 0;
[L4532]              c_s39 := a_s40 + b_s40;
[L4533]              gas := gas - 1992;
[L4534]              assume c_s39 >= 0;
[L4535]              assume a_s40 >= 0;
[L4536]  COND FALSE  !(!(c_s39 >= a_s40))
[L4540]              gas := gas - 30;
[L4541]              assume c_s39 >= 0;
[L4542]              __ret_0_ := c_s39;
[L4916]  RET         call __var_4 := add_SafeMath__success(this, this, 0, M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209], amount_s208);
[L4917]  COND FALSE  !(revert)
[L4920]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] - M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4921]              M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209] := __var_4;
[L4922]              sum__deposits0[_deposits_Escrow[this]] := sum__deposits0[_deposits_Escrow[this]] + M_Ref_int__deposits0[_deposits_Escrow[this]][payee_s209];
[L4923]              assume __var_4 >= 0;
[L4924]              assert { :EventEmitted "Deposited_Escrow" } true;
[L5317]  RET         call deposit_Escrow_Escrow__success(this, msgsender_MSG, msgvalue_MSG, refundee_s350);
[L5318]  COND FALSE  !(revert)
[L7508]  RET         call deposit_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, msgvalue_MSG, __var_53);
[L7509]  COND FALSE  !(revert)
[L6368]  RET         call _forwardFunds_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6369]  COND FALSE  !(revert)
[L6390]              gas := gas - 10;
[L6391]              assume weiAmount_s837 >= 0;
[L6392]  COND TRUE   DType[this] == RefundableCrowdsale
[L6393]  CALL        call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6393]  RET         call _postValidatePurchase_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838, weiAmount_s837);
[L6394]  COND FALSE  !(revert)
[L6415]  CALL        call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L7897]              gas := gas - 20267;
[L7898]              _notEntered_ReentrancyGuard[this] := true;
[L6415]  RET         call nonReentrant_post__success(this, msgsender_MSG, msgvalue_MSG);
[L6416]  COND FALSE  !(revert)
[L1946]  RET         call buyTokens_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L1947]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 success_buyTokens_Crowdsale0 := true;
[L4]                 success_buyTokens_Crowdsale0 := false;
[L4]                 revert := revert_hold;
[L4]                 fsum_buyTokens_Crowdsale_2_0 := fsum_buyTokens_Crowdsale_2_0 + msgvalue_MSG;
[L9032]  RET         call buyTokens_Crowdsale(this, msgsender_MSG, msgvalue_MSG, beneficiary_s838);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume (__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := true;
[L4]                 inv_CorralChoice_RefundableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND TRUE   choice == 4
[L9065]              gas := gas - 21000;
[L9066]  COND TRUE   gas >= 0
[L9067]              assume msgvalue_MSG == 0;
[L9068]  CALL        call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L2476]              havoc __exception;
[L2477]              revert := false;
[L2478]  COND FALSE  !(__exception)
[L2504]  CALL        call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7049]  COND FALSE  !(!!_finalized_FinalizableCrowdsale[this])
[L7053]  COND TRUE   DType[this] == RefundableCrowdsale
[L7054]  CALL        call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L7054]  RET         call __var_41 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7055]  COND FALSE  !(revert)
[L7066]  COND FALSE  !(!__var_41)
[L7070]              _finalized_FinalizableCrowdsale[this] := true;
[L7071]  COND TRUE   DType[this] == RefundableCrowdsale
[L7072]  CALL        call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]  CALL        call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L7434]  RET         call __var_49 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]  COND FALSE  !(revert)
[L7438]  COND TRUE   __var_49
[L7439]  CALL        call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L5343]  CALL        call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7783]              gas := gas - 7402;
[L7784]  COND TRUE   DType[this] == RefundEscrow
[L7785]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4462]              gas := gas - 9;
[L4463]              gas := gas - 21;
[L4464]              __ret_0_ := msgsender_MSG;
[L7785]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7786]  COND FALSE  !(revert)
[L7807]  COND FALSE  !(!(__var_1 == _primary_Secondary[this]))
[L5343]  RET         call onlyPrimary_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5344]  COND FALSE  !(revert)
[L5347]              gas := gas - 956;
[L5348]  COND FALSE  !(!(_state_RefundEscrow[this] == 0))
[L5352]              gas := gas - 20287;
[L5353]              _state_RefundEscrow[this] := 2;
[L5354]              assert { :EventEmitted "RefundsClosed_RefundEscrow" } true;
[L7439]  RET         call close_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_50);
[L7440]  COND FALSE  !(revert)
[L7443]  CALL        call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L5419]              gas := gas - 956;
[L5420]  COND FALSE  !(!(_state_RefundEscrow[this] == 2))
[L5424]              gas := gas - 36484;
[L5425]              __var_9 := gas;
[L5426]  COND TRUE   gas > 2300
[L5427]              gas := 2300;
[L5429]              __var_9 := __var_9 - gas;
[L5430]              __var_10 := this;
[L5431]              assume Balance[this] >= 0;
[L5432]  CALL        call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L7706]              havoc __exception;
[L7707]  COND FALSE  !(__exception)
[L7737]  COND TRUE   Balance[from] >= amount
[L7738]  CALL        call FallbackDispatch__success(from, to, amount);
[L7564]  COND FALSE  !(DType[to] == RefundableCrowdsale)
[L7566]  COND FALSE  !(DType[to] == FinalizableCrowdsale)
[L7568]  COND FALSE  !(DType[to] == TimedCrowdsale)
[L7570]  COND FALSE  !(DType[to] == Crowdsale)
[L7575]  COND FALSE  !(DType[to] == ReentrancyGuard)
[L7577]  COND FALSE  !(DType[to] == IERC20)
[L7579]  COND FALSE  !(DType[to] == RefundEscrow)
[L7581]  COND FALSE  !(DType[to] == ConditionalEscrow)
[L7583]  COND FALSE  !(DType[to] == Escrow)
[L7585]  COND FALSE  !(DType[to] == Secondary)
[L7587]  COND FALSE  !(DType[to] == Context)
[L7590]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L7609]              assume Balance[from] >= amount;
[L7610]              Balance[from] := Balance[from] - amount;
[L7611]              Balance[to] := Balance[to] + amount;
[L7590]  RET         call Fallback_UnknownType__success(from, to, amount);
[L7591]  COND FALSE  !(revert)
[L7738]  RET         call FallbackDispatch__success(from, to, amount);
[L7739]              success := true;
[L7743]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L4]                 assume !(to == ben && amount == fsum_buyTokens_Crowdsale_2_0);
[L4]                 revert := revert_hold;
[L5432]  RET         call __var_11 := send__success(this, _beneficiary_RefundEscrow[this], Balance[this]);
[L5433]  COND FALSE  !(!__var_11)
[L5437]              gas := __var_9 + gas;
[L7443]  RET         call beneficiaryWithdraw_RefundEscrow__success(_escrow_RefundableCrowdsale[this], this, __var_51);
[L7444]  COND FALSE  !(revert)
[L7453]  COND TRUE   DType[this] == RefundableCrowdsale
[L7454]  CALL        call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]  RET         call _finalization_FinalizableCrowdsale_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]  COND FALSE  !(revert)
[L7072]  RET         call _finalization_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7073]  COND FALSE  !(revert)
[L7084]              assert { :EventEmitted "CrowdsaleFinalized_FinalizableCrowdsale" } true;
[L2504]  RET         call finalize_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]              assume !revert && gas >= 0;
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6008]              gas := gas - 3;
[L6009]              gas := gas - 244;
[L6010]              __ret_0_ := _wallet_Crowdsale[this];
[L1]     RET         call __wallet_Crowdsale1 := wallet_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume ben == __wallet_Crowdsale1;
[L4]                 success_finalize_FinalizableCrowdsale0 := true;
[L4]                 success_finalize_FinalizableCrowdsale0 := false;
[L4]                 revert := revert_hold;
[L9068]  RET         call finalize_FinalizableCrowdsale(this, msgsender_MSG, msgvalue_MSG);
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

Loop:
[L9106]  CALL        call CorralChoice_RefundableCrowdsale(this);
[L8961]              havoc msgsender_MSG;
[L8962]              havoc msgvalue_MSG;
[L8963]              havoc choice;
[L8964]              havoc rate_s740;
[L8965]              havoc wallet_s740;
[L8966]              havoc token_s740;
[L8967]              havoc __ret_0_token;
[L8968]              havoc __ret_0_wallet;
[L8969]              havoc __ret_0_rate;
[L8970]              havoc __ret_0_weiRaised;
[L8971]              havoc beneficiary_s838;
[L8972]              havoc openingTime_s1000;
[L8973]              havoc closingTime_s1000;
[L8974]              havoc __ret_0_openingTime;
[L8975]              havoc __ret_0_closingTime;
[L8976]              havoc __ret_0_isOpen;
[L8977]              havoc __ret_0_hasClosed;
[L8978]              havoc __ret_0_finalized;
[L8979]              havoc goal_s1187;
[L8980]              havoc __ret_0_goal;
[L8981]              havoc refundee_s1220;
[L8982]              havoc __ret_0_goalReached;
[L8983]              havoc tmpNow;
[L8984]              havoc gas;
[L8985]              assume gas > 4000000 && gas <= 8000000;
[L8986]              tmpNow := now;
[L8987]              havoc now;
[L8988]              assume now > tmpNow;
[L8989]              assume msgsender_MSG != null;
[L8990]              assume DType[msgsender_MSG] != Context;
[L8991]              assume DType[msgsender_MSG] != SafeMath;
[L8992]              assume DType[msgsender_MSG] != Secondary;
[L8993]              assume DType[msgsender_MSG] != Escrow;
[L8994]              assume DType[msgsender_MSG] != ConditionalEscrow;
[L8995]              assume DType[msgsender_MSG] != RefundEscrow;
[L8996]              assume DType[msgsender_MSG] != IERC20;
[L8997]              assume DType[msgsender_MSG] != SafeERC20;
[L8998]              assume DType[msgsender_MSG] != ReentrancyGuard;
[L8999]              assume DType[msgsender_MSG] != Crowdsale;
[L9000]              assume DType[msgsender_MSG] != TimedCrowdsale;
[L9001]              assume DType[msgsender_MSG] != FinalizableCrowdsale;
[L9002]              assume DType[msgsender_MSG] != RefundableCrowdsale;
[L9003]              Alloc[msgsender_MSG] := true;
[L9004]  COND FALSE  !(choice == 14)
[L9010]  COND FALSE  !(choice == 13)
[L9016]  COND FALSE  !(choice == 12)
[L9022]  COND FALSE  !(choice == 11)
[L9028]  COND FALSE  !(choice == 10)
[L9034]  COND FALSE  !(choice == 9)
[L9040]  COND FALSE  !(choice == 8)
[L9046]  COND FALSE  !(choice == 7)
[L9052]  COND FALSE  !(choice == 6)
[L9058]  COND FALSE  !(choice == 5)
[L9064]  COND FALSE  !(choice == 4)
[L9070]  COND FALSE  !(choice == 3)
[L9076]  COND FALSE  !(choice == 2)
[L9082]  COND FALSE  !(choice == 1)
[L4]                 revert_hold := revert;
[L4]                 revert := false;
[L1]     CALL        call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7002]              __ret_0_ := _finalized_FinalizableCrowdsale[this];
[L1]     RET         call __finalized_FinalizableCrowdsale0 := finalized_FinalizableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7378]              assume __var_48 >= 0;
[L7379]  COND TRUE   DType[this] == RefundableCrowdsale
[L7380]  CALL        call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6043]              gas := gas - 3;
[L6044]              gas := gas - 208;
[L6045]              assume _weiRaised_Crowdsale[this] >= 0;
[L6046]              __ret_0_ := _weiRaised_Crowdsale[this];
[L7380]  RET         call __var_48 := weiRaised_Crowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]  COND FALSE  !(revert)
[L7387]              assume __var_48 >= 0;
[L7388]              assume _goal_RefundableCrowdsale[this] >= 0;
[L7389]              __ret_0_ := __var_48 >= _goal_RefundableCrowdsale[this];
[L1]     RET         call __goalReached_RefundableCrowdsale0 := goalReached_RefundableCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L1]     CALL        call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L6809]              assume now >= 0;
[L6810]              assume _closingTime_TimedCrowdsale[this] >= 0;
[L6811]              __ret_0_ := now > _closingTime_TimedCrowdsale[this];
[L1]     RET         call __hasClosed_TimedCrowdsale0 := hasClosed_TimedCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
[L4]                 assume !((__hasClosed_TimedCrowdsale0 == true && __goalReached_RefundableCrowdsale0 == true) && __finalized_FinalizableCrowdsale0 == false);
[L4]                 revert := revert_hold;
[L9106]  RET         call CorralChoice_RefundableCrowdsale(this);

[2020-05-31 03:49:53,653 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 03:49:53,653 INFO  L82        PathProgramCache]: Analyzing trace with hash -1723282011, now seen corresponding path program 1 times
[2020-05-31 03:49:53,654 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 03:49:53,704 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 03:49:55,230 INFO  L134       CoverageAnalysis]: Checked inductivity of 1206 backedges. 43 proven. 22 refuted. 0 times theorem prover too weak. 1141 trivial. 0 not checked.
[2020-05-31 03:49:55,230 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 03:49:55,230 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 03:49:55,231 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 03:49:55,231 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 03:49:55,231 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=2407, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 03:49:55,231 INFO  L87              Difference]: Start difference. First operand 14342 states and 16313 transitions. cyclomatic complexity: 1993 Second operand 51 states.
[2020-05-31 03:50:21,765 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 03:50:21,765 INFO  L93              Difference]: Finished difference Result 9424 states and 10696 transitions.
[2020-05-31 03:50:21,765 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-31 03:50:21,765 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9424 states and 10696 transitions.
[2020-05-31 03:50:21,780 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 03:50:21,780 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9424 states to 0 states and 0 transitions.
[2020-05-31 03:50:21,780 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 03:50:21,780 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 03:50:21,780 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 03:50:21,780 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 03:50:21,780 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 03:50:21,780 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 03:50:21,780 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 03:50:21,780 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-05-31 03:50:21,781 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 03:50:21,781 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 03:50:21,781 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 03:50:21,784 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 03:50:21 BasicIcfg
[2020-05-31 03:50:21,784 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 03:50:21,784 INFO  L168              Benchmark]: Toolchain (without parser) took 444959.53 ms. Allocated memory was 514.9 MB in the beginning and 7.2 GB in the end (delta: 6.6 GB). Free memory was 444.0 MB in the beginning and 5.5 GB in the end (delta: -5.0 GB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,785 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,785 INFO  L168              Benchmark]: Boogie Preprocessor took 109.08 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 427.7 MB in the end (delta: 16.3 MB). Peak memory consumption was 16.3 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,786 INFO  L168              Benchmark]: UtopiaSpecLang took 65.26 ms. Allocated memory is still 514.9 MB. Free memory was 427.7 MB in the beginning and 416.8 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,786 INFO  L168              Benchmark]: Boogie Printer took 22.66 ms. Allocated memory is still 514.9 MB. Free memory was 416.8 MB in the beginning and 411.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,787 INFO  L168              Benchmark]: RCFGBuilder took 827.52 ms. Allocated memory is still 514.9 MB. Free memory was 411.4 MB in the beginning and 445.4 MB in the end (delta: -34.0 MB). Peak memory consumption was 83.4 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,787 INFO  L168              Benchmark]: UtopiaLTL2Aut took 51.16 ms. Allocated memory is still 514.9 MB. Free memory was 445.4 MB in the beginning and 440.8 MB in the end (delta: 4.6 MB). Peak memory consumption was 4.6 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,787 INFO  L168              Benchmark]: BÃ¼chi Program Product took 11866.57 ms. Allocated memory was 514.9 MB in the beginning and 2.4 GB in the end (delta: 1.9 GB). Free memory was 440.8 MB in the beginning and 263.5 MB in the end (delta: 177.2 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,787 INFO  L168              Benchmark]: BlockEncodingV2 took 2843.08 ms. Allocated memory was 2.4 GB in the beginning and 3.5 GB in the end (delta: 1.1 GB). Free memory was 263.5 MB in the beginning and 2.2 GB in the end (delta: -1.9 GB). Peak memory consumption was 211.3 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,788 INFO  L168              Benchmark]: BuchiAutomizer took 429170.92 ms. Allocated memory was 3.5 GB in the beginning and 7.2 GB in the end (delta: 3.6 GB). Free memory was 2.2 GB in the beginning and 5.5 GB in the end (delta: -3.3 GB). Peak memory consumption was 361.5 MB. Max. memory is 15.3 GB.
[2020-05-31 03:50:21,791 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    38183 locations, 155382 edges
  - StatisticsResult: Encoded RCFG
    37423 locations, 150650 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 109.08 ms. Allocated memory is still 514.9 MB. Free memory was 444.0 MB in the beginning and 427.7 MB in the end (delta: 16.3 MB). Peak memory consumption was 16.3 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.26 ms. Allocated memory is still 514.9 MB. Free memory was 427.7 MB in the beginning and 416.8 MB in the end (delta: 10.9 MB). Peak memory consumption was 10.9 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.66 ms. Allocated memory is still 514.9 MB. Free memory was 416.8 MB in the beginning and 411.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 827.52 ms. Allocated memory is still 514.9 MB. Free memory was 411.4 MB in the beginning and 445.4 MB in the end (delta: -34.0 MB). Peak memory consumption was 83.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 51.16 ms. Allocated memory is still 514.9 MB. Free memory was 445.4 MB in the beginning and 440.8 MB in the end (delta: 4.6 MB). Peak memory consumption was 4.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 11866.57 ms. Allocated memory was 514.9 MB in the beginning and 2.4 GB in the end (delta: 1.9 GB). Free memory was 440.8 MB in the beginning and 263.5 MB in the end (delta: 177.2 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 2843.08 ms. Allocated memory was 2.4 GB in the beginning and 3.5 GB in the end (delta: 1.1 GB). Free memory was 263.5 MB in the beginning and 2.2 GB in the end (delta: -1.9 GB). Peak memory consumption was 211.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 429170.92 ms. Allocated memory was 3.5 GB in the beginning and 7.2 GB in the end (delta: 3.6 GB). Free memory was 2.2 GB in the beginning and 5.5 GB in the end (delta: -3.3 GB). Peak memory consumption was 361.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    3877 locations, 5267 edges
  - StatisticsResult: BuchiProgram size
    38183 locations, 155382 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 55 terminating modules (55 trivial, 0 deterministic, 0 nondeterministic). 55 modules have a trivial ranking function, the largest among these consists of 62 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 429.1s and 56 iterations.  TraceHistogramMax:10. Analysis of lassos took 22.5s. Construction of modules took 330.0s. BÃ¼chi inclusion checks took 52.9s. Highest rank in rank-based complementation 0. Minimization of det autom 55. Minimization of nondet autom 0. Automata minimization 12.0s AutomataMinimizationTime, 54 MinimizatonAttempts, 14897 StatesRemovedByMinimization, 42 NontrivialMinimizations. Non-live state removal took 7.7s Buchi closure took 0.0s. Biggest automaton had 45292 states and ocurred in iteration 27.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 980829 SDtfs, 512892 SDslu, 2920257 SDs, 0 SdLazy, 2015557 SolverSat, 113266 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 330.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU55 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_buyTokens_(inv_CorralChoice_RefundableCrowdsale0)rowdsale0) ) && ( <>(success_finalize_Finalizable(inv_CorralChoice_RefundableCrowdsale0)rowdsale0) ) )&& ! ( ( []( (inv_CorralChoice_RefundableCrowdsale0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
